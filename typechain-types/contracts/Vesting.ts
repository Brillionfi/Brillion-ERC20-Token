/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VestingInterface extends utils.Interface {
  functions: {
    "addMultipleRecipients(address[],uint256[])": FunctionFragment;
    "addRecipient(address,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "cumulativeAmountsToVest(uint256)": FunctionFragment;
    "hasClaim()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipients(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStartDate(uint256)": FunctionFragment;
    "startDate()": FunctionFragment;
    "totalPercentages()": FunctionFragment;
    "totalRecipients()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMultipleRecipients"
      | "addRecipient"
      | "claim"
      | "cumulativeAmountsToVest"
      | "hasClaim"
      | "owner"
      | "recipients"
      | "renounceOwnership"
      | "setStartDate"
      | "startDate"
      | "totalPercentages"
      | "totalRecipients"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMultipleRecipients",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cumulativeAmountsToVest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "hasClaim", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStartDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPercentages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRecipients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMultipleRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeAmountsToVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogRecipientAdded(address,uint256)": EventFragment;
    "LogStartDateSet(address,uint256)": EventFragment;
    "LogTokensClaimed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogRecipientAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStartDateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogRecipientAddedEventObject {
  recipient: string;
  withdrawPercentage: BigNumber;
}
export type LogRecipientAddedEvent = TypedEvent<
  [string, BigNumber],
  LogRecipientAddedEventObject
>;

export type LogRecipientAddedEventFilter =
  TypedEventFilter<LogRecipientAddedEvent>;

export interface LogStartDateSetEventObject {
  setter: string;
  startDate: BigNumber;
}
export type LogStartDateSetEvent = TypedEvent<
  [string, BigNumber],
  LogStartDateSetEventObject
>;

export type LogStartDateSetEventFilter = TypedEventFilter<LogStartDateSetEvent>;

export interface LogTokensClaimedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type LogTokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  LogTokensClaimedEventObject
>;

export type LogTokensClaimedEventFilter =
  TypedEventFilter<LogTokensClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMultipleRecipients(
      _recipients: PromiseOrValue<string>[],
      _withdrawPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRecipient(
      _recipientAddress: PromiseOrValue<string>,
      _withdrawPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cumulativeAmountsToVest(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasClaim(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _owedAmount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawnAmount: BigNumber;
        withdrawPercentage: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartDate(
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPercentages(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRecipients(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMultipleRecipients(
    _recipients: PromiseOrValue<string>[],
    _withdrawPercentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRecipient(
    _recipientAddress: PromiseOrValue<string>,
    _withdrawPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cumulativeAmountsToVest(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasClaim(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recipients(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      withdrawnAmount: BigNumber;
      withdrawPercentage: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartDate(
    _startDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  totalPercentages(overrides?: CallOverrides): Promise<BigNumber>;

  totalRecipients(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMultipleRecipients(
      _recipients: PromiseOrValue<string>[],
      _withdrawPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRecipient(
      _recipientAddress: PromiseOrValue<string>,
      _withdrawPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    cumulativeAmountsToVest(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaim(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawnAmount: BigNumber;
        withdrawPercentage: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStartDate(
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    totalPercentages(overrides?: CallOverrides): Promise<BigNumber>;

    totalRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogRecipientAdded(address,uint256)"(
      recipient?: null,
      withdrawPercentage?: null
    ): LogRecipientAddedEventFilter;
    LogRecipientAdded(
      recipient?: null,
      withdrawPercentage?: null
    ): LogRecipientAddedEventFilter;

    "LogStartDateSet(address,uint256)"(
      setter?: null,
      startDate?: null
    ): LogStartDateSetEventFilter;
    LogStartDateSet(
      setter?: null,
      startDate?: null
    ): LogStartDateSetEventFilter;

    "LogTokensClaimed(address,uint256)"(
      recipient?: null,
      amount?: null
    ): LogTokensClaimedEventFilter;
    LogTokensClaimed(
      recipient?: null,
      amount?: null
    ): LogTokensClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addMultipleRecipients(
      _recipients: PromiseOrValue<string>[],
      _withdrawPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRecipient(
      _recipientAddress: PromiseOrValue<string>,
      _withdrawPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cumulativeAmountsToVest(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaim(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartDate(
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    totalPercentages(overrides?: CallOverrides): Promise<BigNumber>;

    totalRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMultipleRecipients(
      _recipients: PromiseOrValue<string>[],
      _withdrawPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRecipient(
      _recipientAddress: PromiseOrValue<string>,
      _withdrawPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeAmountsToVest(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipients(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartDate(
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPercentages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRecipients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
