/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PercentageCalculator,
  PercentageCalculatorInterface,
} from "../../contracts/PercentageCalculator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_percentage",
        type: "uint256",
      },
    ],
    name: "div",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61011461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063a391c15b146038575b600080fd5b604760433660046078565b6059565b60405190815260200160405180910390f35b6000620186a0606783856099565b606f919060bd565b90505b92915050565b60008060408385031215608a57600080fd5b50508035926020909101359150565b8082028115828204841417607257634e487b7160e01b600052601160045260246000fd5b60008260d957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bdcd80262a78b7eae33897853c4d9387b60577652186cc9417ff0b7471dd86fd64736f6c63430008110033";

type PercentageCalculatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PercentageCalculatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PercentageCalculator__factory extends ContractFactory {
  constructor(...args: PercentageCalculatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PercentageCalculator> {
    return super.deploy(overrides || {}) as Promise<PercentageCalculator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PercentageCalculator {
    return super.attach(address) as PercentageCalculator;
  }
  override connect(signer: Signer): PercentageCalculator__factory {
    return super.connect(signer) as PercentageCalculator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PercentageCalculatorInterface {
    return new utils.Interface(_abi) as PercentageCalculatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PercentageCalculator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PercentageCalculator;
  }
}
