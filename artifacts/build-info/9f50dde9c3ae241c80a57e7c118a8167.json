{"id":"9f50dde9c3ae241c80a57e7c118a8167","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/AccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/BatchTransfer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract BatchTransfer {\n\n     function sendTokens(address deployedTokenAddress, address[] memory addresses, uint256[] memory balances) public {\n            require(addresses.length == balances.length, \"The two arrays must be with the same length\");\n            IERC20 token = IERC20(deployedTokenAddress);\n            for(uint i = 0; i < addresses.length; i++) {\n                require(balances[i] <= token.balanceOf(msg.sender), \"Not enough balance\");\n                bool result = token.transferFrom(msg.sender, addresses[i], balances[i]);\n                require(result, \"The transfer was not successful\");\n            }\n    }\n}\n"},"contracts/PercentageCalculator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary PercentageCalculator {\n\n\t/*\n\tNote: Percentages will be provided in thousands to represent 3 digits after the decimal point.\n\tThe division is made by 100000\n\t*/\n\tfunction div(uint256 _amount, uint256 _percentage) public pure returns(uint256) {\n\t\treturn _amount * _percentage / 100000;\n\t}\n}\n"},"contracts/token/AllianceBlockToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract AllianceBlockToken is ERC20PresetMinterPauser {\n     constructor() ERC20PresetMinterPauser(\"AllianceBlock Token\", \"ALBT\") {}\n\n     function removeMinterRole(address owner) public {\n          revokeRole(MINTER_ROLE, owner);\n     }\n}\n"},"contracts/Vesting.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./PercentageCalculator.sol\";\n\ncontract Vesting is Ownable {\n    uint256 public startDate;\n    uint256 internal constant periodLength = 30 days;\n    uint256[35] public cumulativeAmountsToVest;\n    uint256 public totalPercentages;\n    IERC20 internal token;\n\n    struct Recipient {\n        uint256 withdrawnAmount;\n        uint256 withdrawPercentage;\n    }\n\n    uint256 public totalRecipients;\n    mapping(address => Recipient) public recipients;\n\n    event LogStartDateSet(address setter, uint256 startDate);\n    event LogRecipientAdded(address recipient, uint256 withdrawPercentage);\n    event LogTokensClaimed(address recipient, uint256 amount);\n\n    /*\n     * Note: Percentages will be provided in thousands to represent 3 digits after the decimal point.\n     * Ex. 10% = 10000\n     */\n    modifier onlyValidPercentages(uint256 _percentage) {\n        require(\n            _percentage < 100000,\n            \"Provided percentage should be less than 100%\"\n        );\n        require(\n            _percentage > 0,\n            \"Provided percentage should be greater than 0\"\n        );\n        _;\n    }\n\n    /**\n     * @param _tokenAddress The address of the ALBT token\n     * @param _cumulativeAmountsToVest The cumulative amounts for each vesting period\n     */\n    constructor(\n        address _tokenAddress,\n        uint256[35] memory _cumulativeAmountsToVest\n    ) {\n        require(\n            _tokenAddress != address(0),\n            \"Token Address can't be zero address\"\n        );\n        token = IERC20(_tokenAddress);\n        cumulativeAmountsToVest = _cumulativeAmountsToVest;\n    }\n\n    /**\n     * @dev Function that sets the start date of the Vesting\n     * @param _startDate The start date of the veseting presented as a timestamp\n     */\n    function setStartDate(uint256 _startDate) public onlyOwner {\n        require(_startDate >= block.timestamp, \"Start Date can't be in the past\");\n\n        startDate = _startDate;\n        emit LogStartDateSet(address(msg.sender), _startDate);\n    }\n\n    /**\n     * @dev Function add recipient to the vesting contract\n     * @param _recipientAddress The address of the recipient\n     * @param _withdrawPercentage The percentage that the recipient should receive in each vesting period\n     */\n    function addRecipient(\n        address _recipientAddress,\n        uint256 _withdrawPercentage\n    ) public onlyOwner onlyValidPercentages(_withdrawPercentage) {\n        require(\n            _recipientAddress != address(0),\n            \"Recepient Address can't be zero address\"\n        );\n        totalPercentages = totalPercentages + _withdrawPercentage;\n        require(totalPercentages <= 100000, \"Total percentages exceeds 100%\");\n        totalRecipients++;\n\n        recipients[_recipientAddress] = Recipient(0, _withdrawPercentage);\n        emit LogRecipientAdded(_recipientAddress, _withdrawPercentage);\n    }\n\n    /**\n     * @dev Function add  multiple recipients to the vesting contract\n     * @param _recipients Array of recipient addresses. The arrya length should be less than 230, otherwise it will overflow the gas limit\n     * @param _withdrawPercentages Corresponding percentages of the recipients\n     */\n    function addMultipleRecipients(\n        address[] memory _recipients,\n        uint256[] memory _withdrawPercentages\n    ) public onlyOwner {\n        require(\n            _recipients.length < 230,\n            \"The recipients must be not more than 230\"\n        );\n        require(\n            _recipients.length == _withdrawPercentages.length,\n            \"The two arryas are with different length\"\n        );\n        for (uint256 i; i < _recipients.length; i++) {\n            addRecipient(_recipients[i], _withdrawPercentages[i]);\n        }\n    }\n\n    /**\n     * @dev Function that withdraws all available tokens for the current period\n     */\n    function claim() public {\n        require(startDate != 0, \"The vesting hasn't started\");\n        require(block.timestamp >= startDate, \"The vesting hasn't started\");\n\n        (uint256 owedAmount, uint256 calculatedAmount) = calculateAmounts();\n        recipients[msg.sender].withdrawnAmount = calculatedAmount;\n        bool result = token.transfer(msg.sender, owedAmount);\n        require(result, \"The claim was not successful\");\n        emit LogTokensClaimed(msg.sender, owedAmount);\n    }\n\n    /**\n     * @dev Function that returns the amount that the user can withdraw at the current period.\n     * @return _owedAmount The amount that the user can withdraw at the current period.\n     */\n    function hasClaim() public view returns (uint256 _owedAmount) {\n        if (block.timestamp <= startDate) {\n            return 0;\n        }\n\n        (uint256 owedAmount, ) = calculateAmounts();\n        return owedAmount;\n    }\n\n    function calculateAmounts()\n        internal\n        view\n        returns (uint256 _owedAmount, uint256 _calculatedAmount)\n    {\n        uint256 period = (block.timestamp - startDate) / (periodLength);\n        if (period >= cumulativeAmountsToVest.length) {\n            period = cumulativeAmountsToVest.length - 1;\n        }\n        uint256 calculatedAmount = PercentageCalculator.div(\n            cumulativeAmountsToVest[period],\n            recipients[msg.sender].withdrawPercentage\n        );\n        uint256 owedAmount = calculatedAmount -\n            recipients[msg.sender].withdrawnAmount;\n\n        return (owedAmount, calculatedAmount);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":800},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[315],"Context":[1688],"ERC165":[1887],"IAccessControl":[513],"IERC165":[1899],"Math":[2764],"Strings":[1863]},"id":316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":514,"src":"133:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":1689,"src":"164:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":1864,"src":"195:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":1888,"src":"226:43:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Context","nameLocations":["1841:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1688,"src":"1841:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"1841:7:0"},{"baseName":{"id":9,"name":"IAccessControl","nameLocations":["1850:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":513,"src":"1850:14:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1850:14:0"},{"baseName":{"id":11,"name":"ERC165","nameLocations":["1866:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":1887,"src":"1866:6:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1866:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"271:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":315,"linearizedBaseContracts":[315,1887,1899,513,1688],"name":"AccessControl","nameLocation":"1824:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":19,"members":[{"constant":false,"id":16,"mutability":"mutable","name":"members","nameLocation":"1930:7:0","nodeType":"VariableDeclaration","scope":19,"src":"1905:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":15,"keyType":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"1913:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1905:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":14,"name":"bool","nodeType":"ElementaryTypeName","src":"1924:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"adminRole","nameLocation":"1955:9:0","nodeType":"VariableDeclaration","scope":19,"src":"1947:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":17,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1947:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"1886:8:0","nodeType":"StructDefinition","scope":315,"src":"1879:92:0","visibility":"public"},{"constant":false,"id":24,"mutability":"mutable","name":"_roles","nameLocation":"2014:6:0","nodeType":"VariableDeclaration","scope":315,"src":"1977:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":23,"keyType":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1985:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1977:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueType":{"id":22,"nodeType":"UserDefinedTypeName","pathNode":{"id":21,"name":"RoleData","nameLocations":["1996:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"1996:8:0"},"referencedDeclaration":19,"src":"1996:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":27,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2051:18:0","nodeType":"VariableDeclaration","scope":315,"src":"2027:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2027:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":26,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2072:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":37,"nodeType":"Block","src":"2495:44:0","statements":[{"expression":{"arguments":[{"id":33,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2516:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":32,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":92,"src":"2505:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2505:16:0"},{"id":36,"nodeType":"PlaceholderStatement","src":"2531:1:0"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"2083:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":38,"name":"onlyRole","nameLocation":"2472:8:0","nodeType":"ModifierDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"role","nameLocation":"2489:4:0","nodeType":"VariableDeclaration","scope":38,"src":"2481:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2481:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2480:14:0"},"src":"2463:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[1886],"body":{"id":59,"nodeType":"Block","src":"2697:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2714:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":49,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"2734:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$513_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$513_$","typeString":"type(contract IAccessControl)"}],"id":48,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2729:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2729:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$513","typeString":"type(contract IAccessControl)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2750:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2729:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2714:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":55,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2789:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":53,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2765:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$315_$","typeString":"type(contract super AccessControl)"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2771:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1886,"src":"2765:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2714:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":46,"id":58,"nodeType":"Return","src":"2707:94:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"2545:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":60,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2615:17:0","nodeType":"FunctionDefinition","overrides":{"id":43,"nodeType":"OverrideSpecifier","overrides":[],"src":"2673:8:0"},"parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"interfaceId","nameLocation":"2640:11:0","nodeType":"VariableDeclaration","scope":60,"src":"2633:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2633:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2632:20:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":60,"src":"2691:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"2691:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2690:6:0"},"scope":315,"src":"2606:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[480],"body":{"id":78,"nodeType":"Block","src":"2987:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":71,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":73,"indexExpression":{"id":72,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3011:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3004:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3017:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"3004:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":76,"indexExpression":{"id":75,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3025:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3004:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":70,"id":77,"nodeType":"Return","src":"2997:36:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"2814:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2904:7:0","nodeType":"FunctionDefinition","overrides":{"id":67,"nodeType":"OverrideSpecifier","overrides":[],"src":"2963:8:0"},"parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"role","nameLocation":"2920:4:0","nodeType":"VariableDeclaration","scope":79,"src":"2912:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2912:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"account","nameLocation":"2934:7:0","nodeType":"VariableDeclaration","scope":79,"src":"2926:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"2926:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2911:31:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":79,"src":"2981:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":68,"name":"bool","nodeType":"ElementaryTypeName","src":"2981:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2980:6:0"},"scope":315,"src":"2895:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":91,"nodeType":"Block","src":"3390:47:0","statements":[{"expression":{"arguments":[{"id":86,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"3411:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3417:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3417:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":85,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":131,"src":"3400:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3400:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":90,"nodeType":"ExpressionStatement","src":"3400:30:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"3046:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":92,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3343:10:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"role","nameLocation":"3362:4:0","nodeType":"VariableDeclaration","scope":92,"src":"3354:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":81,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3354:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3353:14:0"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"3390:0:0"},"scope":315,"src":"3334:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":130,"nodeType":"Block","src":"3791:406:0","statements":[{"condition":{"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3805:23:0","subExpression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"3814:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":102,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3820:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"3806:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"3801:390:0","trueBody":{"id":128,"nodeType":"Block","src":"3830:361:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3938:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":113,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"4009:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":111,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"3989:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1863_$","typeString":"type(library Strings)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3997:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1862,"src":"3989:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3989:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4043:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":120,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4116:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4108:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4108:7:0","typeDescriptions":{}}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4108:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4123:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":116,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"4088:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1863_$","typeString":"type(library Strings)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1842,"src":"4088:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4088:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":108,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3896:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3900:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"3896:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:252:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3868:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":106,"name":"string","nodeType":"ElementaryTypeName","src":"3868:6:0","typeDescriptions":{}}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3868:298:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":105,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3844:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3844:336:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"3844:336:0"}]}}]},"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"3443:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":131,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3727:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"role","nameLocation":"3746:4:0","nodeType":"VariableDeclaration","scope":131,"src":"3738:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":94,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3738:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"account","nameLocation":"3760:7:0","nodeType":"VariableDeclaration","scope":131,"src":"3752:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"3752:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3737:31:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3791:0:0"},"scope":315,"src":"3718:479:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[488],"body":{"id":145,"nodeType":"Block","src":"4461:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":140,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"4478:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":142,"indexExpression":{"id":141,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4485:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4478:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4491:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"4478:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":139,"id":144,"nodeType":"Return","src":"4471:29:0"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"4203:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":146,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4387:12:0","nodeType":"FunctionDefinition","overrides":{"id":136,"nodeType":"OverrideSpecifier","overrides":[],"src":"4434:8:0"},"parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"role","nameLocation":"4408:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4400:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4400:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4399:14:0"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":146,"src":"4452:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4451:9:0"},"scope":315,"src":"4378:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[496],"body":{"id":165,"nodeType":"Block","src":"4906:42:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4927:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"4933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4916:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4916:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":164,"nodeType":"ExpressionStatement","src":"4916:25:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4513:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4899:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"4886:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4886:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4877:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"4877:8:0"},"nodeType":"ModifierInvocation","src":"4877:28:0"}],"name":"grantRole","nameLocation":"4812:9:0","nodeType":"FunctionDefinition","overrides":{"id":153,"nodeType":"OverrideSpecifier","overrides":[],"src":"4868:8:0"},"parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4830:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4822:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4822:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"account","nameLocation":"4844:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4836:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4821:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4906:0:0"},"scope":315,"src":"4803:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[504],"body":{"id":185,"nodeType":"Block","src":"5332:43:0","statements":[{"expression":{"arguments":[{"id":181,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5354:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5360:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":180,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5342:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"ExpressionStatement","src":"5342:26:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4954:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":186,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5325:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5312:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5312:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":178,"kind":"modifierInvocation","modifierName":{"id":174,"name":"onlyRole","nameLocations":["5303:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"5303:8:0"},"nodeType":"ModifierInvocation","src":"5303:28:0"}],"name":"revokeRole","nameLocation":"5237:10:0","nodeType":"FunctionDefinition","overrides":{"id":173,"nodeType":"OverrideSpecifier","overrides":[],"src":"5294:8:0"},"parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5256:4:0","nodeType":"VariableDeclaration","scope":186,"src":"5248:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5248:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"account","nameLocation":"5270:7:0","nodeType":"VariableDeclaration","scope":186,"src":"5262:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5262:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5247:31:0"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"5332:0:0"},"scope":315,"src":"5228:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[512],"body":{"id":208,"nodeType":"Block","src":"5989:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":196,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6007:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":197,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"6018:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6018:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6007:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6032:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5999:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5999:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":202,"nodeType":"ExpressionStatement","src":"5999:83:0"},{"expression":{"arguments":[{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"6105:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":205,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6111:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":203,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"6093:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6093:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"6093:26:0"}]},"documentation":{"id":187,"nodeType":"StructuredDocumentation","src":"5381:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5921:12:0","nodeType":"FunctionDefinition","overrides":{"id":193,"nodeType":"OverrideSpecifier","overrides":[],"src":"5980:8:0"},"parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"role","nameLocation":"5942:4:0","nodeType":"VariableDeclaration","scope":209,"src":"5934:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5934:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"account","nameLocation":"5956:7:0","nodeType":"VariableDeclaration","scope":209,"src":"5948:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"5948:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5933:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5989:0:0"},"scope":315,"src":"5912:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":222,"nodeType":"Block","src":"6879:42:0","statements":[{"expression":{"arguments":[{"id":218,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"6900:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":219,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6906:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":217,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"6889:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6889:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"6889:25:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"6132:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6820:10:0","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"role","nameLocation":"6839:4:0","nodeType":"VariableDeclaration","scope":223,"src":"6831:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6831:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"account","nameLocation":"6853:7:0","nodeType":"VariableDeclaration","scope":223,"src":"6845:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"6845:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6830:31:0"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"6879:0:0"},"scope":315,"src":"6811:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":250,"nodeType":"Block","src":"7119:174:0","statements":[{"assignments":[232],"declarations":[{"constant":false,"id":232,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7137:17:0","nodeType":"VariableDeclaration","scope":250,"src":"7129:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7129:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":236,"initialValue":{"arguments":[{"id":234,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7170:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":233,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"7157:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7129:46:0"},{"expression":{"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":237,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7185:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":239,"indexExpression":{"id":238,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7192:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7185:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7198:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"7185:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":241,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7210:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7185:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":243,"nodeType":"ExpressionStatement","src":"7185:34:0"},{"eventCall":{"arguments":[{"id":245,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7251:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":246,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"7257:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":247,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7276:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":244,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"7234:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7234:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":249,"nodeType":"EmitStatement","src":"7229:57:0"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"6927:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":251,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7055:13:0","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"role","nameLocation":"7077:4:0","nodeType":"VariableDeclaration","scope":251,"src":"7069:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7069:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"adminRole","nameLocation":"7091:9:0","nodeType":"VariableDeclaration","scope":251,"src":"7083:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7083:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7068:33:0"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[],"src":"7119:0:0"},"scope":315,"src":"7046:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":282,"nodeType":"Block","src":"7529:165:0","statements":[{"condition":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7543:23:0","subExpression":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7552:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7558:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":259,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7544:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":281,"nodeType":"IfStatement","src":"7539:149:0","trueBody":{"id":280,"nodeType":"Block","src":"7568:120:0","statements":[{"expression":{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":264,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7582:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":266,"indexExpression":{"id":265,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7589:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7582:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7595:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7582:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":269,"indexExpression":{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7603:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7582:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7614:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7582:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":272,"nodeType":"ExpressionStatement","src":"7582:36:0"},{"eventCall":{"arguments":[{"id":274,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7649:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":275,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7655:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":276,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"7664:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7664:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":273,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"7637:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7637:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":279,"nodeType":"EmitStatement","src":"7632:45:0"}]}}]},"documentation":{"id":252,"nodeType":"StructuredDocumentation","src":"7299:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7470:10:0","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"role","nameLocation":"7489:4:0","nodeType":"VariableDeclaration","scope":283,"src":"7481:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7481:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"account","nameLocation":"7503:7:0","nodeType":"VariableDeclaration","scope":283,"src":"7495:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"7495:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7480:31:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"7529:0:0"},"scope":315,"src":"7461:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"7934:165:0","statements":[{"condition":{"arguments":[{"id":292,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"7956:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":293,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"7962:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":291,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7948:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7948:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":312,"nodeType":"IfStatement","src":"7944:149:0","trueBody":{"id":311,"nodeType":"Block","src":"7972:121:0","statements":[{"expression":{"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":295,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7986:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":297,"indexExpression":{"id":296,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"7993:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7986:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7999:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7986:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":300,"indexExpression":{"id":299,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8007:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7986:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8018:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7986:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":303,"nodeType":"ExpressionStatement","src":"7986:37:0"},{"eventCall":{"arguments":[{"id":305,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8054:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":306,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":307,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"8069:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8069:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":304,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"8042:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8042:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"EmitStatement","src":"8037:45:0"}]}}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"7700:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7874:11:0","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"role","nameLocation":"7894:4:0","nodeType":"VariableDeclaration","scope":314,"src":"7886:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7886:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"account","nameLocation":"7908:7:0","nodeType":"VariableDeclaration","scope":314,"src":"7900:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"7900:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7885:31:0"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"7934:0:0"},"scope":315,"src":"7865:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":316,"src":"1806:6295:0","usedErrors":[]}],"src":"108:7994:0"},"id":0},"@openzeppelin/contracts/access/AccessControlEnumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControlEnumerable.sol","exportedSymbols":{"AccessControl":[315],"AccessControlEnumerable":[440],"Context":[1688],"ERC165":[1887],"EnumerableSet":[3377],"IAccessControl":[513],"IAccessControlEnumerable":[538],"IERC165":[1899],"Math":[2764],"Strings":[1863]},"id":441,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":317,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:1"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControlEnumerable.sol","file":"./IAccessControlEnumerable.sol","id":318,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":441,"sourceUnit":539,"src":"143:40:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"./AccessControl.sol","id":319,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":441,"sourceUnit":316,"src":"184:29:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"../utils/structs/EnumerableSet.sol","id":320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":441,"sourceUnit":3378,"src":"214:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":322,"name":"IAccessControlEnumerable","nameLocations":["400:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":538,"src":"400:24:1"},"id":323,"nodeType":"InheritanceSpecifier","src":"400:24:1"},{"baseName":{"id":324,"name":"AccessControl","nameLocations":["426:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"426:13:1"},"id":325,"nodeType":"InheritanceSpecifier","src":"426:13:1"}],"canonicalName":"AccessControlEnumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"260:94:1","text":" @dev Extension of {AccessControl} that allows enumerating the members of each role."},"fullyImplemented":true,"id":440,"linearizedBaseContracts":[440,315,1887,1899,538,513,1688],"name":"AccessControlEnumerable","nameLocation":"373:23:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":329,"libraryName":{"id":326,"name":"EnumerableSet","nameLocations":["452:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":3377,"src":"452:13:1"},"nodeType":"UsingForDirective","src":"446:49:1","typeName":{"id":328,"nodeType":"UserDefinedTypeName","pathNode":{"id":327,"name":"EnumerableSet.AddressSet","nameLocations":["470:13:1","484:10:1"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"470:24:1"},"referencedDeclaration":3090,"src":"470:24:1","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"constant":false,"id":334,"mutability":"mutable","name":"_roleMembers","nameLocation":"554:12:1","nodeType":"VariableDeclaration","scope":440,"src":"501:65:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3090_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"typeName":{"id":333,"keyType":{"id":330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"509:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"501:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3090_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"valueType":{"id":332,"nodeType":"UserDefinedTypeName","pathNode":{"id":331,"name":"EnumerableSet.AddressSet","nameLocations":["520:13:1","534:10:1"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"520:24:1"},"referencedDeclaration":3090,"src":"520:24:1","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"private"},{"baseFunctions":[60],"body":{"id":355,"nodeType":"Block","src":"725:121:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":343,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"742:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":345,"name":"IAccessControlEnumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"762:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$538_$","typeString":"type(contract IAccessControlEnumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$538_$","typeString":"type(contract IAccessControlEnumerable)"}],"id":344,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"757:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"757:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlEnumerable_$538","typeString":"type(contract IAccessControlEnumerable)"}},"id":347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"788:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"757:42:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"742:57:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":351,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"827:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":349,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"803:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$440_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"809:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":60,"src":"803:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"803:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"742:97:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":342,"id":354,"nodeType":"Return","src":"735:104:1"}]},"documentation":{"id":335,"nodeType":"StructuredDocumentation","src":"573:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":356,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"643:17:1","nodeType":"FunctionDefinition","overrides":{"id":339,"nodeType":"OverrideSpecifier","overrides":[],"src":"701:8:1"},"parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"interfaceId","nameLocation":"668:11:1","nodeType":"VariableDeclaration","scope":356,"src":"661:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":336,"name":"bytes4","nodeType":"ElementaryTypeName","src":"661:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"660:20:1"},"returnParameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":356,"src":"719:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":340,"name":"bool","nodeType":"ElementaryTypeName","src":"719:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"718:6:1"},"scope":440,"src":"634:212:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[529],"body":{"id":374,"nodeType":"Block","src":"1530:52:1","statements":[{"expression":{"arguments":[{"id":371,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"1569:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":367,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"1547:12:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3090_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":369,"indexExpression":{"id":368,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"1560:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1547:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1566:2:1","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":3213,"src":"1547:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3090_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$3090_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1547:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":366,"id":373,"nodeType":"Return","src":"1540:35:1"}]},"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"852:574:1","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":375,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"1440:13:1","nodeType":"FunctionDefinition","overrides":{"id":363,"nodeType":"OverrideSpecifier","overrides":[],"src":"1503:8:1"},"parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"role","nameLocation":"1462:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1454:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1454:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"mutability":"mutable","name":"index","nameLocation":"1476:5:1","nodeType":"VariableDeclaration","scope":375,"src":"1468:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":360,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1453:29:1"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1521:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"1521:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1520:9:1"},"scope":440,"src":"1431:151:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[537],"body":{"id":390,"nodeType":"Block","src":"1839:51:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":384,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"1856:12:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3090_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":386,"indexExpression":{"id":385,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1869:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1856:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":387,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1875:6:1","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":3186,"src":"1856:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3090_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$3090_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1856:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":383,"id":389,"nodeType":"Return","src":"1849:34:1"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1588:157:1","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":391,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1759:18:1","nodeType":"FunctionDefinition","overrides":{"id":380,"nodeType":"OverrideSpecifier","overrides":[],"src":"1812:8:1"},"parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1786:4:1","nodeType":"VariableDeclaration","scope":391,"src":"1778:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1778:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1777:14:1"},"returnParameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":391,"src":"1830:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1830:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1829:9:1"},"scope":440,"src":"1750:140:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[283],"body":{"id":414,"nodeType":"Block","src":"2055:89:1","statements":[{"expression":{"arguments":[{"id":403,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2082:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":404,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"2088:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":400,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2065:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$440_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2071:10:1","memberName":"_grantRole","nodeType":"MemberAccess","referencedDeclaration":283,"src":"2065:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2065:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":406,"nodeType":"ExpressionStatement","src":"2065:31:1"},{"expression":{"arguments":[{"id":411,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"2129:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":407,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"2106:12:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3090_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":409,"indexExpression":{"id":408,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2119:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2106:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2125:3:1","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3117,"src":"2106:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3090_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3090_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2106:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":413,"nodeType":"ExpressionStatement","src":"2106:31:1"}]},"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"1896:77:1","text":" @dev Overload {_grantRole} to track enumerable memberships"},"id":415,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"1987:10:1","nodeType":"FunctionDefinition","overrides":{"id":398,"nodeType":"OverrideSpecifier","overrides":[],"src":"2046:8:1"},"parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2006:4:1","nodeType":"VariableDeclaration","scope":415,"src":"1998:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1998:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2020:7:1","nodeType":"VariableDeclaration","scope":415,"src":"2012:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2012:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1997:31:1"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[],"src":"2055:0:1"},"scope":440,"src":"1978:166:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[314],"body":{"id":438,"nodeType":"Block","src":"2311:93:1","statements":[{"expression":{"arguments":[{"id":427,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"2339:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":428,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"2345:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":424,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2321:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$440_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2327:11:1","memberName":"_revokeRole","nodeType":"MemberAccess","referencedDeclaration":314,"src":"2321:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":430,"nodeType":"ExpressionStatement","src":"2321:32:1"},{"expression":{"arguments":[{"id":435,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"2389:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":431,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"2363:12:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3090_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":433,"indexExpression":{"id":432,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"2376:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2363:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2382:6:1","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":3144,"src":"2363:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3090_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3090_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2363:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":437,"nodeType":"ExpressionStatement","src":"2363:34:1"}]},"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"2150:78:1","text":" @dev Overload {_revokeRole} to track enumerable memberships"},"id":439,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"2242:11:1","nodeType":"FunctionDefinition","overrides":{"id":422,"nodeType":"OverrideSpecifier","overrides":[],"src":"2302:8:1"},"parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"role","nameLocation":"2262:4:1","nodeType":"VariableDeclaration","scope":439,"src":"2254:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2254:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"account","nameLocation":"2276:7:1","nodeType":"VariableDeclaration","scope":439,"src":"2268:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"2268:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2253:31:1"},"returnParameters":{"id":423,"nodeType":"ParameterList","parameters":[],"src":"2311:0:1"},"scope":440,"src":"2233:171:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":441,"src":"355:2051:1","usedErrors":[]}],"src":"118:2289:1"},"id":1},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[513]},"id":514,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":442,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":443,"nodeType":"StructuredDocumentation","src":"119:89:2","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":513,"linearizedBaseContracts":[513],"name":"IAccessControl","nameLocation":"219:14:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"240:292:2","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":452,"name":"RoleAdminChanged","nameLocation":"543:16:2","nodeType":"EventDefinition","parameters":{"id":451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:2","nodeType":"VariableDeclaration","scope":452,"src":"560:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":448,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:2","nodeType":"VariableDeclaration","scope":452,"src":"582:33:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":450,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:2","nodeType":"VariableDeclaration","scope":452,"src":"617:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:2"},"src":"537:110:2"},{"anonymous":false,"documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"653:212:2","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":461,"name":"RoleGranted","nameLocation":"876:11:2","nodeType":"EventDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:2","nodeType":"VariableDeclaration","scope":461,"src":"888:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":457,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:2","nodeType":"VariableDeclaration","scope":461,"src":"910:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":459,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:2","nodeType":"VariableDeclaration","scope":461,"src":"935:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:2"},"src":"870:89:2"},{"anonymous":false,"documentation":{"id":462,"nodeType":"StructuredDocumentation","src":"965:275:2","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":470,"name":"RoleRevoked","nameLocation":"1251:11:2","nodeType":"EventDefinition","parameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:2","nodeType":"VariableDeclaration","scope":470,"src":"1263:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":466,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:2","nodeType":"VariableDeclaration","scope":470,"src":"1285:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":468,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:2","nodeType":"VariableDeclaration","scope":470,"src":"1310:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:2"},"src":"1245:89:2"},{"documentation":{"id":471,"nodeType":"StructuredDocumentation","src":"1340:76:2","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":480,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:2","nodeType":"FunctionDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"role","nameLocation":"1446:4:2","nodeType":"VariableDeclaration","scope":480,"src":"1438:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"account","nameLocation":"1460:7:2","nodeType":"VariableDeclaration","scope":480,"src":"1452:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:2"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":480,"src":"1492:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":477,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:2"},"scope":513,"src":"1421:77:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"1504:184:2","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":488,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:2","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"role","nameLocation":"1723:4:2","nodeType":"VariableDeclaration","scope":488,"src":"1715:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:2"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":488,"src":"1752:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:2"},"scope":513,"src":"1693:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"1767:239:2","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:2","nodeType":"FunctionDefinition","parameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"role","nameLocation":"2038:4:2","nodeType":"VariableDeclaration","scope":496,"src":"2030:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"account","nameLocation":"2052:7:2","nodeType":"VariableDeclaration","scope":496,"src":"2044:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:2"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[],"src":"2069:0:2"},"scope":513,"src":"2011:59:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"2076:223:2","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:2","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"role","nameLocation":"2332:4:2","nodeType":"VariableDeclaration","scope":504,"src":"2324:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"account","nameLocation":"2346:7:2","nodeType":"VariableDeclaration","scope":504,"src":"2338:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:2"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"2363:0:2"},"scope":513,"src":"2304:60:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"2370:480:2","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":512,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:2","nodeType":"FunctionDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"role","nameLocation":"2885:4:2","nodeType":"VariableDeclaration","scope":512,"src":"2877:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"account","nameLocation":"2899:7:2","nodeType":"VariableDeclaration","scope":512,"src":"2891:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":508,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:2"},"returnParameters":{"id":511,"nodeType":"ParameterList","parameters":[],"src":"2916:0:2"},"scope":513,"src":"2855:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":514,"src":"209:2710:2","usedErrors":[]}],"src":"94:2826:2"},"id":2},"@openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControlEnumerable.sol","exportedSymbols":{"IAccessControl":[513],"IAccessControlEnumerable":[538]},"id":539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":515,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"104:23:3"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":516,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":539,"sourceUnit":514,"src":"129:30:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":518,"name":"IAccessControl","nameLocations":["299:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":513,"src":"299:14:3"},"id":519,"nodeType":"InheritanceSpecifier","src":"299:14:3"}],"canonicalName":"IAccessControlEnumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"161:99:3","text":" @dev External interface of AccessControlEnumerable declared to support ERC165 detection."},"fullyImplemented":false,"id":538,"linearizedBaseContracts":[538,513],"name":"IAccessControlEnumerable","nameLocation":"271:24:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"320:574:3","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":529,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"908:13:3","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"role","nameLocation":"930:4:3","nodeType":"VariableDeclaration","scope":529,"src":"922:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"922:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"index","nameLocation":"944:5:3","nodeType":"VariableDeclaration","scope":529,"src":"936:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint256","nodeType":"ElementaryTypeName","src":"936:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"921:29:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":529,"src":"974:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"974:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"973:9:3"},"scope":538,"src":"899:84:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":530,"nodeType":"StructuredDocumentation","src":"989:157:3","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":537,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1160:18:3","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"role","nameLocation":"1187:4:3","nodeType":"VariableDeclaration","scope":537,"src":"1179:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1179:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1178:14:3"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":537,"src":"1216:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":534,"name":"uint256","nodeType":"ElementaryTypeName","src":"1216:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1215:9:3"},"scope":538,"src":"1151:74:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":539,"src":"261:966:3","usedErrors":[]}],"src":"104:1124:3"},"id":3},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1688],"Ownable":[651]},"id":652,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":540,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":541,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":1689,"src":"127:30:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":543,"name":"Context","nameLocations":["683:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1688,"src":"683:7:4"},"id":544,"nodeType":"InheritanceSpecifier","src":"683:7:4"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":542,"nodeType":"StructuredDocumentation","src":"159:494:4","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":651,"linearizedBaseContracts":[651,1688],"name":"Ownable","nameLocation":"672:7:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":546,"mutability":"mutable","name":"_owner","nameLocation":"713:6:4","nodeType":"VariableDeclaration","scope":651,"src":"697:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":545,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":552,"name":"OwnershipTransferred","nameLocation":"732:20:4","nodeType":"EventDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:4","nodeType":"VariableDeclaration","scope":552,"src":"753:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":547,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":550,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:4","nodeType":"VariableDeclaration","scope":552,"src":"784:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":549,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:4"},"src":"726:84:4"},{"body":{"id":561,"nodeType":"Block","src":"926:49:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":557,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"955:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":556,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"936:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":560,"nodeType":"ExpressionStatement","src":"936:32:4"}]},"documentation":{"id":553,"nodeType":"StructuredDocumentation","src":"816:91:4","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":562,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":554,"nodeType":"ParameterList","parameters":[],"src":"923:2:4"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[],"src":"926:0:4"},"scope":651,"src":"912:63:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"1084:41:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":565,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"1094:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":567,"nodeType":"ExpressionStatement","src":"1094:13:4"},{"id":568,"nodeType":"PlaceholderStatement","src":"1117:1:4"}]},"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"981:77:4","text":" @dev Throws if called by any account other than the owner."},"id":570,"name":"onlyOwner","nameLocation":"1072:9:4","nodeType":"ModifierDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"1081:2:4"},"src":"1063:62:4","virtual":false,"visibility":"internal"},{"body":{"id":578,"nodeType":"Block","src":"1256:30:4","statements":[{"expression":{"id":576,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"1273:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":575,"id":577,"nodeType":"Return","src":"1266:13:4"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"1131:65:4","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":579,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:4","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"1215:2:4"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":579,"src":"1247:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:4"},"scope":651,"src":"1201:85:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":592,"nodeType":"Block","src":"1404:85:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":584,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"1422:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":586,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"1433:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":591,"nodeType":"ExpressionStatement","src":"1414:68:4"}]},"documentation":{"id":580,"nodeType":"StructuredDocumentation","src":"1292:62:4","text":" @dev Throws if the sender is not the owner."},"id":593,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:4","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[],"src":"1379:2:4"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"1404:0:4"},"scope":651,"src":"1359:130:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":606,"nodeType":"Block","src":"1885:47:4","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:4","typeDescriptions":{}}},"id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":599,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"1895:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"1895:30:4"}]},"documentation":{"id":594,"nodeType":"StructuredDocumentation","src":"1495:331:4","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":607,"implemented":true,"kind":"function","modifiers":[{"id":597,"kind":"modifierInvocation","modifierName":{"id":596,"name":"onlyOwner","nameLocations":["1875:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":570,"src":"1875:9:4"},"nodeType":"ModifierInvocation","src":"1875:9:4"}],"name":"renounceOwnership","nameLocation":"1840:17:4","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"1857:2:4"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[],"src":"1885:0:4"},"scope":651,"src":"1831:101:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":629,"nodeType":"Block","src":"2151:128:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2169:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:4","typeDescriptions":{}}},"id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":615,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":624,"nodeType":"ExpressionStatement","src":"2161:73:4"},{"expression":{"arguments":[{"id":626,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2263:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":625,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"2244:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":628,"nodeType":"ExpressionStatement","src":"2244:28:4"}]},"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"1938:138:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":630,"implemented":true,"kind":"function","modifiers":[{"id":613,"kind":"modifierInvocation","modifierName":{"id":612,"name":"onlyOwner","nameLocations":["2141:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":570,"src":"2141:9:4"},"nodeType":"ModifierInvocation","src":"2141:9:4"}],"name":"transferOwnership","nameLocation":"2090:17:4","nodeType":"FunctionDefinition","parameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:4","nodeType":"VariableDeclaration","scope":630,"src":"2108:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:4"},"returnParameters":{"id":614,"nodeType":"ParameterList","parameters":[],"src":"2151:0:4"},"scope":651,"src":"2081:198:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":649,"nodeType":"Block","src":"2496:124:4","statements":[{"assignments":[637],"declarations":[{"constant":false,"id":637,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:4","nodeType":"VariableDeclaration","scope":649,"src":"2506:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":639,"initialValue":{"id":638,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"2525:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:4"},{"expression":{"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":640,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"2541:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":641,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2550:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":643,"nodeType":"ExpressionStatement","src":"2541:17:4"},{"eventCall":{"arguments":[{"id":645,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"2594:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":646,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2604:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":644,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"2573:20:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":648,"nodeType":"EmitStatement","src":"2568:45:4"}]},"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"2285:143:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":650,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:4","nodeType":"FunctionDefinition","parameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:4","nodeType":"VariableDeclaration","scope":650,"src":"2461:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:4"},"returnParameters":{"id":635,"nodeType":"ParameterList","parameters":[],"src":"2496:0:4"},"scope":651,"src":"2433:187:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":652,"src":"654:1968:4","usedErrors":[]}],"src":"102:2521:4"},"id":4},"@openzeppelin/contracts/security/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","exportedSymbols":{"Context":[1688],"Pausable":[759]},"id":760,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":653,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":654,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":760,"sourceUnit":1689,"src":"130:30:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":656,"name":"Context","nameLocations":["632:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1688,"src":"632:7:5"},"id":657,"nodeType":"InheritanceSpecifier","src":"632:7:5"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"162:439:5","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":759,"linearizedBaseContracts":[759,1688],"name":"Pausable","nameLocation":"620:8:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":658,"nodeType":"StructuredDocumentation","src":"646:73:5","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":662,"name":"Paused","nameLocation":"730:6:5","nodeType":"EventDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"745:7:5","nodeType":"VariableDeclaration","scope":662,"src":"737:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":659,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"736:17:5"},"src":"724:30:5"},{"anonymous":false,"documentation":{"id":663,"nodeType":"StructuredDocumentation","src":"760:70:5","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":667,"name":"Unpaused","nameLocation":"841:8:5","nodeType":"EventDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"858:7:5","nodeType":"VariableDeclaration","scope":667,"src":"850:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"850:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"849:17:5"},"src":"835:32:5"},{"constant":false,"id":669,"mutability":"mutable","name":"_paused","nameLocation":"886:7:5","nodeType":"VariableDeclaration","scope":759,"src":"873:20:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":668,"name":"bool","nodeType":"ElementaryTypeName","src":"873:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":677,"nodeType":"Block","src":"986:32:5","statements":[{"expression":{"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":673,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"996:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1006:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"996:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":676,"nodeType":"ExpressionStatement","src":"996:15:5"}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"900:67:5","text":" @dev Initializes the contract in unpaused state."},"id":678,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"983:2:5"},"returnParameters":{"id":672,"nodeType":"ParameterList","parameters":[],"src":"986:0:5"},"scope":759,"src":"972:46:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":685,"nodeType":"Block","src":"1229:47:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":681,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"1239:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1239:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"ExpressionStatement","src":"1239:19:5"},{"id":684,"nodeType":"PlaceholderStatement","src":"1268:1:5"}]},"documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"1024:175:5","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":686,"name":"whenNotPaused","nameLocation":"1213:13:5","nodeType":"ModifierDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[],"src":"1226:2:5"},"src":"1204:72:5","virtual":false,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"1476:44:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":689,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"1486:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":691,"nodeType":"ExpressionStatement","src":"1486:16:5"},{"id":692,"nodeType":"PlaceholderStatement","src":"1512:1:5"}]},"documentation":{"id":687,"nodeType":"StructuredDocumentation","src":"1282:167:5","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":694,"name":"whenPaused","nameLocation":"1463:10:5","nodeType":"ModifierDefinition","parameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"1473:2:5"},"src":"1454:66:5","virtual":false,"visibility":"internal"},{"body":{"id":702,"nodeType":"Block","src":"1668:31:5","statements":[{"expression":{"id":700,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"1685:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":699,"id":701,"nodeType":"Return","src":"1678:14:5"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"1526:84:5","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":703,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1624:6:5","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[],"src":"1630:2:5"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":703,"src":"1662:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":697,"name":"bool","nodeType":"ElementaryTypeName","src":"1662:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1661:6:5"},"scope":759,"src":"1615:84:5","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":714,"nodeType":"Block","src":"1818:55:5","statements":[{"expression":{"arguments":[{"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1836:9:5","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":708,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"1837:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1847:18:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1828:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:38:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":713,"nodeType":"ExpressionStatement","src":"1828:38:5"}]},"documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"1705:57:5","text":" @dev Throws if the contract is paused."},"id":715,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1776:17:5","nodeType":"FunctionDefinition","parameters":{"id":705,"nodeType":"ParameterList","parameters":[],"src":"1793:2:5"},"returnParameters":{"id":706,"nodeType":"ParameterList","parameters":[],"src":"1818:0:5"},"scope":759,"src":"1767:106:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":725,"nodeType":"Block","src":"1993:58:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":720,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"2011:6:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2021:22:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":719,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2003:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2003:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":724,"nodeType":"ExpressionStatement","src":"2003:41:5"}]},"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"1879:61:5","text":" @dev Throws if the contract is not paused."},"id":726,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"1954:14:5","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"1968:2:5"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"1993:0:5"},"scope":759,"src":"1945:106:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":741,"nodeType":"Block","src":"2235:66:5","statements":[{"expression":{"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":732,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"2245:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2255:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2245:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":735,"nodeType":"ExpressionStatement","src":"2245:14:5"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":737,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2281:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":736,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"2274:6:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":740,"nodeType":"EmitStatement","src":"2269:25:5"}]},"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"2057:124:5","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":742,"implemented":true,"kind":"function","modifiers":[{"id":730,"kind":"modifierInvocation","modifierName":{"id":729,"name":"whenNotPaused","nameLocations":["2221:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":686,"src":"2221:13:5"},"nodeType":"ModifierInvocation","src":"2221:13:5"}],"name":"_pause","nameLocation":"2195:6:5","nodeType":"FunctionDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"2201:2:5"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2235:0:5"},"scope":759,"src":"2186:115:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":757,"nodeType":"Block","src":"2481:69:5","statements":[{"expression":{"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":748,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"2491:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2501:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2491:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"ExpressionStatement","src":"2491:15:5"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":753,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2530:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2530:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":752,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"2521:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2521:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":756,"nodeType":"EmitStatement","src":"2516:27:5"}]},"documentation":{"id":743,"nodeType":"StructuredDocumentation","src":"2307:121:5","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":758,"implemented":true,"kind":"function","modifiers":[{"id":746,"kind":"modifierInvocation","modifierName":{"id":745,"name":"whenPaused","nameLocations":["2470:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":694,"src":"2470:10:5"},"nodeType":"ModifierInvocation","src":"2470:10:5"}],"name":"_unpause","nameLocation":"2442:8:5","nodeType":"FunctionDefinition","parameters":{"id":744,"nodeType":"ParameterList","parameters":[],"src":"2450:2:5"},"returnParameters":{"id":747,"nodeType":"ParameterList","parameters":[],"src":"2481:0:5"},"scope":759,"src":"2433:117:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":760,"src":"602:1950:5","usedErrors":[]}],"src":"105:2448:5"},"id":5},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1688],"ERC20":[1346],"IERC20":[1424],"IERC20Metadata":[1530]},"id":1347,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":761,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":762,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1425,"src":"130:22:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":763,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1531,"src":"153:41:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":764,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1689,"src":"195:33:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":766,"name":"Context","nameLocations":["1419:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1688,"src":"1419:7:6"},"id":767,"nodeType":"InheritanceSpecifier","src":"1419:7:6"},{"baseName":{"id":768,"name":"IERC20","nameLocations":["1428:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1424,"src":"1428:6:6"},"id":769,"nodeType":"InheritanceSpecifier","src":"1428:6:6"},{"baseName":{"id":770,"name":"IERC20Metadata","nameLocations":["1436:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":1530,"src":"1436:14:6"},"id":771,"nodeType":"InheritanceSpecifier","src":"1436:14:6"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":765,"nodeType":"StructuredDocumentation","src":"230:1170:6","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1346,"linearizedBaseContracts":[1346,1530,1424,1688],"name":"ERC20","nameLocation":"1410:5:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":775,"mutability":"mutable","name":"_balances","nameLocation":"1493:9:6","nodeType":"VariableDeclaration","scope":1346,"src":"1457:45:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":774,"keyType":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1457:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":781,"mutability":"mutable","name":"_allowances","nameLocation":"1565:11:6","nodeType":"VariableDeclaration","scope":1346,"src":"1509:67:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":780,"keyType":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1509:47:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":779,"keyType":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1528:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":783,"mutability":"mutable","name":"_totalSupply","nameLocation":"1599:12:6","nodeType":"VariableDeclaration","scope":1346,"src":"1583:28:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":782,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":785,"mutability":"mutable","name":"_name","nameLocation":"1633:5:6","nodeType":"VariableDeclaration","scope":1346,"src":"1618:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":784,"name":"string","nodeType":"ElementaryTypeName","src":"1618:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":787,"mutability":"mutable","name":"_symbol","nameLocation":"1659:7:6","nodeType":"VariableDeclaration","scope":1346,"src":"1644:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":786,"name":"string","nodeType":"ElementaryTypeName","src":"1644:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":803,"nodeType":"Block","src":"2032:57:6","statements":[{"expression":{"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":795,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"2042:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":796,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"2050:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2042:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":798,"nodeType":"ExpressionStatement","src":"2042:13:6"},{"expression":{"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":799,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2065:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":800,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"2075:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2065:17:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":802,"nodeType":"ExpressionStatement","src":"2065:17:6"}]},"documentation":{"id":788,"nodeType":"StructuredDocumentation","src":"1673:298:6","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":804,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"name_","nameLocation":"2002:5:6","nodeType":"VariableDeclaration","scope":804,"src":"1988:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":789,"name":"string","nodeType":"ElementaryTypeName","src":"1988:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"symbol_","nameLocation":"2023:7:6","nodeType":"VariableDeclaration","scope":804,"src":"2009:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":791,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1987:44:6"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"2032:0:6"},"scope":1346,"src":"1976:113:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1517],"body":{"id":813,"nodeType":"Block","src":"2223:29:6","statements":[{"expression":{"id":811,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"2240:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":810,"id":812,"nodeType":"Return","src":"2233:12:6"}]},"documentation":{"id":805,"nodeType":"StructuredDocumentation","src":"2095:54:6","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":814,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2163:4:6","nodeType":"FunctionDefinition","overrides":{"id":807,"nodeType":"OverrideSpecifier","overrides":[],"src":"2190:8:6"},"parameters":{"id":806,"nodeType":"ParameterList","parameters":[],"src":"2167:2:6"},"returnParameters":{"id":810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":814,"src":"2208:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":808,"name":"string","nodeType":"ElementaryTypeName","src":"2208:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2207:15:6"},"scope":1346,"src":"2154:98:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1523],"body":{"id":823,"nodeType":"Block","src":"2436:31:6","statements":[{"expression":{"id":821,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2453:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":820,"id":822,"nodeType":"Return","src":"2446:14:6"}]},"documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"2258:102:6","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":824,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2374:6:6","nodeType":"FunctionDefinition","overrides":{"id":817,"nodeType":"OverrideSpecifier","overrides":[],"src":"2403:8:6"},"parameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"2380:2:6"},"returnParameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":824,"src":"2421:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":818,"name":"string","nodeType":"ElementaryTypeName","src":"2421:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2420:15:6"},"scope":1346,"src":"2365:102:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1529],"body":{"id":833,"nodeType":"Block","src":"3156:26:6","statements":[{"expression":{"hexValue":"3138","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3173:2:6","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":830,"id":832,"nodeType":"Return","src":"3166:9:6"}]},"documentation":{"id":825,"nodeType":"StructuredDocumentation","src":"2473:613:6","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":834,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3100:8:6","nodeType":"FunctionDefinition","overrides":{"id":827,"nodeType":"OverrideSpecifier","overrides":[],"src":"3131:8:6"},"parameters":{"id":826,"nodeType":"ParameterList","parameters":[],"src":"3108:2:6"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":834,"src":"3149:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":828,"name":"uint8","nodeType":"ElementaryTypeName","src":"3149:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3148:7:6"},"scope":1346,"src":"3091:91:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1373],"body":{"id":843,"nodeType":"Block","src":"3312:36:6","statements":[{"expression":{"id":841,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"3329:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":840,"id":842,"nodeType":"Return","src":"3322:19:6"}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"3188:49:6","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":844,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3251:11:6","nodeType":"FunctionDefinition","overrides":{"id":837,"nodeType":"OverrideSpecifier","overrides":[],"src":"3285:8:6"},"parameters":{"id":836,"nodeType":"ParameterList","parameters":[],"src":"3262:2:6"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":844,"src":"3303:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"3303:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3302:9:6"},"scope":1346,"src":"3242:106:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1381],"body":{"id":857,"nodeType":"Block","src":"3489:42:6","statements":[{"expression":{"baseExpression":{"id":853,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3506:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":855,"indexExpression":{"id":854,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3516:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3506:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":852,"id":856,"nodeType":"Return","src":"3499:25:6"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"3354:47:6","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":858,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3415:9:6","nodeType":"FunctionDefinition","overrides":{"id":849,"nodeType":"OverrideSpecifier","overrides":[],"src":"3462:8:6"},"parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"account","nameLocation":"3433:7:6","nodeType":"VariableDeclaration","scope":858,"src":"3425:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"3425:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3424:17:6"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":858,"src":"3480:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3479:9:6"},"scope":1346,"src":"3406:125:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1391],"body":{"id":882,"nodeType":"Block","src":"3812:104:6","statements":[{"assignments":[870],"declarations":[{"constant":false,"id":870,"mutability":"mutable","name":"owner","nameLocation":"3830:5:6","nodeType":"VariableDeclaration","scope":882,"src":"3822:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":869,"name":"address","nodeType":"ElementaryTypeName","src":"3822:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":873,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":871,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3838:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3838:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3822:28:6"},{"expression":{"arguments":[{"id":875,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"3870:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"3877:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"3881:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":874,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"3860:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":879,"nodeType":"ExpressionStatement","src":"3860:28:6"},{"expression":{"hexValue":"74727565","id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3905:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":868,"id":881,"nodeType":"Return","src":"3898:11:6"}]},"documentation":{"id":859,"nodeType":"StructuredDocumentation","src":"3537:185:6","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":883,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3736:8:6","nodeType":"FunctionDefinition","overrides":{"id":865,"nodeType":"OverrideSpecifier","overrides":[],"src":"3788:8:6"},"parameters":{"id":864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"to","nameLocation":"3753:2:6","nodeType":"VariableDeclaration","scope":883,"src":"3745:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":860,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":863,"mutability":"mutable","name":"amount","nameLocation":"3765:6:6","nodeType":"VariableDeclaration","scope":883,"src":"3757:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":862,"name":"uint256","nodeType":"ElementaryTypeName","src":"3757:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3744:28:6"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":883,"src":"3806:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":866,"name":"bool","nodeType":"ElementaryTypeName","src":"3806:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3805:6:6"},"scope":1346,"src":"3727:189:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1401],"body":{"id":900,"nodeType":"Block","src":"4072:51:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":894,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"4089:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":896,"indexExpression":{"id":895,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"4101:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":898,"indexExpression":{"id":897,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"4108:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":893,"id":899,"nodeType":"Return","src":"4082:34:6"}]},"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"3922:47:6","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":901,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3983:9:6","nodeType":"FunctionDefinition","overrides":{"id":890,"nodeType":"OverrideSpecifier","overrides":[],"src":"4045:8:6"},"parameters":{"id":889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"owner","nameLocation":"4001:5:6","nodeType":"VariableDeclaration","scope":901,"src":"3993:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":885,"name":"address","nodeType":"ElementaryTypeName","src":"3993:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":888,"mutability":"mutable","name":"spender","nameLocation":"4016:7:6","nodeType":"VariableDeclaration","scope":901,"src":"4008:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3992:32:6"},"returnParameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":901,"src":"4063:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"4063:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4062:9:6"},"scope":1346,"src":"3974:149:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1411],"body":{"id":925,"nodeType":"Block","src":"4520:108:6","statements":[{"assignments":[913],"declarations":[{"constant":false,"id":913,"mutability":"mutable","name":"owner","nameLocation":"4538:5:6","nodeType":"VariableDeclaration","scope":925,"src":"4530:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":912,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":916,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":914,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"4546:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4546:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4530:28:6"},{"expression":{"arguments":[{"id":918,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"4577:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":919,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"4584:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":920,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"4593:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":917,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"4568:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":922,"nodeType":"ExpressionStatement","src":"4568:32:6"},{"expression":{"hexValue":"74727565","id":923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4617:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":911,"id":924,"nodeType":"Return","src":"4610:11:6"}]},"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"4129:297:6","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":926,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4440:7:6","nodeType":"FunctionDefinition","overrides":{"id":908,"nodeType":"OverrideSpecifier","overrides":[],"src":"4496:8:6"},"parameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":904,"mutability":"mutable","name":"spender","nameLocation":"4456:7:6","nodeType":"VariableDeclaration","scope":926,"src":"4448:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":903,"name":"address","nodeType":"ElementaryTypeName","src":"4448:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":906,"mutability":"mutable","name":"amount","nameLocation":"4473:6:6","nodeType":"VariableDeclaration","scope":926,"src":"4465:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"4465:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:33:6"},"returnParameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":926,"src":"4514:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":909,"name":"bool","nodeType":"ElementaryTypeName","src":"4514:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4513:6:6"},"scope":1346,"src":"4431:197:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1423],"body":{"id":958,"nodeType":"Block","src":"5323:153:6","statements":[{"assignments":[940],"declarations":[{"constant":false,"id":940,"mutability":"mutable","name":"spender","nameLocation":"5341:7:6","nodeType":"VariableDeclaration","scope":958,"src":"5333:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":943,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":941,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"5351:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5351:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5333:30:6"},{"expression":{"arguments":[{"id":945,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"5389:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":946,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"5395:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":947,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"5404:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":944,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"5373:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":949,"nodeType":"ExpressionStatement","src":"5373:38:6"},{"expression":{"arguments":[{"id":951,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"5431:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":952,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"5437:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":953,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"5441:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":950,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"5421:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5421:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":955,"nodeType":"ExpressionStatement","src":"5421:27:6"},{"expression":{"hexValue":"74727565","id":956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5465:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":938,"id":957,"nodeType":"Return","src":"5458:11:6"}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"4634:551:6","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":959,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5199:12:6","nodeType":"FunctionDefinition","overrides":{"id":935,"nodeType":"OverrideSpecifier","overrides":[],"src":"5299:8:6"},"parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"from","nameLocation":"5229:4:6","nodeType":"VariableDeclaration","scope":959,"src":"5221:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"5221:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"to","nameLocation":"5251:2:6","nodeType":"VariableDeclaration","scope":959,"src":"5243:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"5243:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"amount","nameLocation":"5271:6:6","nodeType":"VariableDeclaration","scope":959,"src":"5263:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5211:72:6"},"returnParameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":959,"src":"5317:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":936,"name":"bool","nodeType":"ElementaryTypeName","src":"5317:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5316:6:6"},"scope":1346,"src":"5190:286:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":987,"nodeType":"Block","src":"5965:140:6","statements":[{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"owner","nameLocation":"5983:5:6","nodeType":"VariableDeclaration","scope":987,"src":"5975:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"5975:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":973,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":971,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"5991:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5975:28:6"},{"expression":{"arguments":[{"id":975,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"6022:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":976,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"6029:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":978,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"6048:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":979,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"6055:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":977,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"6038:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":981,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"6066:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6038:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":974,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"6013:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6013:64:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":984,"nodeType":"ExpressionStatement","src":"6013:64:6"},{"expression":{"hexValue":"74727565","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6094:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":968,"id":986,"nodeType":"Return","src":"6087:11:6"}]},"documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"5482:384:6","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":988,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5880:17:6","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"spender","nameLocation":"5906:7:6","nodeType":"VariableDeclaration","scope":988,"src":"5898:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"addedValue","nameLocation":"5923:10:6","nodeType":"VariableDeclaration","scope":988,"src":"5915:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5897:37:6"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":988,"src":"5959:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":966,"name":"bool","nodeType":"ElementaryTypeName","src":"5959:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5958:6:6"},"scope":1346,"src":"5871:234:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1028,"nodeType":"Block","src":"6691:328:6","statements":[{"assignments":[999],"declarations":[{"constant":false,"id":999,"mutability":"mutable","name":"owner","nameLocation":"6709:5:6","nodeType":"VariableDeclaration","scope":1028,"src":"6701:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":998,"name":"address","nodeType":"ElementaryTypeName","src":"6701:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1002,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1000,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"6717:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6717:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6701:28:6"},{"assignments":[1004],"declarations":[{"constant":false,"id":1004,"mutability":"mutable","name":"currentAllowance","nameLocation":"6747:16:6","nodeType":"VariableDeclaration","scope":1028,"src":"6739:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"6739:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1009,"initialValue":{"arguments":[{"id":1006,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"6776:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1007,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"6783:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1005,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"6766:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6739:52:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1011,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6809:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1012,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"6829:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6809:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6846:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1010,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6801:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:85:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"ExpressionStatement","src":"6801:85:6"},{"id":1025,"nodeType":"UncheckedBlock","src":"6896:95:6","statements":[{"expression":{"arguments":[{"id":1018,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"6929:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1019,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"6936:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1020,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6945:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1021,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"6964:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6945:34:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1017,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"6920:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6920:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1024,"nodeType":"ExpressionStatement","src":"6920:60:6"}]},{"expression":{"hexValue":"74727565","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7008:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":997,"id":1027,"nodeType":"Return","src":"7001:11:6"}]},"documentation":{"id":989,"nodeType":"StructuredDocumentation","src":"6111:476:6","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":1029,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6601:17:6","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"spender","nameLocation":"6627:7:6","nodeType":"VariableDeclaration","scope":1029,"src":"6619:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":990,"name":"address","nodeType":"ElementaryTypeName","src":"6619:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":993,"mutability":"mutable","name":"subtractedValue","nameLocation":"6644:15:6","nodeType":"VariableDeclaration","scope":1029,"src":"6636:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"6636:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6618:42:6"},"returnParameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1029,"src":"6685:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":995,"name":"bool","nodeType":"ElementaryTypeName","src":"6685:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6684:6:6"},"scope":1346,"src":"6592:427:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1105,"nodeType":"Block","src":"7581:710:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1040,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7599:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7607:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"7607:7:6","typeDescriptions":{}}},"id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7607:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7599:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7619:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1039,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7591:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7591:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1048,"nodeType":"ExpressionStatement","src":"7591:68:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1050,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"7677:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7691:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7683:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1051,"name":"address","nodeType":"ElementaryTypeName","src":"7683:7:6","typeDescriptions":{}}},"id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7677:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7695:37:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1049,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7669:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7669:64:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1058,"nodeType":"ExpressionStatement","src":"7669:64:6"},{"expression":{"arguments":[{"id":1060,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7765:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1061,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"7771:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1062,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7775:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1059,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"7744:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7744:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1064,"nodeType":"ExpressionStatement","src":"7744:38:6"},{"assignments":[1066],"declarations":[{"constant":false,"id":1066,"mutability":"mutable","name":"fromBalance","nameLocation":"7801:11:6","nodeType":"VariableDeclaration","scope":1105,"src":"7793:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1065,"name":"uint256","nodeType":"ElementaryTypeName","src":"7793:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1070,"initialValue":{"baseExpression":{"id":1067,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"7815:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1069,"indexExpression":{"id":1068,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7825:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7815:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7793:37:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"7848:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1073,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7863:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7848:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7871:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1071,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7840:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7840:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1077,"nodeType":"ExpressionStatement","src":"7840:72:6"},{"id":1092,"nodeType":"UncheckedBlock","src":"7922:273:6","statements":[{"expression":{"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1078,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"7946:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1080,"indexExpression":{"id":1079,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7956:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7946:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"7964:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1082,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"7978:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7964:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7946:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1085,"nodeType":"ExpressionStatement","src":"7946:38:6"},{"expression":{"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1086,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"8161:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1088,"indexExpression":{"id":1087,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"8171:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8161:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1089,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"8178:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8161:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1091,"nodeType":"ExpressionStatement","src":"8161:23:6"}]},{"eventCall":{"arguments":[{"id":1094,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"8219:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1095,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"8225:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1096,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"8229:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1093,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"8210:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8210:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1098,"nodeType":"EmitStatement","src":"8205:31:6"},{"expression":{"arguments":[{"id":1100,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"8267:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1101,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"8273:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1102,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"8277:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1099,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"8247:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8247:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1104,"nodeType":"ExpressionStatement","src":"8247:37:6"}]},"documentation":{"id":1030,"nodeType":"StructuredDocumentation","src":"7025:443:6","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":1106,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7482:9:6","nodeType":"FunctionDefinition","parameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"from","nameLocation":"7509:4:6","nodeType":"VariableDeclaration","scope":1106,"src":"7501:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1031,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"to","nameLocation":"7531:2:6","nodeType":"VariableDeclaration","scope":1106,"src":"7523:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"7523:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1036,"mutability":"mutable","name":"amount","nameLocation":"7551:6:6","nodeType":"VariableDeclaration","scope":1106,"src":"7543:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1035,"name":"uint256","nodeType":"ElementaryTypeName","src":"7543:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7491:72:6"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[],"src":"7581:0:6"},"scope":1346,"src":"7473:818:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1162,"nodeType":"Block","src":"8632:470:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1115,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"8650:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8669:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8661:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"8661:7:6","typeDescriptions":{}}},"id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8661:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8650:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8673:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1114,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8642:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8642:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1123,"nodeType":"ExpressionStatement","src":"8642:65:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8747:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"8739:7:6","typeDescriptions":{}}},"id":1128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1129,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"8751:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1130,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"8760:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1124,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"8718:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8718:49:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1132,"nodeType":"ExpressionStatement","src":"8718:49:6"},{"expression":{"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1133,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"8778:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1134,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"8794:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8778:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1136,"nodeType":"ExpressionStatement","src":"8778:22:6"},{"id":1143,"nodeType":"UncheckedBlock","src":"8810:175:6","statements":[{"expression":{"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1137,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"8946:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1139,"indexExpression":{"id":1138,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"8956:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8946:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1140,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"8968:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8946:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1142,"nodeType":"ExpressionStatement","src":"8946:28:6"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9016:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9008:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1145,"name":"address","nodeType":"ElementaryTypeName","src":"9008:7:6","typeDescriptions":{}}},"id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9008:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1149,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"9020:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"9029:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1144,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"8999:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1152,"nodeType":"EmitStatement","src":"8994:42:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9067:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1154,"name":"address","nodeType":"ElementaryTypeName","src":"9067:7:6","typeDescriptions":{}}},"id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1158,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"9079:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1159,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"9088:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1153,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"9047:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9047:48:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1161,"nodeType":"ExpressionStatement","src":"9047:48:6"}]},"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"8297:265:6","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8576:5:6","nodeType":"FunctionDefinition","parameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"account","nameLocation":"8590:7:6","nodeType":"VariableDeclaration","scope":1163,"src":"8582:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"8582:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"amount","nameLocation":"8607:6:6","nodeType":"VariableDeclaration","scope":1163,"src":"8599:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"8599:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8581:33:6"},"returnParameters":{"id":1113,"nodeType":"ParameterList","parameters":[],"src":"8632:0:6"},"scope":1346,"src":"8567:535:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1234,"nodeType":"Block","src":"9487:594:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1172,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"9505:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9524:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9516:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"9516:7:6","typeDescriptions":{}}},"id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9516:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9505:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9528:35:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1171,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9497:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9497:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1180,"nodeType":"ExpressionStatement","src":"9497:67:6"},{"expression":{"arguments":[{"id":1182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"9596:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9613:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9605:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"9605:7:6","typeDescriptions":{}}},"id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9605:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1187,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"9617:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1181,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"9575:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9575:49:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1189,"nodeType":"ExpressionStatement","src":"9575:49:6"},{"assignments":[1191],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"accountBalance","nameLocation":"9643:14:6","nodeType":"VariableDeclaration","scope":1234,"src":"9635:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"9635:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1195,"initialValue":{"baseExpression":{"id":1192,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"9660:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1194,"indexExpression":{"id":1193,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"9670:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9660:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9635:43:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1197,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"9696:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1198,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"9714:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9696:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9722:36:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1196,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9688:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9688:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1202,"nodeType":"ExpressionStatement","src":"9688:71:6"},{"id":1215,"nodeType":"UncheckedBlock","src":"9769:194:6","statements":[{"expression":{"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1203,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"9793:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1205,"indexExpression":{"id":1204,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"9803:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9793:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1206,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"9814:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1207,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"9831:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9814:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9793:44:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1210,"nodeType":"ExpressionStatement","src":"9793:44:6"},{"expression":{"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1211,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"9930:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1212,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"9946:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9930:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1214,"nodeType":"ExpressionStatement","src":"9930:22:6"}]},{"eventCall":{"arguments":[{"id":1217,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"9987:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10004:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9996:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"9996:7:6","typeDescriptions":{}}},"id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9996:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1222,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"10008:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1216,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"9978:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9978:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1224,"nodeType":"EmitStatement","src":"9973:42:6"},{"expression":{"arguments":[{"id":1226,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"10046:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10063:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10055:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1227,"name":"address","nodeType":"ElementaryTypeName","src":"10055:7:6","typeDescriptions":{}}},"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10055:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1231,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"10067:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1225,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10026:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:48:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1233,"nodeType":"ExpressionStatement","src":"10026:48:6"}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"9108:309:6","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1235,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9431:5:6","nodeType":"FunctionDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"account","nameLocation":"9445:7:6","nodeType":"VariableDeclaration","scope":1235,"src":"9437:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"9437:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"amount","nameLocation":"9462:6:6","nodeType":"VariableDeclaration","scope":1235,"src":"9454:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1167,"name":"uint256","nodeType":"ElementaryTypeName","src":"9454:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9436:33:6"},"returnParameters":{"id":1170,"nodeType":"ParameterList","parameters":[],"src":"9487:0:6"},"scope":1346,"src":"9422:659:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1279,"nodeType":"Block","src":"10617:257:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1246,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"10635:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10652:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10644:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"10644:7:6","typeDescriptions":{}}},"id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10644:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10635:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10656:38:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1245,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10627:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10627:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1254,"nodeType":"ExpressionStatement","src":"10627:68:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1256,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"10713:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10724:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"10724:7:6","typeDescriptions":{}}},"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10724:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10713:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10736:36:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1255,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10705:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10705:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1264,"nodeType":"ExpressionStatement","src":"10705:68:6"},{"expression":{"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1265,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"10784:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1268,"indexExpression":{"id":1266,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"10796:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10784:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1269,"indexExpression":{"id":1267,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"10803:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10784:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1270,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"10814:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10784:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1272,"nodeType":"ExpressionStatement","src":"10784:36:6"},{"eventCall":{"arguments":[{"id":1274,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"10844:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1275,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"10851:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1276,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"10860:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1273,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"10835:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10835:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1278,"nodeType":"EmitStatement","src":"10830:37:6"}]},"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"10087:412:6","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1280,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10513:8:6","nodeType":"FunctionDefinition","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"owner","nameLocation":"10539:5:6","nodeType":"VariableDeclaration","scope":1280,"src":"10531:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"10531:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"spender","nameLocation":"10562:7:6","nodeType":"VariableDeclaration","scope":1280,"src":"10554:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1239,"name":"address","nodeType":"ElementaryTypeName","src":"10554:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"amount","nameLocation":"10587:6:6","nodeType":"VariableDeclaration","scope":1280,"src":"10579:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1241,"name":"uint256","nodeType":"ElementaryTypeName","src":"10579:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10521:78:6"},"returnParameters":{"id":1244,"nodeType":"ParameterList","parameters":[],"src":"10617:0:6"},"scope":1346,"src":"10504:370:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1322,"nodeType":"Block","src":"11275:321:6","statements":[{"assignments":[1291],"declarations":[{"constant":false,"id":1291,"mutability":"mutable","name":"currentAllowance","nameLocation":"11293:16:6","nodeType":"VariableDeclaration","scope":1322,"src":"11285:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1290,"name":"uint256","nodeType":"ElementaryTypeName","src":"11285:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1296,"initialValue":{"arguments":[{"id":1293,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"11322:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1294,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"11329:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1292,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"11312:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11312:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11285:52:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1297,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"11351:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11376:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"11376:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1298,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11371:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11371:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11385:3:6","memberName":"max","nodeType":"MemberAccess","src":"11371:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11351:37:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1321,"nodeType":"IfStatement","src":"11347:243:6","trueBody":{"id":1320,"nodeType":"Block","src":"11390:200:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1305,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"11412:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1306,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"11432:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11412:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11440:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1304,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11404:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11404:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1310,"nodeType":"ExpressionStatement","src":"11404:68:6"},{"id":1319,"nodeType":"UncheckedBlock","src":"11486:94:6","statements":[{"expression":{"arguments":[{"id":1312,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"11523:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1313,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"11530:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1314,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"11539:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1315,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"11558:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11539:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1311,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"11514:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11514:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1318,"nodeType":"ExpressionStatement","src":"11514:51:6"}]}]}}]},"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"10880:270:6","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1323,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11164:15:6","nodeType":"FunctionDefinition","parameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"owner","nameLocation":"11197:5:6","nodeType":"VariableDeclaration","scope":1323,"src":"11189:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"11189:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"spender","nameLocation":"11220:7:6","nodeType":"VariableDeclaration","scope":1323,"src":"11212:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1284,"name":"address","nodeType":"ElementaryTypeName","src":"11212:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"amount","nameLocation":"11245:6:6","nodeType":"VariableDeclaration","scope":1323,"src":"11237:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"11237:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11179:78:6"},"returnParameters":{"id":1289,"nodeType":"ParameterList","parameters":[],"src":"11275:0:6"},"scope":1346,"src":"11155:441:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1333,"nodeType":"Block","src":"12299:2:6","statements":[]},"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"11602:573:6","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1334,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12189:20:6","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"from","nameLocation":"12227:4:6","nodeType":"VariableDeclaration","scope":1334,"src":"12219:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"to","nameLocation":"12249:2:6","nodeType":"VariableDeclaration","scope":1334,"src":"12241:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"12241:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1330,"mutability":"mutable","name":"amount","nameLocation":"12269:6:6","nodeType":"VariableDeclaration","scope":1334,"src":"12261:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1329,"name":"uint256","nodeType":"ElementaryTypeName","src":"12261:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:72:6"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[],"src":"12299:0:6"},"scope":1346,"src":"12180:121:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"13007:2:6","statements":[]},"documentation":{"id":1335,"nodeType":"StructuredDocumentation","src":"12307:577:6","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12898:19:6","nodeType":"FunctionDefinition","parameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"from","nameLocation":"12935:4:6","nodeType":"VariableDeclaration","scope":1345,"src":"12927:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1336,"name":"address","nodeType":"ElementaryTypeName","src":"12927:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1339,"mutability":"mutable","name":"to","nameLocation":"12957:2:6","nodeType":"VariableDeclaration","scope":1345,"src":"12949:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"12949:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"amount","nameLocation":"12977:6:6","nodeType":"VariableDeclaration","scope":1345,"src":"12969:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1340,"name":"uint256","nodeType":"ElementaryTypeName","src":"12969:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12917:72:6"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[],"src":"13007:0:6"},"scope":1346,"src":"12889:120:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1347,"src":"1401:11610:6","usedErrors":[]}],"src":"105:12907:6"},"id":6},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1424]},"id":1425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1348,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"131:70:7","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1424,"linearizedBaseContracts":[1424],"name":"IERC20","nameLocation":"212:6:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"225:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1358,"name":"Transfer","nameLocation":"394:8:7","nodeType":"EventDefinition","parameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:7","nodeType":"VariableDeclaration","scope":1358,"src":"403:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1351,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1354,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:7","nodeType":"VariableDeclaration","scope":1358,"src":"425:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1356,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:7","nodeType":"VariableDeclaration","scope":1358,"src":"445:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:7"},"src":"388:72:7"},{"anonymous":false,"documentation":{"id":1359,"nodeType":"StructuredDocumentation","src":"466:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1367,"name":"Approval","nameLocation":"625:8:7","nodeType":"EventDefinition","parameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:7","nodeType":"VariableDeclaration","scope":1367,"src":"634:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1363,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:7","nodeType":"VariableDeclaration","scope":1367,"src":"657:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1362,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1365,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:7","nodeType":"VariableDeclaration","scope":1367,"src":"682:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1364,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:7"},"src":"619:78:7"},{"documentation":{"id":1368,"nodeType":"StructuredDocumentation","src":"703:66:7","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1373,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:7","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[],"src":"794:2:7"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1373,"src":"820:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:7"},"scope":1424,"src":"774:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1374,"nodeType":"StructuredDocumentation","src":"835:72:7","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1381,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:7","nodeType":"FunctionDefinition","parameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"account","nameLocation":"939:7:7","nodeType":"VariableDeclaration","scope":1381,"src":"931:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1375,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:7"},"returnParameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1381,"src":"971:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:7"},"scope":1424,"src":"912:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"986:202:7","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1391,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:7","nodeType":"FunctionDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"to","nameLocation":"1219:2:7","nodeType":"VariableDeclaration","scope":1391,"src":"1211:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1383,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1386,"mutability":"mutable","name":"amount","nameLocation":"1231:6:7","nodeType":"VariableDeclaration","scope":1391,"src":"1223:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:7"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"1257:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1388,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:7"},"scope":1424,"src":"1193:70:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"1269:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1401,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:7","nodeType":"FunctionDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"owner","nameLocation":"1565:5:7","nodeType":"VariableDeclaration","scope":1401,"src":"1557:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"spender","nameLocation":"1580:7:7","nodeType":"VariableDeclaration","scope":1401,"src":"1572:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1395,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:7"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1401,"src":"1612:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:7"},"scope":1424,"src":"1538:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1402,"nodeType":"StructuredDocumentation","src":"1627:642:7","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1411,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:7","nodeType":"FunctionDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"spender","nameLocation":"2299:7:7","nodeType":"VariableDeclaration","scope":1411,"src":"2291:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1403,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"amount","nameLocation":"2316:6:7","nodeType":"VariableDeclaration","scope":1411,"src":"2308:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:7"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1411,"src":"2342:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1408,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:7"},"scope":1424,"src":"2274:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1412,"nodeType":"StructuredDocumentation","src":"2354:287:7","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1423,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:7","nodeType":"FunctionDefinition","parameters":{"id":1419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"from","nameLocation":"2685:4:7","nodeType":"VariableDeclaration","scope":1423,"src":"2677:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1413,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1416,"mutability":"mutable","name":"to","nameLocation":"2707:2:7","nodeType":"VariableDeclaration","scope":1423,"src":"2699:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"amount","nameLocation":"2727:6:7","nodeType":"VariableDeclaration","scope":1423,"src":"2719:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1417,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:7"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1423,"src":"2758:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1420,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:7"},"scope":1424,"src":"2646:118:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1425,"src":"202:2564:7","usedErrors":[]}],"src":"106:2661:7"},"id":7},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","exportedSymbols":{"Context":[1688],"ERC20":[1346],"ERC20Burnable":[1468],"IERC20":[1424],"IERC20Metadata":[1530]},"id":1469,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1426,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"124:23:8"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":1427,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1469,"sourceUnit":1347,"src":"149:22:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../../utils/Context.sol","id":1428,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1469,"sourceUnit":1689,"src":"172:36:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1430,"name":"Context","nameLocations":["454:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1688,"src":"454:7:8"},"id":1431,"nodeType":"InheritanceSpecifier","src":"454:7:8"},{"baseName":{"id":1432,"name":"ERC20","nameLocations":["463:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"463:5:8"},"id":1433,"nodeType":"InheritanceSpecifier","src":"463:5:8"}],"canonicalName":"ERC20Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"210:208:8","text":" @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."},"fullyImplemented":false,"id":1468,"linearizedBaseContracts":[1468,1346,1530,1424,1688],"name":"ERC20Burnable","nameLocation":"437:13:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1445,"nodeType":"Block","src":"623:44:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1440,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"639:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"639:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"653:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1439,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"633:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"633:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1444,"nodeType":"ExpressionStatement","src":"633:27:8"}]},"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"475:98:8","text":" @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."},"functionSelector":"42966c68","id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"587:4:8","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"amount","nameLocation":"600:6:8","nodeType":"VariableDeclaration","scope":1446,"src":"592:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1435,"name":"uint256","nodeType":"ElementaryTypeName","src":"592:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"591:16:8"},"returnParameters":{"id":1438,"nodeType":"ParameterList","parameters":[],"src":"623:0:8"},"scope":1468,"src":"578:89:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1466,"nodeType":"Block","src":"1039:95:8","statements":[{"expression":{"arguments":[{"id":1455,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"1065:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1456,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"1074:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1074:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1458,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"1088:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1454,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"1049:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1049:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1460,"nodeType":"ExpressionStatement","src":"1049:46:8"},{"expression":{"arguments":[{"id":1462,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"1111:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1463,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"1120:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1461,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"1105:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1105:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1465,"nodeType":"ExpressionStatement","src":"1105:22:8"}]},"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"673:295:8","text":" @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."},"functionSelector":"79cc6790","id":1467,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"982:8:8","nodeType":"FunctionDefinition","parameters":{"id":1452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"account","nameLocation":"999:7:8","nodeType":"VariableDeclaration","scope":1467,"src":"991:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1448,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1451,"mutability":"mutable","name":"amount","nameLocation":"1016:6:8","nodeType":"VariableDeclaration","scope":1467,"src":"1008:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1450,"name":"uint256","nodeType":"ElementaryTypeName","src":"1008:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"990:33:8"},"returnParameters":{"id":1453,"nodeType":"ParameterList","parameters":[],"src":"1039:0:8"},"scope":1468,"src":"973:161:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1469,"src":"419:717:8","usedErrors":[]}],"src":"124:1013:8"},"id":8},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol","exportedSymbols":{"Context":[1688],"ERC20":[1346],"ERC20Pausable":[1505],"IERC20":[1424],"IERC20Metadata":[1530],"Pausable":[759]},"id":1506,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1470,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":1471,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1506,"sourceUnit":1347,"src":"134:22:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"../../../security/Pausable.sol","id":1472,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1506,"sourceUnit":760,"src":"157:40:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1474,"name":"ERC20","nameLocations":["504:5:9"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"504:5:9"},"id":1475,"nodeType":"InheritanceSpecifier","src":"504:5:9"},{"baseName":{"id":1476,"name":"Pausable","nameLocations":["511:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":759,"src":"511:8:9"},"id":1477,"nodeType":"InheritanceSpecifier","src":"511:8:9"}],"canonicalName":"ERC20Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1473,"nodeType":"StructuredDocumentation","src":"199:269:9","text":" @dev ERC20 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug."},"fullyImplemented":false,"id":1505,"linearizedBaseContracts":[1505,759,1346,1530,1424,1688],"name":"ERC20Pausable","nameLocation":"487:13:9","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1334],"body":{"id":1503,"nodeType":"Block","src":"793:136:9","statements":[{"expression":{"arguments":[{"id":1491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"830:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"836:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1493,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"840:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1488,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"803:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20Pausable_$1505_$","typeString":"type(contract super ERC20Pausable)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"809:20:9","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1334,"src":"803:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"803:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1495,"nodeType":"ExpressionStatement","src":"803:44:9"},{"expression":{"arguments":[{"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"866:9:9","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1497,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"867:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"867:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564","id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"877:44:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4","typeString":"literal_string \"ERC20Pausable: token transfer while paused\""},"value":"ERC20Pausable: token transfer while paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4","typeString":"literal_string \"ERC20Pausable: token transfer while paused\""}],"id":1496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"858:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"858:64:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1502,"nodeType":"ExpressionStatement","src":"858:64:9"}]},"documentation":{"id":1478,"nodeType":"StructuredDocumentation","src":"526:134:9","text":" @dev See {ERC20-_beforeTokenTransfer}.\n Requirements:\n - the contract must not be paused."},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"674:20:9","nodeType":"FunctionDefinition","overrides":{"id":1486,"nodeType":"OverrideSpecifier","overrides":[],"src":"784:8:9"},"parameters":{"id":1485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"from","nameLocation":"712:4:9","nodeType":"VariableDeclaration","scope":1504,"src":"704:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"704:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"to","nameLocation":"734:2:9","nodeType":"VariableDeclaration","scope":1504,"src":"726:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1481,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1484,"mutability":"mutable","name":"amount","nameLocation":"754:6:9","nodeType":"VariableDeclaration","scope":1504,"src":"746:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1483,"name":"uint256","nodeType":"ElementaryTypeName","src":"746:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"694:72:9"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"793:0:9"},"scope":1505,"src":"665:264:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1506,"src":"469:462:9","usedErrors":[]}],"src":"109:823:9"},"id":9},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1424],"IERC20Metadata":[1530]},"id":1531,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1507,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1531,"sourceUnit":1425,"src":"135:23:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1510,"name":"IERC20","nameLocations":["305:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1424,"src":"305:6:10"},"id":1511,"nodeType":"InheritanceSpecifier","src":"305:6:10"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1509,"nodeType":"StructuredDocumentation","src":"160:116:10","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1530,"linearizedBaseContracts":[1530,1424],"name":"IERC20Metadata","nameLocation":"287:14:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1512,"nodeType":"StructuredDocumentation","src":"318:54:10","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1517,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:10","nodeType":"FunctionDefinition","parameters":{"id":1513,"nodeType":"ParameterList","parameters":[],"src":"390:2:10"},"returnParameters":{"id":1516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1517,"src":"416:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1514,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:10"},"scope":1530,"src":"377:54:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"437:56:10","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1523,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:10","nodeType":"FunctionDefinition","parameters":{"id":1519,"nodeType":"ParameterList","parameters":[],"src":"513:2:10"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1523,"src":"539:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1520,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:10"},"scope":1530,"src":"498:56:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"560:65:10","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1529,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:10","nodeType":"FunctionDefinition","parameters":{"id":1525,"nodeType":"ParameterList","parameters":[],"src":"647:2:10"},"returnParameters":{"id":1528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1529,"src":"673:5:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1526,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:10"},"scope":1530,"src":"630:50:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1531,"src":"277:405:10","usedErrors":[]}],"src":"110:573:10"},"id":10},"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol","exportedSymbols":{"AccessControl":[315],"AccessControlEnumerable":[440],"Context":[1688],"ERC165":[1887],"ERC20":[1346],"ERC20Burnable":[1468],"ERC20Pausable":[1505],"ERC20PresetMinterPauser":[1666],"EnumerableSet":[3377],"IAccessControl":[513],"IAccessControlEnumerable":[538],"IERC165":[1899],"IERC20":[1424],"IERC20Metadata":[1530],"Math":[2764],"Pausable":[759],"Strings":[1863]},"id":1667,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1532,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"131:23:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":1533,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1667,"sourceUnit":1347,"src":"156:22:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","file":"../extensions/ERC20Burnable.sol","id":1534,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1667,"sourceUnit":1469,"src":"179:41:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol","file":"../extensions/ERC20Pausable.sol","id":1535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1667,"sourceUnit":1506,"src":"221:41:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControlEnumerable.sol","file":"../../../access/AccessControlEnumerable.sol","id":1536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1667,"sourceUnit":441,"src":"263:53:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../../utils/Context.sol","id":1537,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1667,"sourceUnit":1689,"src":"317:36:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1539,"name":"Context","nameLocations":["1041:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1688,"src":"1041:7:11"},"id":1540,"nodeType":"InheritanceSpecifier","src":"1041:7:11"},{"baseName":{"id":1541,"name":"AccessControlEnumerable","nameLocations":["1050:23:11"],"nodeType":"IdentifierPath","referencedDeclaration":440,"src":"1050:23:11"},"id":1542,"nodeType":"InheritanceSpecifier","src":"1050:23:11"},{"baseName":{"id":1543,"name":"ERC20Burnable","nameLocations":["1075:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1468,"src":"1075:13:11"},"id":1544,"nodeType":"InheritanceSpecifier","src":"1075:13:11"},{"baseName":{"id":1545,"name":"ERC20Pausable","nameLocations":["1090:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1505,"src":"1090:13:11"},"id":1546,"nodeType":"InheritanceSpecifier","src":"1090:13:11"}],"canonicalName":"ERC20PresetMinterPauser","contractDependencies":[],"contractKind":"contract","documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"355:649:11","text":" @dev {ERC20} token, including:\n  - ability for holders to burn (destroy) their tokens\n  - a minter role that allows for token minting (creation)\n  - a pauser role that allows to stop all token transfers\n This contract uses {AccessControl} to lock permissioned functions using the\n different roles - head to its documentation for details.\n The account that deploys the contract will be granted the minter and pauser\n roles, as well as the default admin role, which will let it grant both minter\n and pauser roles to other accounts.\n _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._"},"fullyImplemented":true,"id":1666,"linearizedBaseContracts":[1666,1505,759,1468,1346,1530,1424,440,315,1887,1899,538,513,1688],"name":"ERC20PresetMinterPauser","nameLocation":"1014:23:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"d5391393","id":1551,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"1134:11:11","nodeType":"VariableDeclaration","scope":1666,"src":"1110:62:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1110:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d494e5445525f524f4c45","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1158:13:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""},"value":"MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""}],"id":1548,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1148:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1148:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":1556,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"1202:11:11","nodeType":"VariableDeclaration","scope":1666,"src":"1178:62:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1178:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1226:13:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":1553,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1216:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":1586,"nodeType":"Block","src":"1498:156:11","statements":[{"expression":{"arguments":[{"id":1569,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1519:18:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1570,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"1539:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1539:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1568,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1508:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1508:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1573,"nodeType":"ExpressionStatement","src":"1508:44:11"},{"expression":{"arguments":[{"id":1575,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"1574:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1576,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"1587:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1574,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1563:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1563:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1579,"nodeType":"ExpressionStatement","src":"1563:37:11"},{"expression":{"arguments":[{"id":1581,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1621:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1582,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"1634:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1580,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1610:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1610:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1585,"nodeType":"ExpressionStatement","src":"1610:37:11"}]},"documentation":{"id":1557,"nodeType":"StructuredDocumentation","src":"1247:172:11","text":" @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n account that deploys the contract.\n See {ERC20-constructor}."},"id":1587,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1564,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"1484:4:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1565,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"1490:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":1566,"kind":"baseConstructorSpecifier","modifierName":{"id":1563,"name":"ERC20","nameLocations":["1478:5:11"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"1478:5:11"},"nodeType":"ModifierInvocation","src":"1478:19:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1559,"mutability":"mutable","name":"name","nameLocation":"1450:4:11","nodeType":"VariableDeclaration","scope":1587,"src":"1436:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1558,"name":"string","nodeType":"ElementaryTypeName","src":"1436:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1561,"mutability":"mutable","name":"symbol","nameLocation":"1470:6:11","nodeType":"VariableDeclaration","scope":1587,"src":"1456:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1560,"name":"string","nodeType":"ElementaryTypeName","src":"1456:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1435:42:11"},"returnParameters":{"id":1567,"nodeType":"ParameterList","parameters":[],"src":"1498:0:11"},"scope":1666,"src":"1424:230:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1609,"nodeType":"Block","src":"1900:145:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":1597,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"1926:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1598,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"1939:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1939:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1596,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"1918:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1918:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d7573742068617665206d696e74657220726f6c6520746f206d696e74","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1954:56:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342","typeString":"literal_string \"ERC20PresetMinterPauser: must have minter role to mint\""},"value":"ERC20PresetMinterPauser: must have minter role to mint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342","typeString":"literal_string \"ERC20PresetMinterPauser: must have minter role to mint\""}],"id":1595,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1910:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:101:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1603,"nodeType":"ExpressionStatement","src":"1910:101:11"},{"expression":{"arguments":[{"id":1605,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"2027:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1606,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"2031:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1604,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"2021:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2021:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1608,"nodeType":"ExpressionStatement","src":"2021:17:11"}]},"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"1660:178:11","text":" @dev Creates `amount` new tokens for `to`.\n See {ERC20-_mint}.\n Requirements:\n - the caller must have the `MINTER_ROLE`."},"functionSelector":"40c10f19","id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1852:4:11","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"to","nameLocation":"1865:2:11","nodeType":"VariableDeclaration","scope":1610,"src":"1857:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"1857:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1592,"mutability":"mutable","name":"amount","nameLocation":"1877:6:11","nodeType":"VariableDeclaration","scope":1610,"src":"1869:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1591,"name":"uint256","nodeType":"ElementaryTypeName","src":"1869:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1856:28:11"},"returnParameters":{"id":1594,"nodeType":"ParameterList","parameters":[],"src":"1900:0:11"},"scope":1666,"src":"1843:202:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1626,"nodeType":"Block","src":"2280:137:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":1616,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"2306:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1617,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2319:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2319:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1615,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"2298:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f207061757365","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2334:57:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330","typeString":"literal_string \"ERC20PresetMinterPauser: must have pauser role to pause\""},"value":"ERC20PresetMinterPauser: must have pauser role to pause"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330","typeString":"literal_string \"ERC20PresetMinterPauser: must have pauser role to pause\""}],"id":1614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2290:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:102:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1622,"nodeType":"ExpressionStatement","src":"2290:102:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1623,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"2402:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2402:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1625,"nodeType":"ExpressionStatement","src":"2402:8:11"}]},"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"2051:192:11","text":" @dev Pauses all token transfers.\n See {ERC20Pausable} and {Pausable-_pause}.\n Requirements:\n - the caller must have the `PAUSER_ROLE`."},"functionSelector":"8456cb59","id":1627,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"2257:5:11","nodeType":"FunctionDefinition","parameters":{"id":1612,"nodeType":"ParameterList","parameters":[],"src":"2262:2:11"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[],"src":"2280:0:11"},"scope":1666,"src":"2248:169:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1643,"nodeType":"Block","src":"2658:141:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":1633,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"2684:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1634,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2697:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2697:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1632,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"2676:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2676:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20756e7061757365","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2712:59:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186","typeString":"literal_string \"ERC20PresetMinterPauser: must have pauser role to unpause\""},"value":"ERC20PresetMinterPauser: must have pauser role to unpause"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186","typeString":"literal_string \"ERC20PresetMinterPauser: must have pauser role to unpause\""}],"id":1631,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2668:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:104:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1639,"nodeType":"ExpressionStatement","src":"2668:104:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1640,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"2782:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2782:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1642,"nodeType":"ExpressionStatement","src":"2782:10:11"}]},"documentation":{"id":1628,"nodeType":"StructuredDocumentation","src":"2423:196:11","text":" @dev Unpauses all token transfers.\n See {ERC20Pausable} and {Pausable-_unpause}.\n Requirements:\n - the caller must have the `PAUSER_ROLE`."},"functionSelector":"3f4ba83a","id":1644,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"2633:7:11","nodeType":"FunctionDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[],"src":"2640:2:11"},"returnParameters":{"id":1630,"nodeType":"ParameterList","parameters":[],"src":"2658:0:11"},"scope":1666,"src":"2624:175:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1334,1504],"body":{"id":1664,"nodeType":"Block","src":"2955:61:11","statements":[{"expression":{"arguments":[{"id":1659,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"2992:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1660,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"2998:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1661,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"3002:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1656,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2965:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20PresetMinterPauser_$1666_$","typeString":"type(contract super ERC20PresetMinterPauser)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2971:20:11","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1504,"src":"2965:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2965:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1663,"nodeType":"ExpressionStatement","src":"2965:44:11"}]},"id":1665,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2814:20:11","nodeType":"FunctionDefinition","overrides":{"id":1654,"nodeType":"OverrideSpecifier","overrides":[{"id":1652,"name":"ERC20","nameLocations":["2933:5:11"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"2933:5:11"},{"id":1653,"name":"ERC20Pausable","nameLocations":["2940:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1505,"src":"2940:13:11"}],"src":"2924:30:11"},"parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"mutability":"mutable","name":"from","nameLocation":"2852:4:11","nodeType":"VariableDeclaration","scope":1665,"src":"2844:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"2844:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"to","nameLocation":"2874:2:11","nodeType":"VariableDeclaration","scope":1665,"src":"2866:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1647,"name":"address","nodeType":"ElementaryTypeName","src":"2866:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1650,"mutability":"mutable","name":"amount","nameLocation":"2894:6:11","nodeType":"VariableDeclaration","scope":1665,"src":"2886:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"2886:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2834:72:11"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[],"src":"2955:0:11"},"scope":1666,"src":"2805:211:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1667,"src":"1005:2013:11","usedErrors":[]}],"src":"131:2888:11"},"id":11},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1688]},"id":1689,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1668,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:12"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"111:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1688,"linearizedBaseContracts":[1688],"name":"Context","nameLocation":"626:7:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1677,"nodeType":"Block","src":"702:34:12","statements":[{"expression":{"expression":{"id":1674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:12","memberName":"sender","nodeType":"MemberAccess","src":"719:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1673,"id":1676,"nodeType":"Return","src":"712:17:12"}]},"id":1678,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:12","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[],"src":"659:2:12"},"returnParameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1678,"src":"693:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:12"},"scope":1688,"src":"640:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1686,"nodeType":"Block","src":"809:32:12","statements":[{"expression":{"expression":{"id":1683,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:12","memberName":"data","nodeType":"MemberAccess","src":"826:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1682,"id":1685,"nodeType":"Return","src":"819:15:12"}]},"id":1687,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:12","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[],"src":"759:2:12"},"returnParameters":{"id":1682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1687,"src":"793:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1680,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:12"},"scope":1688,"src":"742:99:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1689,"src":"608:235:12","usedErrors":[]}],"src":"86:758:12"},"id":12},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2764],"Strings":[1863]},"id":1864,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1690,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1864,"sourceUnit":2765,"src":"126:25:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1692,"nodeType":"StructuredDocumentation","src":"153:34:13","text":" @dev String operations."},"fullyImplemented":true,"id":1863,"linearizedBaseContracts":[1863],"name":"Strings","nameLocation":"196:7:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1695,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:13","nodeType":"VariableDeclaration","scope":1863,"src":"210:54:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1693,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:13","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1698,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:13","nodeType":"VariableDeclaration","scope":1863,"src":"270:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1696,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:13","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1745,"nodeType":"Block","src":"486:625:13","statements":[{"id":1744,"nodeType":"UncheckedBlock","src":"496:609:13","statements":[{"assignments":[1707],"declarations":[{"constant":false,"id":1707,"mutability":"mutable","name":"length","nameLocation":"528:6:13","nodeType":"VariableDeclaration","scope":1744,"src":"520:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1714,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1710,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"548:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1708,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"537:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2764_$","typeString":"type(library Math)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:13","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2601,"src":"537:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:13"},{"assignments":[1716],"declarations":[{"constant":false,"id":1716,"mutability":"mutable","name":"buffer","nameLocation":"586:6:13","nodeType":"VariableDeclaration","scope":1744,"src":"572:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1715,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1721,"initialValue":{"arguments":[{"id":1719,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"606:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1717,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:13"},{"assignments":[1723],"declarations":[{"constant":false,"id":1723,"mutability":"mutable","name":"ptr","nameLocation":"635:3:13","nodeType":"VariableDeclaration","scope":1744,"src":"627:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1724,"nodeType":"VariableDeclarationStatement","src":"627:11:13"},{"AST":{"nodeType":"YulBlock","src":"708:67:13","statements":[{"nodeType":"YulAssignment","src":"726:35:13","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:13","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:13"},"nodeType":"YulFunctionCall","src":"745:15:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:13"},"nodeType":"YulFunctionCall","src":"733:28:13"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1716,"isOffset":false,"isSlot":false,"src":"737:6:13","valueSize":1},{"declaration":1707,"isOffset":false,"isSlot":false,"src":"753:6:13","valueSize":1},{"declaration":1723,"isOffset":false,"isSlot":false,"src":"726:3:13","valueSize":1}],"id":1725,"nodeType":"InlineAssembly","src":"699:76:13"},{"body":{"id":1740,"nodeType":"Block","src":"801:267:13","statements":[{"expression":{"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:13","subExpression":{"id":1727,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"819:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1729,"nodeType":"ExpressionStatement","src":"819:5:13"},{"AST":{"nodeType":"YulBlock","src":"902:84:13","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:13"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:13","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:13"},"nodeType":"YulFunctionCall","src":"942:14:13"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:13"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:13"},"nodeType":"YulFunctionCall","src":"937:30:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:13"},"nodeType":"YulFunctionCall","src":"924:44:13"},"nodeType":"YulExpressionStatement","src":"924:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1695,"isOffset":false,"isSlot":false,"src":"958:8:13","valueSize":1},{"declaration":1723,"isOffset":false,"isSlot":false,"src":"932:3:13","valueSize":1},{"declaration":1701,"isOffset":false,"isSlot":false,"src":"946:5:13","valueSize":1}],"id":1730,"nodeType":"InlineAssembly","src":"893:93:13"},{"expression":{"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1731,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"1003:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1734,"nodeType":"ExpressionStatement","src":"1003:11:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"1036:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1739,"nodeType":"IfStatement","src":"1032:21:13","trueBody":{"id":1738,"nodeType":"Break","src":"1048:5:13"}}]},"condition":{"hexValue":"74727565","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1741,"nodeType":"WhileStatement","src":"788:280:13"},{"expression":{"id":1742,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"1088:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1705,"id":1743,"nodeType":"Return","src":"1081:13:13"}]}]},"documentation":{"id":1699,"nodeType":"StructuredDocumentation","src":"320:90:13","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1746,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:13","nodeType":"FunctionDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1701,"mutability":"mutable","name":"value","nameLocation":"441:5:13","nodeType":"VariableDeclaration","scope":1746,"src":"433:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:13"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1746,"src":"471:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1703,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:13"},"scope":1863,"src":"415:696:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1765,"nodeType":"Block","src":"1290:100:13","statements":[{"id":1764,"nodeType":"UncheckedBlock","src":"1300:84:13","statements":[{"expression":{"arguments":[{"id":1755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"1343:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"1362:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1756,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1350:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2764_$","typeString":"type(library Math)"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:13","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2724,"src":"1350:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1754,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1766,1842,1862],"referencedDeclaration":1842,"src":"1331:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1753,"id":1763,"nodeType":"Return","src":"1324:49:13"}]}]},"documentation":{"id":1747,"nodeType":"StructuredDocumentation","src":"1117:94:13","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1766,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:13","nodeType":"FunctionDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"value","nameLocation":"1245:5:13","nodeType":"VariableDeclaration","scope":1766,"src":"1237:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:13"},"returnParameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1766,"src":"1275:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1751,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:13"},"scope":1863,"src":"1216:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1841,"nodeType":"Block","src":"1603:347:13","statements":[{"assignments":[1777],"declarations":[{"constant":false,"id":1777,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:13","nodeType":"VariableDeclaration","scope":1841,"src":"1613:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1776,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1786,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1781,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"1649:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1778,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:13"},{"expression":{"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1787,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"1670:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1789,"indexExpression":{"hexValue":"30","id":1788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1792,"nodeType":"ExpressionStatement","src":"1670:15:13"},{"expression":{"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1793,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"1695:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1795,"indexExpression":{"hexValue":"31","id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1798,"nodeType":"ExpressionStatement","src":"1695:15:13"},{"body":{"id":1827,"nodeType":"Block","src":"1765:83:13","statements":[{"expression":{"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1813,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"1779:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1815,"indexExpression":{"id":1814,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"1786:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1816,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"1791:8:13","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1820,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"1800:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:13","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1822,"nodeType":"ExpressionStatement","src":"1779:33:13"},{"expression":{"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"1826:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1826,"nodeType":"ExpressionStatement","src":"1826:11:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1807,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"1753:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1828,"initializationExpression":{"assignments":[1800],"declarations":[{"constant":false,"id":1800,"mutability":"mutable","name":"i","nameLocation":"1733:1:13","nodeType":"VariableDeclaration","scope":1828,"src":"1725:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1806,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1802,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"1741:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:13"},"loopExpression":{"expression":{"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:13","subExpression":{"id":1810,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"1762:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1812,"nodeType":"ExpressionStatement","src":"1760:3:13"},"nodeType":"ForStatement","src":"1720:128:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"1865:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1829,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1835,"nodeType":"ExpressionStatement","src":"1857:55:13"},{"expression":{"arguments":[{"id":1838,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"1936:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1836,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:13","typeDescriptions":{}}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1775,"id":1840,"nodeType":"Return","src":"1922:21:13"}]},"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"1396:112:13","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1842,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:13","nodeType":"FunctionDefinition","parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"value","nameLocation":"1542:5:13","nodeType":"VariableDeclaration","scope":1842,"src":"1534:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1771,"mutability":"mutable","name":"length","nameLocation":"1557:6:13","nodeType":"VariableDeclaration","scope":1842,"src":"1549:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:13"},"returnParameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1842,"src":"1588:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1773,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:13"},"scope":1863,"src":"1513:437:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1861,"nodeType":"Block","src":"2175:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1855,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"2220:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1853,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:13","typeDescriptions":{}}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:13","typeDescriptions":{}}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1858,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"2228:15:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1850,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1766,1842,1862],"referencedDeclaration":1842,"src":"2192:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1849,"id":1860,"nodeType":"Return","src":"2185:59:13"}]},"documentation":{"id":1843,"nodeType":"StructuredDocumentation","src":"1956:141:13","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1862,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:13","nodeType":"FunctionDefinition","parameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"addr","nameLocation":"2131:4:13","nodeType":"VariableDeclaration","scope":1862,"src":"2123:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1844,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:13"},"returnParameters":{"id":1849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1862,"src":"2160:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1847,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:13"},"scope":1863,"src":"2102:149:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1864,"src":"188:2065:13","usedErrors":[]}],"src":"101:2153:13"},"id":13},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1887],"IERC165":[1899]},"id":1888,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1865,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:14"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1866,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1888,"sourceUnit":1900,"src":"124:23:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1868,"name":"IERC165","nameLocations":["754:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1899,"src":"754:7:14"},"id":1869,"nodeType":"InheritanceSpecifier","src":"754:7:14"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1867,"nodeType":"StructuredDocumentation","src":"149:576:14","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1887,"linearizedBaseContracts":[1887,1899],"name":"ERC165","nameLocation":"744:6:14","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1898],"body":{"id":1885,"nodeType":"Block","src":"920:64:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1878,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"937:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1880,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"957:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1899_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1899_$","typeString":"type(contract IERC165)"}],"id":1879,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1899","typeString":"type(contract IERC165)"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:14","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1877,"id":1884,"nodeType":"Return","src":"930:47:14"}]},"documentation":{"id":1870,"nodeType":"StructuredDocumentation","src":"768:56:14","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1886,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:14","nodeType":"FunctionDefinition","overrides":{"id":1874,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:14"},"parameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1872,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:14","nodeType":"VariableDeclaration","scope":1886,"src":"856:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1871,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:14"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1886,"src":"914:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1875,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:14"},"scope":1887,"src":"829:155:14","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1888,"src":"726:260:14","usedErrors":[]}],"src":"99:888:14"},"id":14},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1899]},"id":1900,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1889,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"125:279:15","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1899,"linearizedBaseContracts":[1899],"name":"IERC165","nameLocation":"415:7:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1891,"nodeType":"StructuredDocumentation","src":"429:340:15","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1898,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:15","nodeType":"FunctionDefinition","parameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:15","nodeType":"VariableDeclaration","scope":1898,"src":"801:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1892,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:15"},"returnParameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"844:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1895,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:15"},"scope":1899,"src":"774:76:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1900,"src":"405:447:15","usedErrors":[]}],"src":"100:753:15"},"id":15},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2764]},"id":2765,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1901,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1902,"nodeType":"StructuredDocumentation","src":"128:73:16","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2764,"linearizedBaseContracts":[2764],"name":"Math","nameLocation":"210:4:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1906,"members":[{"id":1903,"name":"Down","nameLocation":"245:4:16","nodeType":"EnumValue","src":"245:4:16"},{"id":1904,"name":"Up","nameLocation":"287:2:16","nodeType":"EnumValue","src":"287:2:16"},{"id":1905,"name":"Zero","nameLocation":"318:4:16","nodeType":"EnumValue","src":"318:4:16"}],"name":"Rounding","nameLocation":"226:8:16","nodeType":"EnumDefinition","src":"221:122:16"},{"body":{"id":1923,"nodeType":"Block","src":"480:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1916,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"497:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1917,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"501:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1920,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"509:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:16","trueExpression":{"id":1919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"505:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1915,"id":1922,"nodeType":"Return","src":"490:20:16"}]},"documentation":{"id":1907,"nodeType":"StructuredDocumentation","src":"349:59:16","text":" @dev Returns the largest of two numbers."},"id":1924,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:16","nodeType":"FunctionDefinition","parameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"a","nameLocation":"434:1:16","nodeType":"VariableDeclaration","scope":1924,"src":"426:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1908,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"b","nameLocation":"445:1:16","nodeType":"VariableDeclaration","scope":1924,"src":"437:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1910,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:16"},"returnParameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1924,"src":"471:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1913,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:16"},"scope":2764,"src":"413:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1941,"nodeType":"Block","src":"655:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1934,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"672:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1935,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"676:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"684:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:16","trueExpression":{"id":1937,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"680:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1933,"id":1940,"nodeType":"Return","src":"665:20:16"}]},"documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"523:60:16","text":" @dev Returns the smallest of two numbers."},"id":1942,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:16","nodeType":"FunctionDefinition","parameters":{"id":1930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"a","nameLocation":"609:1:16","nodeType":"VariableDeclaration","scope":1942,"src":"601:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1926,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1929,"mutability":"mutable","name":"b","nameLocation":"620:1:16","nodeType":"VariableDeclaration","scope":1942,"src":"612:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:16"},"returnParameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1942,"src":"646:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:16"},"scope":2764,"src":"588:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1964,"nodeType":"Block","src":"876:82:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"931:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1953,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"935:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1955,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1956,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"941:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1957,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"945:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1951,"id":1963,"nodeType":"Return","src":"923:28:16"}]},"documentation":{"id":1943,"nodeType":"StructuredDocumentation","src":"698:102:16","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1965,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:16","nodeType":"FunctionDefinition","parameters":{"id":1948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1945,"mutability":"mutable","name":"a","nameLocation":"830:1:16","nodeType":"VariableDeclaration","scope":1965,"src":"822:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1947,"mutability":"mutable","name":"b","nameLocation":"841:1:16","nodeType":"VariableDeclaration","scope":1965,"src":"833:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1946,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:16"},"returnParameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1965,"src":"867:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1949,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:16"},"scope":2764,"src":"805:153:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1989,"nodeType":"Block","src":"1228:123:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1975,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"1316:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1979,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"1330:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1982,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1983,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"1339:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:16","trueExpression":{"hexValue":"30","id":1978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1974,"id":1988,"nodeType":"Return","src":"1309:35:16"}]},"documentation":{"id":1966,"nodeType":"StructuredDocumentation","src":"964:188:16","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1990,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:16","nodeType":"FunctionDefinition","parameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"a","nameLocation":"1182:1:16","nodeType":"VariableDeclaration","scope":1990,"src":"1174:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1970,"mutability":"mutable","name":"b","nameLocation":"1193:1:16","nodeType":"VariableDeclaration","scope":1990,"src":"1185:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:16"},"returnParameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1990,"src":"1219:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1972,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:16"},"scope":2764,"src":"1157:194:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2111,"nodeType":"Block","src":"1795:3797:16","statements":[{"id":2110,"nodeType":"UncheckedBlock","src":"1805:3781:16","statements":[{"assignments":[2003],"declarations":[{"constant":false,"id":2003,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:16","nodeType":"VariableDeclaration","scope":2110,"src":"2126:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2002,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2004,"nodeType":"VariableDeclarationStatement","src":"2126:13:16"},{"assignments":[2006],"declarations":[{"constant":false,"id":2006,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:16","nodeType":"VariableDeclaration","scope":2110,"src":"2198:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2007,"nodeType":"VariableDeclarationStatement","src":"2198:13:16"},{"AST":{"nodeType":"YulBlock","src":"2278:157:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:16"},"nodeType":"YulFunctionCall","src":"2319:6:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:16"},"nodeType":"YulFunctionCall","src":"2306:20:16"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:16","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:16"},"nodeType":"YulFunctionCall","src":"2352:9:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:16"}]},{"nodeType":"YulAssignment","src":"2378:43:16","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:16"},"nodeType":"YulFunctionCall","src":"2391:14:16"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:16"},"nodeType":"YulFunctionCall","src":"2407:13:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:16"},"nodeType":"YulFunctionCall","src":"2387:34:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2003,"isOffset":false,"isSlot":false,"src":"2343:5:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"2399:5:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"2414:5:16","valueSize":1},{"declaration":2006,"isOffset":false,"isSlot":false,"src":"2378:5:16","valueSize":1},{"declaration":1993,"isOffset":false,"isSlot":false,"src":"2313:1:16","valueSize":1},{"declaration":1993,"isOffset":false,"isSlot":false,"src":"2356:1:16","valueSize":1},{"declaration":1995,"isOffset":false,"isSlot":false,"src":"2316:1:16","valueSize":1},{"declaration":1995,"isOffset":false,"isSlot":false,"src":"2359:1:16","valueSize":1}],"id":2008,"nodeType":"InlineAssembly","src":"2269:166:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2009,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"2516:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2017,"nodeType":"IfStatement","src":"2512:75:16","trueBody":{"id":2016,"nodeType":"Block","src":"2528:59:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2012,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"2553:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2013,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"2561:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2001,"id":2015,"nodeType":"Return","src":"2546:26:16"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"2697:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2020,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"2711:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2018,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2023,"nodeType":"ExpressionStatement","src":"2689:28:16"},{"assignments":[2025],"declarations":[{"constant":false,"id":2025,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:16","nodeType":"VariableDeclaration","scope":2110,"src":"2973:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2026,"nodeType":"VariableDeclarationStatement","src":"2973:17:16"},{"AST":{"nodeType":"YulBlock","src":"3013:291:16","statements":[{"nodeType":"YulAssignment","src":"3082:38:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:16"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:16"},"nodeType":"YulFunctionCall","src":"3095:25:16"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:16"}]},{"nodeType":"YulAssignment","src":"3202:41:16","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:16"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:16"},"nodeType":"YulFunctionCall","src":"3222:20:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:16"},"nodeType":"YulFunctionCall","src":"3211:32:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:16"}]},{"nodeType":"YulAssignment","src":"3260:30:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:16"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:16"},"nodeType":"YulFunctionCall","src":"3269:21:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1997,"isOffset":false,"isSlot":false,"src":"3108:11:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"3236:5:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"3260:5:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"3273:5:16","valueSize":1},{"declaration":2006,"isOffset":false,"isSlot":false,"src":"3202:5:16","valueSize":1},{"declaration":2006,"isOffset":false,"isSlot":false,"src":"3215:5:16","valueSize":1},{"declaration":2025,"isOffset":false,"isSlot":false,"src":"3082:9:16","valueSize":1},{"declaration":2025,"isOffset":false,"isSlot":false,"src":"3225:9:16","valueSize":1},{"declaration":2025,"isOffset":false,"isSlot":false,"src":"3280:9:16","valueSize":1},{"declaration":1993,"isOffset":false,"isSlot":false,"src":"3102:1:16","valueSize":1},{"declaration":1995,"isOffset":false,"isSlot":false,"src":"3105:1:16","valueSize":1}],"id":2027,"nodeType":"InlineAssembly","src":"3004:300:16"},{"assignments":[2029],"declarations":[{"constant":false,"id":2029,"mutability":"mutable","name":"twos","nameLocation":"3619:4:16","nodeType":"VariableDeclaration","scope":2110,"src":"3611:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2037,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2030,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"3626:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:16","subExpression":{"id":2031,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"3642:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:16"},{"AST":{"nodeType":"YulBlock","src":"3681:362:16","statements":[{"nodeType":"YulAssignment","src":"3746:37:16","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:16"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:16"},"nodeType":"YulFunctionCall","src":"3761:22:16"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:16"}]},{"nodeType":"YulAssignment","src":"3850:25:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:16"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:16"},"nodeType":"YulFunctionCall","src":"3859:16:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:16"}]},{"nodeType":"YulAssignment","src":"3990:39:16","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:16","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:16"},"nodeType":"YulFunctionCall","src":"4006:12:16"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:16"},"nodeType":"YulFunctionCall","src":"4002:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:16"},"nodeType":"YulFunctionCall","src":"3998:31:16"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:16"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1997,"isOffset":false,"isSlot":false,"src":"3746:11:16","valueSize":1},{"declaration":1997,"isOffset":false,"isSlot":false,"src":"3765:11:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"3850:5:16","valueSize":1},{"declaration":2003,"isOffset":false,"isSlot":false,"src":"3863:5:16","valueSize":1},{"declaration":2029,"isOffset":false,"isSlot":false,"src":"3778:4:16","valueSize":1},{"declaration":2029,"isOffset":false,"isSlot":false,"src":"3870:4:16","valueSize":1},{"declaration":2029,"isOffset":false,"isSlot":false,"src":"3990:4:16","valueSize":1},{"declaration":2029,"isOffset":false,"isSlot":false,"src":"4013:4:16","valueSize":1},{"declaration":2029,"isOffset":false,"isSlot":false,"src":"4020:4:16","valueSize":1}],"id":2038,"nodeType":"InlineAssembly","src":"3672:371:16"},{"expression":{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2039,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"4109:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2040,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"4118:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2041,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"4126:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2044,"nodeType":"ExpressionStatement","src":"4109:21:16"},{"assignments":[2046],"declarations":[{"constant":false,"id":2046,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:16","nodeType":"VariableDeclaration","scope":2110,"src":"4448:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2045,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2053,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2048,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4471:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2050,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:16"},{"expression":{"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2054,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4704:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2056,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4719:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2057,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4733:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2061,"nodeType":"ExpressionStatement","src":"4704:36:16"},{"expression":{"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2062,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4773:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4788:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2065,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4802:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2069,"nodeType":"ExpressionStatement","src":"4773:36:16"},{"expression":{"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2070,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4843:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2072,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4858:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2073,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4872:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2077,"nodeType":"ExpressionStatement","src":"4843:36:16"},{"expression":{"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2078,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4913:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2080,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4928:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2081,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4942:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2085,"nodeType":"ExpressionStatement","src":"4913:36:16"},{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2086,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4983:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2088,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4998:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2089,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5012:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2093,"nodeType":"ExpressionStatement","src":"4983:36:16"},{"expression":{"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2094,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5054:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2096,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"5069:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2097,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5083:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2101,"nodeType":"ExpressionStatement","src":"5054:36:16"},{"expression":{"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2102,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"5524:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2103,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"5533:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2104,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5541:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2107,"nodeType":"ExpressionStatement","src":"5524:24:16"},{"expression":{"id":2108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"5569:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2001,"id":2109,"nodeType":"Return","src":"5562:13:16"}]}]},"documentation":{"id":1991,"nodeType":"StructuredDocumentation","src":"1357:305:16","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2112,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:16","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"x","nameLocation":"1700:1:16","nodeType":"VariableDeclaration","scope":2112,"src":"1692:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1992,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1995,"mutability":"mutable","name":"y","nameLocation":"1719:1:16","nodeType":"VariableDeclaration","scope":2112,"src":"1711:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:16","nodeType":"VariableDeclaration","scope":2112,"src":"1730:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:16"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"result","nameLocation":"1787:6:16","nodeType":"VariableDeclaration","scope":2112,"src":"1779:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1999,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:16"},"scope":2764,"src":"1667:3925:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2155,"nodeType":"Block","src":"5872:189:16","statements":[{"assignments":[2128],"declarations":[{"constant":false,"id":2128,"mutability":"mutable","name":"result","nameLocation":"5890:6:16","nodeType":"VariableDeclaration","scope":2155,"src":"5882:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2134,"initialValue":{"arguments":[{"id":2130,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5906:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2131,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"5909:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2132,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"5912:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2129,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2112,2156],"referencedDeclaration":2112,"src":"5899:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2135,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"5938:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2136,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5950:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1906_$","typeString":"type(enum Math.Rounding)"}},"id":2137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1904,"src":"5950:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"src":"5938:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2140,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"5972:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2141,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"5975:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2142,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"5978:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2139,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:16","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2152,"nodeType":"IfStatement","src":"5934:98:16","trueBody":{"id":2151,"nodeType":"Block","src":"5996:36:16","statements":[{"expression":{"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"6010:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ExpressionStatement","src":"6010:11:16"}]}},{"expression":{"id":2153,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"6048:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2126,"id":2154,"nodeType":"Return","src":"6041:13:16"}]},"documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"5598:121:16","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2156,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:16","nodeType":"FunctionDefinition","parameters":{"id":2123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"x","nameLocation":"5757:1:16","nodeType":"VariableDeclaration","scope":2156,"src":"5749:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"y","nameLocation":"5776:1:16","nodeType":"VariableDeclaration","scope":2156,"src":"5768:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:16","nodeType":"VariableDeclaration","scope":2156,"src":"5787:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2122,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:16","nodeType":"VariableDeclaration","scope":2156,"src":"5816:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"typeName":{"id":2121,"nodeType":"UserDefinedTypeName","pathNode":{"id":2120,"name":"Rounding","nameLocations":["5816:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1906,"src":"5816:8:16"},"referencedDeclaration":1906,"src":"5816:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:16"},"returnParameters":{"id":2126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2156,"src":"5863:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:16"},"scope":2764,"src":"5724:337:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2267,"nodeType":"Block","src":"6337:1585:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"6351:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2170,"nodeType":"IfStatement","src":"6347:45:16","trueBody":{"id":2169,"nodeType":"Block","src":"6359:33:16","statements":[{"expression":{"hexValue":"30","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2163,"id":2168,"nodeType":"Return","src":"6373:8:16"}]}},{"assignments":[2172],"declarations":[{"constant":false,"id":2172,"mutability":"mutable","name":"result","nameLocation":"7079:6:16","nodeType":"VariableDeclaration","scope":2267,"src":"7071:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2171,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2181,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2175,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7099:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2174,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2436,2472],"referencedDeclaration":2436,"src":"7094:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:16"},{"id":2266,"nodeType":"UncheckedBlock","src":"7508:408:16","statements":[{"expression":{"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7532:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7542:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7551:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7555:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2188,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2192,"nodeType":"ExpressionStatement","src":"7532:35:16"},{"expression":{"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7581:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7591:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7600:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2196,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7604:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2203,"nodeType":"ExpressionStatement","src":"7581:35:16"},{"expression":{"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7630:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7640:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7649:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7653:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2214,"nodeType":"ExpressionStatement","src":"7630:35:16"},{"expression":{"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2215,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7679:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7689:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2217,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7698:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2218,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7702:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2221,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2225,"nodeType":"ExpressionStatement","src":"7679:35:16"},{"expression":{"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2226,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7728:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7738:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7747:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7751:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2232,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2236,"nodeType":"ExpressionStatement","src":"7728:35:16"},{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7777:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7787:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7796:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7800:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"7777:35:16"},{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7826:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2249,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7836:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7845:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2251,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7849:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2254,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"7826:35:16"},{"expression":{"arguments":[{"id":2260,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7886:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2261,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"7894:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2262,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7898:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2259,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"7882:3:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2163,"id":2265,"nodeType":"Return","src":"7875:30:16"}]}]},"documentation":{"id":2157,"nodeType":"StructuredDocumentation","src":"6067:208:16","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2268,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:16","nodeType":"FunctionDefinition","parameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2159,"mutability":"mutable","name":"a","nameLocation":"6302:1:16","nodeType":"VariableDeclaration","scope":2268,"src":"6294:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:16"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2268,"src":"6328:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2161,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:16"},"scope":2764,"src":"6280:1642:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2303,"nodeType":"Block","src":"8098:161:16","statements":[{"id":2302,"nodeType":"UncheckedBlock","src":"8108:145:16","statements":[{"assignments":[2280],"declarations":[{"constant":false,"id":2280,"mutability":"mutable","name":"result","nameLocation":"8140:6:16","nodeType":"VariableDeclaration","scope":2302,"src":"8132:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2284,"initialValue":{"arguments":[{"id":2282,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"8154:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2281,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2268,2304],"referencedDeclaration":2268,"src":"8149:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"8177:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2286,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"8187:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2287,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"8199:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1906_$","typeString":"type(enum Math.Rounding)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1904,"src":"8199:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"src":"8187:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"8214:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2291,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"8223:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"8232:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:16","trueExpression":{"hexValue":"31","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2299,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2278,"id":2301,"nodeType":"Return","src":"8170:72:16"}]}]},"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"7928:89:16","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2304,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:16","nodeType":"FunctionDefinition","parameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"a","nameLocation":"8044:1:16","nodeType":"VariableDeclaration","scope":2304,"src":"8036:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2274,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:16","nodeType":"VariableDeclaration","scope":2304,"src":"8047:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"typeName":{"id":2273,"nodeType":"UserDefinedTypeName","pathNode":{"id":2272,"name":"Rounding","nameLocations":["8047:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1906,"src":"8047:8:16"},"referencedDeclaration":1906,"src":"8047:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:16"},"returnParameters":{"id":2278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2304,"src":"8089:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:16"},"scope":2764,"src":"8022:237:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2435,"nodeType":"Block","src":"8444:922:16","statements":[{"assignments":[2313],"declarations":[{"constant":false,"id":2313,"mutability":"mutable","name":"result","nameLocation":"8462:6:16","nodeType":"VariableDeclaration","scope":2435,"src":"8454:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2312,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2315,"initialValue":{"hexValue":"30","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:16"},{"id":2432,"nodeType":"UncheckedBlock","src":"8482:855:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8510:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2330,"nodeType":"IfStatement","src":"8506:99:16","trueBody":{"id":2329,"nodeType":"Block","src":"8528:77:16","statements":[{"expression":{"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2321,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8546:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2324,"nodeType":"ExpressionStatement","src":"8546:13:16"},{"expression":{"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"8577:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2328,"nodeType":"ExpressionStatement","src":"8577:13:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8622:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2345,"nodeType":"IfStatement","src":"8618:96:16","trueBody":{"id":2344,"nodeType":"Block","src":"8639:75:16","statements":[{"expression":{"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2336,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8657:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"nodeType":"ExpressionStatement","src":"8657:12:16"},{"expression":{"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2340,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"8687:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2343,"nodeType":"ExpressionStatement","src":"8687:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8731:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2360,"nodeType":"IfStatement","src":"8727:96:16","trueBody":{"id":2359,"nodeType":"Block","src":"8748:75:16","statements":[{"expression":{"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8766:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2354,"nodeType":"ExpressionStatement","src":"8766:12:16"},{"expression":{"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2355,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"8796:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2358,"nodeType":"ExpressionStatement","src":"8796:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8840:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2375,"nodeType":"IfStatement","src":"8836:96:16","trueBody":{"id":2374,"nodeType":"Block","src":"8857:75:16","statements":[{"expression":{"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8875:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2369,"nodeType":"ExpressionStatement","src":"8875:12:16"},{"expression":{"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"8905:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2373,"nodeType":"ExpressionStatement","src":"8905:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2376,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8949:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2390,"nodeType":"IfStatement","src":"8945:93:16","trueBody":{"id":2389,"nodeType":"Block","src":"8965:73:16","statements":[{"expression":{"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"8983:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2384,"nodeType":"ExpressionStatement","src":"8983:11:16"},{"expression":{"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2385,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"9012:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2388,"nodeType":"ExpressionStatement","src":"9012:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9055:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2405,"nodeType":"IfStatement","src":"9051:93:16","trueBody":{"id":2404,"nodeType":"Block","src":"9071:73:16","statements":[{"expression":{"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9089:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2399,"nodeType":"ExpressionStatement","src":"9089:11:16"},{"expression":{"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2400,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"9118:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2403,"nodeType":"ExpressionStatement","src":"9118:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9161:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2420,"nodeType":"IfStatement","src":"9157:93:16","trueBody":{"id":2419,"nodeType":"Block","src":"9177:73:16","statements":[{"expression":{"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9195:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2414,"nodeType":"ExpressionStatement","src":"9195:11:16"},{"expression":{"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2415,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"9224:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2418,"nodeType":"ExpressionStatement","src":"9224:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9267:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2431,"nodeType":"IfStatement","src":"9263:64:16","trueBody":{"id":2430,"nodeType":"Block","src":"9283:44:16","statements":[{"expression":{"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"9301:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2429,"nodeType":"ExpressionStatement","src":"9301:11:16"}]}}]},{"expression":{"id":2433,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"9353:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2311,"id":2434,"nodeType":"Return","src":"9346:13:16"}]},"documentation":{"id":2305,"nodeType":"StructuredDocumentation","src":"8265:113:16","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2436,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:16","nodeType":"FunctionDefinition","parameters":{"id":2308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2307,"mutability":"mutable","name":"value","nameLocation":"8405:5:16","nodeType":"VariableDeclaration","scope":2436,"src":"8397:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:16"},"returnParameters":{"id":2311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2436,"src":"8435:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2309,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:16"},"scope":2764,"src":"8383:983:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2471,"nodeType":"Block","src":"9599:165:16","statements":[{"id":2470,"nodeType":"UncheckedBlock","src":"9609:149:16","statements":[{"assignments":[2448],"declarations":[{"constant":false,"id":2448,"mutability":"mutable","name":"result","nameLocation":"9641:6:16","nodeType":"VariableDeclaration","scope":2470,"src":"9633:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2447,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2452,"initialValue":{"arguments":[{"id":2450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"9655:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2449,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2436,2472],"referencedDeclaration":2436,"src":"9650:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2453,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9682:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2454,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"9692:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2455,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"9704:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1906_$","typeString":"type(enum Math.Rounding)"}},"id":2456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1904,"src":"9704:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"src":"9692:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9724:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"9733:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:16","trueExpression":{"hexValue":"31","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2446,"id":2469,"nodeType":"Return","src":"9675:72:16"}]}]},"documentation":{"id":2437,"nodeType":"StructuredDocumentation","src":"9372:142:16","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2472,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:16","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"value","nameLocation":"9541:5:16","nodeType":"VariableDeclaration","scope":2472,"src":"9533:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:16","nodeType":"VariableDeclaration","scope":2472,"src":"9548:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"typeName":{"id":2441,"nodeType":"UserDefinedTypeName","pathNode":{"id":2440,"name":"Rounding","nameLocations":["9548:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1906,"src":"9548:8:16"},"referencedDeclaration":1906,"src":"9548:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:16"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2472,"src":"9590:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:16"},"scope":2764,"src":"9519:245:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2600,"nodeType":"Block","src":"9951:828:16","statements":[{"assignments":[2481],"declarations":[{"constant":false,"id":2481,"mutability":"mutable","name":"result","nameLocation":"9969:6:16","nodeType":"VariableDeclaration","scope":2600,"src":"9961:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2483,"initialValue":{"hexValue":"30","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:16"},{"id":2597,"nodeType":"UncheckedBlock","src":"9989:761:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10017:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2500,"nodeType":"IfStatement","src":"10013:99:16","trueBody":{"id":2499,"nodeType":"Block","src":"10034:78:16","statements":[{"expression":{"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10052:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2494,"nodeType":"ExpressionStatement","src":"10052:15:16"},{"expression":{"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2495,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10085:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2498,"nodeType":"ExpressionStatement","src":"10085:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10129:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2517,"nodeType":"IfStatement","src":"10125:99:16","trueBody":{"id":2516,"nodeType":"Block","src":"10146:78:16","statements":[{"expression":{"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10164:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2511,"nodeType":"ExpressionStatement","src":"10164:15:16"},{"expression":{"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10197:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2515,"nodeType":"ExpressionStatement","src":"10197:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10241:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2534,"nodeType":"IfStatement","src":"10237:99:16","trueBody":{"id":2533,"nodeType":"Block","src":"10258:78:16","statements":[{"expression":{"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10276:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2528,"nodeType":"ExpressionStatement","src":"10276:15:16"},{"expression":{"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2529,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10309:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2532,"nodeType":"ExpressionStatement","src":"10309:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2535,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10353:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2551,"nodeType":"IfStatement","src":"10349:96:16","trueBody":{"id":2550,"nodeType":"Block","src":"10369:76:16","statements":[{"expression":{"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2540,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10387:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2545,"nodeType":"ExpressionStatement","src":"10387:14:16"},{"expression":{"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10419:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2549,"nodeType":"ExpressionStatement","src":"10419:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10462:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2568,"nodeType":"IfStatement","src":"10458:96:16","trueBody":{"id":2567,"nodeType":"Block","src":"10478:76:16","statements":[{"expression":{"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10496:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2562,"nodeType":"ExpressionStatement","src":"10496:14:16"},{"expression":{"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2563,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10528:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2566,"nodeType":"ExpressionStatement","src":"10528:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10571:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2585,"nodeType":"IfStatement","src":"10567:96:16","trueBody":{"id":2584,"nodeType":"Block","src":"10587:76:16","statements":[{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10605:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"nodeType":"ExpressionStatement","src":"10605:14:16"},{"expression":{"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10637:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2583,"nodeType":"ExpressionStatement","src":"10637:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"10680:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2596,"nodeType":"IfStatement","src":"10676:64:16","trueBody":{"id":2595,"nodeType":"Block","src":"10696:44:16","statements":[{"expression":{"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2591,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10714:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2594,"nodeType":"ExpressionStatement","src":"10714:11:16"}]}}]},{"expression":{"id":2598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"10766:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2479,"id":2599,"nodeType":"Return","src":"10759:13:16"}]},"documentation":{"id":2473,"nodeType":"StructuredDocumentation","src":"9770:114:16","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2601,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:16","nodeType":"FunctionDefinition","parameters":{"id":2476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2475,"mutability":"mutable","name":"value","nameLocation":"9912:5:16","nodeType":"VariableDeclaration","scope":2601,"src":"9904:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2474,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:16"},"returnParameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2601,"src":"9942:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:16"},"scope":2764,"src":"9889:890:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2636,"nodeType":"Block","src":"11014:165:16","statements":[{"id":2635,"nodeType":"UncheckedBlock","src":"11024:149:16","statements":[{"assignments":[2613],"declarations":[{"constant":false,"id":2613,"mutability":"mutable","name":"result","nameLocation":"11056:6:16","nodeType":"VariableDeclaration","scope":2635,"src":"11048:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2612,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2617,"initialValue":{"arguments":[{"id":2615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"11071:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2614,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2601,2637],"referencedDeclaration":2601,"src":"11065:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"11098:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2619,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"11108:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2620,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"11120:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1906_$","typeString":"type(enum Math.Rounding)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1904,"src":"11120:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"src":"11108:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"11139:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2626,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"11148:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:16","trueExpression":{"hexValue":"31","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2611,"id":2634,"nodeType":"Return","src":"11091:71:16"}]}]},"documentation":{"id":2602,"nodeType":"StructuredDocumentation","src":"10785:143:16","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2637,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:16","nodeType":"FunctionDefinition","parameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"value","nameLocation":"10956:5:16","nodeType":"VariableDeclaration","scope":2637,"src":"10948:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2607,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:16","nodeType":"VariableDeclaration","scope":2637,"src":"10963:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"typeName":{"id":2606,"nodeType":"UserDefinedTypeName","pathNode":{"id":2605,"name":"Rounding","nameLocations":["10963:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1906,"src":"10963:8:16"},"referencedDeclaration":1906,"src":"10963:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:16"},"returnParameters":{"id":2611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2637,"src":"11005:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2609,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:16"},"scope":2764,"src":"10933:246:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2723,"nodeType":"Block","src":"11493:600:16","statements":[{"assignments":[2646],"declarations":[{"constant":false,"id":2646,"mutability":"mutable","name":"result","nameLocation":"11511:6:16","nodeType":"VariableDeclaration","scope":2723,"src":"11503:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2645,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2648,"initialValue":{"hexValue":"30","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:16"},{"id":2720,"nodeType":"UncheckedBlock","src":"11531:533:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11559:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2663,"nodeType":"IfStatement","src":"11555:98:16","trueBody":{"id":2662,"nodeType":"Block","src":"11577:76:16","statements":[{"expression":{"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11595:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2657,"nodeType":"ExpressionStatement","src":"11595:13:16"},{"expression":{"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"11626:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2661,"nodeType":"ExpressionStatement","src":"11626:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11670:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2678,"nodeType":"IfStatement","src":"11666:95:16","trueBody":{"id":2677,"nodeType":"Block","src":"11687:74:16","statements":[{"expression":{"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11705:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2672,"nodeType":"ExpressionStatement","src":"11705:12:16"},{"expression":{"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"11735:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2676,"nodeType":"ExpressionStatement","src":"11735:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11778:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2693,"nodeType":"IfStatement","src":"11774:95:16","trueBody":{"id":2692,"nodeType":"Block","src":"11795:74:16","statements":[{"expression":{"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11813:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2687,"nodeType":"ExpressionStatement","src":"11813:12:16"},{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"11843:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ExpressionStatement","src":"11843:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11886:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2708,"nodeType":"IfStatement","src":"11882:95:16","trueBody":{"id":2707,"nodeType":"Block","src":"11903:74:16","statements":[{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11921:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2702,"nodeType":"ExpressionStatement","src":"11921:12:16"},{"expression":{"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"11951:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2706,"nodeType":"ExpressionStatement","src":"11951:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"11994:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2719,"nodeType":"IfStatement","src":"11990:64:16","trueBody":{"id":2718,"nodeType":"Block","src":"12010:44:16","statements":[{"expression":{"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2714,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"12028:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2717,"nodeType":"ExpressionStatement","src":"12028:11:16"}]}}]},{"expression":{"id":2721,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"12080:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2644,"id":2722,"nodeType":"Return","src":"12073:13:16"}]},"documentation":{"id":2638,"nodeType":"StructuredDocumentation","src":"11185:240:16","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2724,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:16","nodeType":"FunctionDefinition","parameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"value","nameLocation":"11454:5:16","nodeType":"VariableDeclaration","scope":2724,"src":"11446:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:16"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2724,"src":"11484:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:16"},"scope":2764,"src":"11430:663:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2762,"nodeType":"Block","src":"12329:173:16","statements":[{"id":2761,"nodeType":"UncheckedBlock","src":"12339:157:16","statements":[{"assignments":[2736],"declarations":[{"constant":false,"id":2736,"mutability":"mutable","name":"result","nameLocation":"12371:6:16","nodeType":"VariableDeclaration","scope":2761,"src":"12363:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2735,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2740,"initialValue":{"arguments":[{"id":2738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"12387:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2737,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2724,2763],"referencedDeclaration":2724,"src":"12380:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"12414:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2742,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"12424:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2743,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"12436:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1906_$","typeString":"type(enum Math.Rounding)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1904,"src":"12436:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"src":"12424:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"12457:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2750,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"12471:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:16","trueExpression":{"hexValue":"31","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2758,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2734,"id":2760,"nodeType":"Return","src":"12407:78:16"}]}]},"documentation":{"id":2725,"nodeType":"StructuredDocumentation","src":"12099:143:16","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2763,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:16","nodeType":"FunctionDefinition","parameters":{"id":2731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"value","nameLocation":"12271:5:16","nodeType":"VariableDeclaration","scope":2763,"src":"12263:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:16","nodeType":"VariableDeclaration","scope":2763,"src":"12278:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"},"typeName":{"id":2729,"nodeType":"UserDefinedTypeName","pathNode":{"id":2728,"name":"Rounding","nameLocations":["12278:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":1906,"src":"12278:8:16"},"referencedDeclaration":1906,"src":"12278:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1906","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:16"},"returnParameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2763,"src":"12320:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:16"},"scope":2764,"src":"12247:255:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2765,"src":"202:12302:16","usedErrors":[]}],"src":"103:12402:16"},"id":16},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[3377]},"id":3378,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2766,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"230:1090:17","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":3377,"linearizedBaseContracts":[3377],"name":"EnumerableSet","nameLocation":"1329:13:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":2775,"members":[{"constant":false,"id":2770,"mutability":"mutable","name":"_values","nameLocation":"1853:7:17","nodeType":"VariableDeclaration","scope":2775,"src":"1843:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1843:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2769,"nodeType":"ArrayTypeName","src":"1843:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2774,"mutability":"mutable","name":"_indexes","nameLocation":"2021:8:17","nodeType":"VariableDeclaration","scope":2775,"src":"1993:36:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2773,"keyType":{"id":2771,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2001:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1993:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":2772,"name":"uint256","nodeType":"ElementaryTypeName","src":"2012:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1796:3:17","nodeType":"StructDefinition","scope":3377,"src":"1789:247:17","visibility":"public"},{"body":{"id":2816,"nodeType":"Block","src":"2275:335:17","statements":[{"condition":{"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2289:22:17","subExpression":{"arguments":[{"id":2787,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"2300:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":2788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"2305:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2786,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"2290:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2814,"nodeType":"Block","src":"2567:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2588:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2785,"id":2813,"nodeType":"Return","src":"2581:12:17"}]},"id":2815,"nodeType":"IfStatement","src":"2285:319:17","trueBody":{"id":2811,"nodeType":"Block","src":"2313:248:17","statements":[{"expression":{"arguments":[{"id":2796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"2344:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":2791,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"2327:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2331:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"2327:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2339:4:17","memberName":"push","nodeType":"MemberAccess","src":"2327:16:17","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2327:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2798,"nodeType":"ExpressionStatement","src":"2327:23:17"},{"expression":{"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2799,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"2485:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2489:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2774,"src":"2485:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2803,"indexExpression":{"id":2801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"2498:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2485:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":2804,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"2507:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2805,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2511:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"2507:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2519:6:17","memberName":"length","nodeType":"MemberAccess","src":"2507:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2485:40:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2808,"nodeType":"ExpressionStatement","src":"2485:40:17"},{"expression":{"hexValue":"74727565","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2546:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2785,"id":2810,"nodeType":"Return","src":"2539:11:17"}]}}]},"documentation":{"id":2776,"nodeType":"StructuredDocumentation","src":"2042:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2817,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2215:4:17","nodeType":"FunctionDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"set","nameLocation":"2232:3:17","nodeType":"VariableDeclaration","scope":2817,"src":"2220:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2778,"nodeType":"UserDefinedTypeName","pathNode":{"id":2777,"name":"Set","nameLocations":["2220:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"2220:3:17"},"referencedDeclaration":2775,"src":"2220:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"value","nameLocation":"2245:5:17","nodeType":"VariableDeclaration","scope":2817,"src":"2237:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2780,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2237:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2219:32:17"},"returnParameters":{"id":2785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2817,"src":"2269:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2783,"name":"bool","nodeType":"ElementaryTypeName","src":"2269:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2268:6:17"},"scope":3377,"src":"2206:404:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2900,"nodeType":"Block","src":"2850:1316:17","statements":[{"assignments":[2829],"declarations":[{"constant":false,"id":2829,"mutability":"mutable","name":"valueIndex","nameLocation":"2968:10:17","nodeType":"VariableDeclaration","scope":2900,"src":"2960:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"2960:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2834,"initialValue":{"baseExpression":{"expression":{"id":2830,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"2981:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2831,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2985:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2774,"src":"2981:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2833,"indexExpression":{"id":2832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"2994:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2981:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2960:40:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2835,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3015:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3029:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3015:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2898,"nodeType":"Block","src":"4123:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4144:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2827,"id":2897,"nodeType":"Return","src":"4137:12:17"}]},"id":2899,"nodeType":"IfStatement","src":"3011:1149:17","trueBody":{"id":2895,"nodeType":"Block","src":"3032:1085:17","statements":[{"assignments":[2839],"declarations":[{"constant":false,"id":2839,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3392:13:17","nodeType":"VariableDeclaration","scope":2895,"src":"3384:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"3384:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2843,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2840,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3408:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3421:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3408:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3384:38:17"},{"assignments":[2845],"declarations":[{"constant":false,"id":2845,"mutability":"mutable","name":"lastIndex","nameLocation":"3444:9:17","nodeType":"VariableDeclaration","scope":2895,"src":"3436:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"3436:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2851,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2846,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3456:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3460:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"3456:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3468:6:17","memberName":"length","nodeType":"MemberAccess","src":"3456:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3477:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3456:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3436:42:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2852,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"3497:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2853,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"3510:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3497:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2879,"nodeType":"IfStatement","src":"3493:398:17","trueBody":{"id":2878,"nodeType":"Block","src":"3525:366:17","statements":[{"assignments":[2856],"declarations":[{"constant":false,"id":2856,"mutability":"mutable","name":"lastValue","nameLocation":"3551:9:17","nodeType":"VariableDeclaration","scope":2878,"src":"3543:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3543:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2861,"initialValue":{"baseExpression":{"expression":{"id":2857,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3563:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2858,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3567:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"3563:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2860,"indexExpression":{"id":2859,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"3575:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3563:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3543:42:17"},{"expression":{"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2862,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3685:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2865,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3689:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"3685:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2866,"indexExpression":{"id":2864,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"3697:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3685:26:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2867,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"3714:9:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3685:38:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2869,"nodeType":"ExpressionStatement","src":"3685:38:17"},{"expression":{"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2870,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3797:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2873,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3801:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2774,"src":"3797:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2874,"indexExpression":{"id":2872,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"3810:9:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3797:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2875,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3823:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3797:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2877,"nodeType":"ExpressionStatement","src":"3797:36:17"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2880,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3969:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2883,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3973:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"3969:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3981:3:17","memberName":"pop","nodeType":"MemberAccess","src":"3969:15:17","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3969:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2886,"nodeType":"ExpressionStatement","src":"3969:17:17"},{"expression":{"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4054:26:17","subExpression":{"baseExpression":{"expression":{"id":2887,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"4061:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4065:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2774,"src":"4061:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2890,"indexExpression":{"id":2889,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"4074:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4061:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2892,"nodeType":"ExpressionStatement","src":"4054:26:17"},{"expression":{"hexValue":"74727565","id":2893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4102:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2827,"id":2894,"nodeType":"Return","src":"4095:11:17"}]}}]},"documentation":{"id":2818,"nodeType":"StructuredDocumentation","src":"2616:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2901,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2787:7:17","nodeType":"FunctionDefinition","parameters":{"id":2824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"set","nameLocation":"2807:3:17","nodeType":"VariableDeclaration","scope":2901,"src":"2795:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2820,"nodeType":"UserDefinedTypeName","pathNode":{"id":2819,"name":"Set","nameLocations":["2795:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"2795:3:17"},"referencedDeclaration":2775,"src":"2795:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2823,"mutability":"mutable","name":"value","nameLocation":"2820:5:17","nodeType":"VariableDeclaration","scope":2901,"src":"2812:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2812:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2794:32:17"},"returnParameters":{"id":2827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2826,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2901,"src":"2844:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2825,"name":"bool","nodeType":"ElementaryTypeName","src":"2844:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2843:6:17"},"scope":3377,"src":"2778:1388:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2919,"nodeType":"Block","src":"4326:48:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2912,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"4343:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2913,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4347:8:17","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2774,"src":"4343:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2915,"indexExpression":{"id":2914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"4356:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4343:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4366:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4343:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2911,"id":2918,"nodeType":"Return","src":"4336:31:17"}]},"documentation":{"id":2902,"nodeType":"StructuredDocumentation","src":"4172:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":2920,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4256:9:17","nodeType":"FunctionDefinition","parameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2905,"mutability":"mutable","name":"set","nameLocation":"4278:3:17","nodeType":"VariableDeclaration","scope":2920,"src":"4266:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2904,"nodeType":"UserDefinedTypeName","pathNode":{"id":2903,"name":"Set","nameLocations":["4266:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"4266:3:17"},"referencedDeclaration":2775,"src":"4266:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2907,"mutability":"mutable","name":"value","nameLocation":"4291:5:17","nodeType":"VariableDeclaration","scope":2920,"src":"4283:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2906,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4283:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4265:32:17"},"returnParameters":{"id":2911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2920,"src":"4320:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2909,"name":"bool","nodeType":"ElementaryTypeName","src":"4320:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4319:6:17"},"scope":3377,"src":"4247:127:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2933,"nodeType":"Block","src":"4520:42:17","statements":[{"expression":{"expression":{"expression":{"id":2929,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"4537:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4541:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"4537:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4549:6:17","memberName":"length","nodeType":"MemberAccess","src":"4537:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2928,"id":2932,"nodeType":"Return","src":"4530:25:17"}]},"documentation":{"id":2921,"nodeType":"StructuredDocumentation","src":"4380:70:17","text":" @dev Returns the number of values on the set. O(1)."},"id":2934,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4464:7:17","nodeType":"FunctionDefinition","parameters":{"id":2925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2924,"mutability":"mutable","name":"set","nameLocation":"4484:3:17","nodeType":"VariableDeclaration","scope":2934,"src":"4472:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2923,"nodeType":"UserDefinedTypeName","pathNode":{"id":2922,"name":"Set","nameLocations":["4472:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"4472:3:17"},"referencedDeclaration":2775,"src":"4472:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4471:17:17"},"returnParameters":{"id":2928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2934,"src":"4511:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2926,"name":"uint256","nodeType":"ElementaryTypeName","src":"4511:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4510:9:17"},"scope":3377,"src":"4455:107:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2950,"nodeType":"Block","src":"4980:42:17","statements":[{"expression":{"baseExpression":{"expression":{"id":2945,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"4997:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5001:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"4997:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2948,"indexExpression":{"id":2947,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"5009:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4997:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2944,"id":2949,"nodeType":"Return","src":"4990:25:17"}]},"documentation":{"id":2935,"nodeType":"StructuredDocumentation","src":"4568:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2951,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4913:3:17","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"set","nameLocation":"4929:3:17","nodeType":"VariableDeclaration","scope":2951,"src":"4917:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2937,"nodeType":"UserDefinedTypeName","pathNode":{"id":2936,"name":"Set","nameLocations":["4917:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"4917:3:17"},"referencedDeclaration":2775,"src":"4917:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"index","nameLocation":"4942:5:17","nodeType":"VariableDeclaration","scope":2951,"src":"4934:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2939,"name":"uint256","nodeType":"ElementaryTypeName","src":"4934:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4916:32:17"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2951,"src":"4971:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2942,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4971:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4970:9:17"},"scope":3377,"src":"4904:118:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2964,"nodeType":"Block","src":"5636:35:17","statements":[{"expression":{"expression":{"id":2961,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"5653:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5657:7:17","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2770,"src":"5653:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":2960,"id":2963,"nodeType":"Return","src":"5646:18:17"}]},"documentation":{"id":2952,"nodeType":"StructuredDocumentation","src":"5028:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":2965,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5571:7:17","nodeType":"FunctionDefinition","parameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"set","nameLocation":"5591:3:17","nodeType":"VariableDeclaration","scope":2965,"src":"5579:15:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2954,"nodeType":"UserDefinedTypeName","pathNode":{"id":2953,"name":"Set","nameLocations":["5579:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"5579:3:17"},"referencedDeclaration":2775,"src":"5579:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5578:17:17"},"returnParameters":{"id":2960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2965,"src":"5618:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5618:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2958,"nodeType":"ArrayTypeName","src":"5618:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5617:18:17"},"scope":3377,"src":"5562:109:17","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":2969,"members":[{"constant":false,"id":2968,"mutability":"mutable","name":"_inner","nameLocation":"5728:6:17","nodeType":"VariableDeclaration","scope":2969,"src":"5724:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2967,"nodeType":"UserDefinedTypeName","pathNode":{"id":2966,"name":"Set","nameLocations":["5724:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"5724:3:17"},"referencedDeclaration":2775,"src":"5724:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5703:10:17","nodeType":"StructDefinition","scope":3377,"src":"5696:45:17","visibility":"public"},{"body":{"id":2986,"nodeType":"Block","src":"5987:47:17","statements":[{"expression":{"arguments":[{"expression":{"id":2981,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"6009:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6013:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2968,"src":"6009:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"6021:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2980,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"6004:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6004:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2979,"id":2985,"nodeType":"Return","src":"5997:30:17"}]},"documentation":{"id":2970,"nodeType":"StructuredDocumentation","src":"5747:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2987,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5920:3:17","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"set","nameLocation":"5943:3:17","nodeType":"VariableDeclaration","scope":2987,"src":"5924:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2972,"nodeType":"UserDefinedTypeName","pathNode":{"id":2971,"name":"Bytes32Set","nameLocations":["5924:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2969,"src":"5924:10:17"},"referencedDeclaration":2969,"src":"5924:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"value","nameLocation":"5956:5:17","nodeType":"VariableDeclaration","scope":2987,"src":"5948:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5948:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5923:39:17"},"returnParameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2987,"src":"5981:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2977,"name":"bool","nodeType":"ElementaryTypeName","src":"5981:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5980:6:17"},"scope":3377,"src":"5911:123:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3004,"nodeType":"Block","src":"6281:50:17","statements":[{"expression":{"arguments":[{"expression":{"id":2999,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"6306:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3000,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6310:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2968,"src":"6306:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"6318:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2998,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"6298:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2997,"id":3003,"nodeType":"Return","src":"6291:33:17"}]},"documentation":{"id":2988,"nodeType":"StructuredDocumentation","src":"6040:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3005,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6211:6:17","nodeType":"FunctionDefinition","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2991,"mutability":"mutable","name":"set","nameLocation":"6237:3:17","nodeType":"VariableDeclaration","scope":3005,"src":"6218:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2990,"nodeType":"UserDefinedTypeName","pathNode":{"id":2989,"name":"Bytes32Set","nameLocations":["6218:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2969,"src":"6218:10:17"},"referencedDeclaration":2969,"src":"6218:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2993,"mutability":"mutable","name":"value","nameLocation":"6250:5:17","nodeType":"VariableDeclaration","scope":3005,"src":"6242:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6242:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6217:39:17"},"returnParameters":{"id":2997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3005,"src":"6275:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2995,"name":"bool","nodeType":"ElementaryTypeName","src":"6275:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6274:6:17"},"scope":3377,"src":"6202:129:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3022,"nodeType":"Block","src":"6498:52:17","statements":[{"expression":{"arguments":[{"expression":{"id":3017,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"6525:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6529:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2968,"src":"6525:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3019,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"6537:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3016,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"6515:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6515:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3015,"id":3021,"nodeType":"Return","src":"6508:35:17"}]},"documentation":{"id":3006,"nodeType":"StructuredDocumentation","src":"6337:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":3023,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6421:8:17","nodeType":"FunctionDefinition","parameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3009,"mutability":"mutable","name":"set","nameLocation":"6449:3:17","nodeType":"VariableDeclaration","scope":3023,"src":"6430:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3008,"nodeType":"UserDefinedTypeName","pathNode":{"id":3007,"name":"Bytes32Set","nameLocations":["6430:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2969,"src":"6430:10:17"},"referencedDeclaration":2969,"src":"6430:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3011,"mutability":"mutable","name":"value","nameLocation":"6462:5:17","nodeType":"VariableDeclaration","scope":3023,"src":"6454:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6454:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6429:39:17"},"returnParameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3014,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3023,"src":"6492:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3013,"name":"bool","nodeType":"ElementaryTypeName","src":"6492:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6491:6:17"},"scope":3377,"src":"6412:138:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3037,"nodeType":"Block","src":"6703:43:17","statements":[{"expression":{"arguments":[{"expression":{"id":3033,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"6728:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6732:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2968,"src":"6728:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3032,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"6720:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6720:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3031,"id":3036,"nodeType":"Return","src":"6713:26:17"}]},"documentation":{"id":3024,"nodeType":"StructuredDocumentation","src":"6556:70:17","text":" @dev Returns the number of values in the set. O(1)."},"id":3038,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6640:6:17","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3027,"mutability":"mutable","name":"set","nameLocation":"6666:3:17","nodeType":"VariableDeclaration","scope":3038,"src":"6647:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3026,"nodeType":"UserDefinedTypeName","pathNode":{"id":3025,"name":"Bytes32Set","nameLocations":["6647:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2969,"src":"6647:10:17"},"referencedDeclaration":2969,"src":"6647:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6646:24:17"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3038,"src":"6694:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"6694:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6693:9:17"},"scope":3377,"src":"6631:115:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3055,"nodeType":"Block","src":"7171:46:17","statements":[{"expression":{"arguments":[{"expression":{"id":3050,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"7192:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7196:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2968,"src":"7192:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3052,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"7204:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3049,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"7188:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7188:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3048,"id":3054,"nodeType":"Return","src":"7181:29:17"}]},"documentation":{"id":3039,"nodeType":"StructuredDocumentation","src":"6752:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3056,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7097:2:17","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3042,"mutability":"mutable","name":"set","nameLocation":"7119:3:17","nodeType":"VariableDeclaration","scope":3056,"src":"7100:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3041,"nodeType":"UserDefinedTypeName","pathNode":{"id":3040,"name":"Bytes32Set","nameLocations":["7100:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2969,"src":"7100:10:17"},"referencedDeclaration":2969,"src":"7100:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"index","nameLocation":"7132:5:17","nodeType":"VariableDeclaration","scope":3056,"src":"7124:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"7124:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7099:39:17"},"returnParameters":{"id":3048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3056,"src":"7162:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7162:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7161:9:17"},"scope":3377,"src":"7088:129:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3085,"nodeType":"Block","src":"7838:219:17","statements":[{"assignments":[3070],"declarations":[{"constant":false,"id":3070,"mutability":"mutable","name":"store","nameLocation":"7865:5:17","nodeType":"VariableDeclaration","scope":3085,"src":"7848:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7848:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3069,"nodeType":"ArrayTypeName","src":"7848:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3075,"initialValue":{"arguments":[{"expression":{"id":3072,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"7881:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7885:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2968,"src":"7881:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3071,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"7873:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7873:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7848:44:17"},{"assignments":[3080],"declarations":[{"constant":false,"id":3080,"mutability":"mutable","name":"result","nameLocation":"7919:6:17","nodeType":"VariableDeclaration","scope":3085,"src":"7902:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7902:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3079,"nodeType":"ArrayTypeName","src":"7902:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3081,"nodeType":"VariableDeclarationStatement","src":"7902:23:17"},{"AST":{"nodeType":"YulBlock","src":"7988:39:17","statements":[{"nodeType":"YulAssignment","src":"8002:15:17","value":{"name":"store","nodeType":"YulIdentifier","src":"8012:5:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8002:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3080,"isOffset":false,"isSlot":false,"src":"8002:6:17","valueSize":1},{"declaration":3070,"isOffset":false,"isSlot":false,"src":"8012:5:17","valueSize":1}],"id":3082,"nodeType":"InlineAssembly","src":"7979:48:17"},{"expression":{"id":3083,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"8044:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":3065,"id":3084,"nodeType":"Return","src":"8037:13:17"}]},"documentation":{"id":3057,"nodeType":"StructuredDocumentation","src":"7223:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3086,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7766:6:17","nodeType":"FunctionDefinition","parameters":{"id":3061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"set","nameLocation":"7792:3:17","nodeType":"VariableDeclaration","scope":3086,"src":"7773:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3059,"nodeType":"UserDefinedTypeName","pathNode":{"id":3058,"name":"Bytes32Set","nameLocations":["7773:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2969,"src":"7773:10:17"},"referencedDeclaration":2969,"src":"7773:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2969_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7772:24:17"},"returnParameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3086,"src":"7820:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7820:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3063,"nodeType":"ArrayTypeName","src":"7820:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7819:18:17"},"scope":3377,"src":"7757:300:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":3090,"members":[{"constant":false,"id":3089,"mutability":"mutable","name":"_inner","nameLocation":"8114:6:17","nodeType":"VariableDeclaration","scope":3090,"src":"8110:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3088,"nodeType":"UserDefinedTypeName","pathNode":{"id":3087,"name":"Set","nameLocations":["8110:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"8110:3:17"},"referencedDeclaration":2775,"src":"8110:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8089:10:17","nodeType":"StructDefinition","scope":3377,"src":"8082:45:17","visibility":"public"},{"body":{"id":3116,"nodeType":"Block","src":"8373:74:17","statements":[{"expression":{"arguments":[{"expression":{"id":3102,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"8395:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8399:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"8395:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"8431:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3108,"name":"uint160","nodeType":"ElementaryTypeName","src":"8423:7:17","typeDescriptions":{}}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8423:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"8415:7:17","typeDescriptions":{}}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8407:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3104,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8407:7:17","typeDescriptions":{}}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8407:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3101,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"8390:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8390:50:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3100,"id":3115,"nodeType":"Return","src":"8383:57:17"}]},"documentation":{"id":3091,"nodeType":"StructuredDocumentation","src":"8133:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3117,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8306:3:17","nodeType":"FunctionDefinition","parameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3094,"mutability":"mutable","name":"set","nameLocation":"8329:3:17","nodeType":"VariableDeclaration","scope":3117,"src":"8310:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3093,"nodeType":"UserDefinedTypeName","pathNode":{"id":3092,"name":"AddressSet","nameLocations":["8310:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"8310:10:17"},"referencedDeclaration":3090,"src":"8310:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"value","nameLocation":"8342:5:17","nodeType":"VariableDeclaration","scope":3117,"src":"8334:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3095,"name":"address","nodeType":"ElementaryTypeName","src":"8334:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8309:39:17"},"returnParameters":{"id":3100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3117,"src":"8367:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3098,"name":"bool","nodeType":"ElementaryTypeName","src":"8367:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8366:6:17"},"scope":3377,"src":"8297:150:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3143,"nodeType":"Block","src":"8694:77:17","statements":[{"expression":{"arguments":[{"expression":{"id":3129,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"8719:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8723:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"8719:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"8755:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3135,"name":"uint160","nodeType":"ElementaryTypeName","src":"8747:7:17","typeDescriptions":{}}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8747:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3133,"name":"uint256","nodeType":"ElementaryTypeName","src":"8739:7:17","typeDescriptions":{}}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8731:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8731:7:17","typeDescriptions":{}}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8731:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3128,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"8711:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8711:53:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3127,"id":3142,"nodeType":"Return","src":"8704:60:17"}]},"documentation":{"id":3118,"nodeType":"StructuredDocumentation","src":"8453:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3144,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8624:6:17","nodeType":"FunctionDefinition","parameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"set","nameLocation":"8650:3:17","nodeType":"VariableDeclaration","scope":3144,"src":"8631:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3120,"nodeType":"UserDefinedTypeName","pathNode":{"id":3119,"name":"AddressSet","nameLocations":["8631:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"8631:10:17"},"referencedDeclaration":3090,"src":"8631:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3123,"mutability":"mutable","name":"value","nameLocation":"8663:5:17","nodeType":"VariableDeclaration","scope":3144,"src":"8655:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3122,"name":"address","nodeType":"ElementaryTypeName","src":"8655:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8630:39:17"},"returnParameters":{"id":3127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3144,"src":"8688:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3125,"name":"bool","nodeType":"ElementaryTypeName","src":"8688:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8687:6:17"},"scope":3377,"src":"8615:156:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3170,"nodeType":"Block","src":"8938:79:17","statements":[{"expression":{"arguments":[{"expression":{"id":3156,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"8965:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3157,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8969:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"8965:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"9001:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3162,"name":"uint160","nodeType":"ElementaryTypeName","src":"8993:7:17","typeDescriptions":{}}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8993:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3160,"name":"uint256","nodeType":"ElementaryTypeName","src":"8985:7:17","typeDescriptions":{}}},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8977:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8977:7:17","typeDescriptions":{}}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8977:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3155,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"8955:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8955:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3154,"id":3169,"nodeType":"Return","src":"8948:62:17"}]},"documentation":{"id":3145,"nodeType":"StructuredDocumentation","src":"8777:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":3171,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8861:8:17","nodeType":"FunctionDefinition","parameters":{"id":3151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3148,"mutability":"mutable","name":"set","nameLocation":"8889:3:17","nodeType":"VariableDeclaration","scope":3171,"src":"8870:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3147,"nodeType":"UserDefinedTypeName","pathNode":{"id":3146,"name":"AddressSet","nameLocations":["8870:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"8870:10:17"},"referencedDeclaration":3090,"src":"8870:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3150,"mutability":"mutable","name":"value","nameLocation":"8902:5:17","nodeType":"VariableDeclaration","scope":3171,"src":"8894:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3149,"name":"address","nodeType":"ElementaryTypeName","src":"8894:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8869:39:17"},"returnParameters":{"id":3154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3171,"src":"8932:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3152,"name":"bool","nodeType":"ElementaryTypeName","src":"8932:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8931:6:17"},"scope":3377,"src":"8852:165:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3185,"nodeType":"Block","src":"9170:43:17","statements":[{"expression":{"arguments":[{"expression":{"id":3181,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"9195:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9199:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"9195:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3180,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"9187:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9187:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3179,"id":3184,"nodeType":"Return","src":"9180:26:17"}]},"documentation":{"id":3172,"nodeType":"StructuredDocumentation","src":"9023:70:17","text":" @dev Returns the number of values in the set. O(1)."},"id":3186,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9107:6:17","nodeType":"FunctionDefinition","parameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3175,"mutability":"mutable","name":"set","nameLocation":"9133:3:17","nodeType":"VariableDeclaration","scope":3186,"src":"9114:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3174,"nodeType":"UserDefinedTypeName","pathNode":{"id":3173,"name":"AddressSet","nameLocations":["9114:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"9114:10:17"},"referencedDeclaration":3090,"src":"9114:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9113:24:17"},"returnParameters":{"id":3179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3186,"src":"9161:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"9161:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9160:9:17"},"scope":3377,"src":"9098:115:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3212,"nodeType":"Block","src":"9638:73:17","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3204,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"9683:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9687:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"9683:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3206,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"9695:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3203,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"9679:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9679:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3201,"name":"uint256","nodeType":"ElementaryTypeName","src":"9671:7:17","typeDescriptions":{}}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9671:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3199,"name":"uint160","nodeType":"ElementaryTypeName","src":"9663:7:17","typeDescriptions":{}}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9655:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3197,"name":"address","nodeType":"ElementaryTypeName","src":"9655:7:17","typeDescriptions":{}}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9655:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3196,"id":3211,"nodeType":"Return","src":"9648:56:17"}]},"documentation":{"id":3187,"nodeType":"StructuredDocumentation","src":"9219:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3213,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9564:2:17","nodeType":"FunctionDefinition","parameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"set","nameLocation":"9586:3:17","nodeType":"VariableDeclaration","scope":3213,"src":"9567:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3189,"nodeType":"UserDefinedTypeName","pathNode":{"id":3188,"name":"AddressSet","nameLocations":["9567:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"9567:10:17"},"referencedDeclaration":3090,"src":"9567:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3192,"mutability":"mutable","name":"index","nameLocation":"9599:5:17","nodeType":"VariableDeclaration","scope":3213,"src":"9591:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3191,"name":"uint256","nodeType":"ElementaryTypeName","src":"9591:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9566:39:17"},"returnParameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3213,"src":"9629:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3194,"name":"address","nodeType":"ElementaryTypeName","src":"9629:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9628:9:17"},"scope":3377,"src":"9555:156:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3242,"nodeType":"Block","src":"10332:219:17","statements":[{"assignments":[3227],"declarations":[{"constant":false,"id":3227,"mutability":"mutable","name":"store","nameLocation":"10359:5:17","nodeType":"VariableDeclaration","scope":3242,"src":"10342:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10342:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3226,"nodeType":"ArrayTypeName","src":"10342:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3232,"initialValue":{"arguments":[{"expression":{"id":3229,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"10375:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10379:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"10375:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3228,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"10367:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10367:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10342:44:17"},{"assignments":[3237],"declarations":[{"constant":false,"id":3237,"mutability":"mutable","name":"result","nameLocation":"10413:6:17","nodeType":"VariableDeclaration","scope":3242,"src":"10396:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3235,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3236,"nodeType":"ArrayTypeName","src":"10396:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3238,"nodeType":"VariableDeclarationStatement","src":"10396:23:17"},{"AST":{"nodeType":"YulBlock","src":"10482:39:17","statements":[{"nodeType":"YulAssignment","src":"10496:15:17","value":{"name":"store","nodeType":"YulIdentifier","src":"10506:5:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10496:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3237,"isOffset":false,"isSlot":false,"src":"10496:6:17","valueSize":1},{"declaration":3227,"isOffset":false,"isSlot":false,"src":"10506:5:17","valueSize":1}],"id":3239,"nodeType":"InlineAssembly","src":"10473:48:17"},{"expression":{"id":3240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10538:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3222,"id":3241,"nodeType":"Return","src":"10531:13:17"}]},"documentation":{"id":3214,"nodeType":"StructuredDocumentation","src":"9717:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3243,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10260:6:17","nodeType":"FunctionDefinition","parameters":{"id":3218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3217,"mutability":"mutable","name":"set","nameLocation":"10286:3:17","nodeType":"VariableDeclaration","scope":3243,"src":"10267:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3216,"nodeType":"UserDefinedTypeName","pathNode":{"id":3215,"name":"AddressSet","nameLocations":["10267:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":3090,"src":"10267:10:17"},"referencedDeclaration":3090,"src":"10267:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3090_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10266:24:17"},"returnParameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3243,"src":"10314:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3219,"name":"address","nodeType":"ElementaryTypeName","src":"10314:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3220,"nodeType":"ArrayTypeName","src":"10314:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10313:18:17"},"scope":3377,"src":"10251:300:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":3247,"members":[{"constant":false,"id":3246,"mutability":"mutable","name":"_inner","nameLocation":"10602:6:17","nodeType":"VariableDeclaration","scope":3247,"src":"10598:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3245,"nodeType":"UserDefinedTypeName","pathNode":{"id":3244,"name":"Set","nameLocations":["10598:3:17"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"10598:3:17"},"referencedDeclaration":2775,"src":"10598:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10580:7:17","nodeType":"StructDefinition","scope":3377,"src":"10573:42:17","visibility":"public"},{"body":{"id":3267,"nodeType":"Block","src":"10858:56:17","statements":[{"expression":{"arguments":[{"expression":{"id":3259,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"10880:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10884:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3246,"src":"10880:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"10900:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10892:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10892:7:17","typeDescriptions":{}}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10892:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3258,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"10875:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10875:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3257,"id":3266,"nodeType":"Return","src":"10868:39:17"}]},"documentation":{"id":3248,"nodeType":"StructuredDocumentation","src":"10621:159:17","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3268,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10794:3:17","nodeType":"FunctionDefinition","parameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"set","nameLocation":"10814:3:17","nodeType":"VariableDeclaration","scope":3268,"src":"10798:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3250,"nodeType":"UserDefinedTypeName","pathNode":{"id":3249,"name":"UintSet","nameLocations":["10798:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3247,"src":"10798:7:17"},"referencedDeclaration":3247,"src":"10798:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3253,"mutability":"mutable","name":"value","nameLocation":"10827:5:17","nodeType":"VariableDeclaration","scope":3268,"src":"10819:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"10819:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10797:36:17"},"returnParameters":{"id":3257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3268,"src":"10852:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3255,"name":"bool","nodeType":"ElementaryTypeName","src":"10852:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10851:6:17"},"scope":3377,"src":"10785:129:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3288,"nodeType":"Block","src":"11158:59:17","statements":[{"expression":{"arguments":[{"expression":{"id":3280,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"11183:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11187:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3246,"src":"11183:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"11203:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11195:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11195:7:17","typeDescriptions":{}}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11195:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3279,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"11175:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11175:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3278,"id":3287,"nodeType":"Return","src":"11168:42:17"}]},"documentation":{"id":3269,"nodeType":"StructuredDocumentation","src":"10920:157:17","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3289,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11091:6:17","nodeType":"FunctionDefinition","parameters":{"id":3275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3272,"mutability":"mutable","name":"set","nameLocation":"11114:3:17","nodeType":"VariableDeclaration","scope":3289,"src":"11098:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3271,"nodeType":"UserDefinedTypeName","pathNode":{"id":3270,"name":"UintSet","nameLocations":["11098:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3247,"src":"11098:7:17"},"referencedDeclaration":3247,"src":"11098:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3274,"mutability":"mutable","name":"value","nameLocation":"11127:5:17","nodeType":"VariableDeclaration","scope":3289,"src":"11119:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3273,"name":"uint256","nodeType":"ElementaryTypeName","src":"11119:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11097:36:17"},"returnParameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3289,"src":"11152:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3276,"name":"bool","nodeType":"ElementaryTypeName","src":"11152:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11151:6:17"},"scope":3377,"src":"11082:135:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3309,"nodeType":"Block","src":"11381:61:17","statements":[{"expression":{"arguments":[{"expression":{"id":3301,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"11408:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11412:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3246,"src":"11408:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3305,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"11428:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11420:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11420:7:17","typeDescriptions":{}}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11420:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3300,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"11398:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11398:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3299,"id":3308,"nodeType":"Return","src":"11391:44:17"}]},"documentation":{"id":3290,"nodeType":"StructuredDocumentation","src":"11223:70:17","text":" @dev Returns true if the value is in the set. O(1)."},"id":3310,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11307:8:17","nodeType":"FunctionDefinition","parameters":{"id":3296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3293,"mutability":"mutable","name":"set","nameLocation":"11332:3:17","nodeType":"VariableDeclaration","scope":3310,"src":"11316:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3292,"nodeType":"UserDefinedTypeName","pathNode":{"id":3291,"name":"UintSet","nameLocations":["11316:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3247,"src":"11316:7:17"},"referencedDeclaration":3247,"src":"11316:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3295,"mutability":"mutable","name":"value","nameLocation":"11345:5:17","nodeType":"VariableDeclaration","scope":3310,"src":"11337:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3294,"name":"uint256","nodeType":"ElementaryTypeName","src":"11337:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11315:36:17"},"returnParameters":{"id":3299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3310,"src":"11375:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3297,"name":"bool","nodeType":"ElementaryTypeName","src":"11375:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11374:6:17"},"scope":3377,"src":"11298:144:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3324,"nodeType":"Block","src":"11592:43:17","statements":[{"expression":{"arguments":[{"expression":{"id":3320,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"11617:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3321,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11621:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3246,"src":"11617:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3319,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"11609:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11609:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3318,"id":3323,"nodeType":"Return","src":"11602:26:17"}]},"documentation":{"id":3311,"nodeType":"StructuredDocumentation","src":"11448:70:17","text":" @dev Returns the number of values in the set. O(1)."},"id":3325,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11532:6:17","nodeType":"FunctionDefinition","parameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3314,"mutability":"mutable","name":"set","nameLocation":"11555:3:17","nodeType":"VariableDeclaration","scope":3325,"src":"11539:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3313,"nodeType":"UserDefinedTypeName","pathNode":{"id":3312,"name":"UintSet","nameLocations":["11539:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3247,"src":"11539:7:17"},"referencedDeclaration":3247,"src":"11539:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11538:21:17"},"returnParameters":{"id":3318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3325,"src":"11583:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3316,"name":"uint256","nodeType":"ElementaryTypeName","src":"11583:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11582:9:17"},"scope":3377,"src":"11523:112:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3345,"nodeType":"Block","src":"12057:55:17","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3339,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"12086:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12090:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3246,"src":"12086:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3341,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"12098:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3338,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"12082:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12082:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12074:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"12074:7:17","typeDescriptions":{}}},"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12074:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3335,"id":3344,"nodeType":"Return","src":"12067:38:17"}]},"documentation":{"id":3326,"nodeType":"StructuredDocumentation","src":"11641:331:17","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3346,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11986:2:17","nodeType":"FunctionDefinition","parameters":{"id":3332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3329,"mutability":"mutable","name":"set","nameLocation":"12005:3:17","nodeType":"VariableDeclaration","scope":3346,"src":"11989:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3328,"nodeType":"UserDefinedTypeName","pathNode":{"id":3327,"name":"UintSet","nameLocations":["11989:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3247,"src":"11989:7:17"},"referencedDeclaration":3247,"src":"11989:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3331,"mutability":"mutable","name":"index","nameLocation":"12018:5:17","nodeType":"VariableDeclaration","scope":3346,"src":"12010:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3330,"name":"uint256","nodeType":"ElementaryTypeName","src":"12010:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11988:36:17"},"returnParameters":{"id":3335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3346,"src":"12048:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint256","nodeType":"ElementaryTypeName","src":"12048:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12047:9:17"},"scope":3377,"src":"11977:135:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3375,"nodeType":"Block","src":"12730:219:17","statements":[{"assignments":[3360],"declarations":[{"constant":false,"id":3360,"mutability":"mutable","name":"store","nameLocation":"12757:5:17","nodeType":"VariableDeclaration","scope":3375,"src":"12740:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12740:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3359,"nodeType":"ArrayTypeName","src":"12740:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3365,"initialValue":{"arguments":[{"expression":{"id":3362,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"12773:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12777:6:17","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3246,"src":"12773:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2775_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3361,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"12765:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2775_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12765:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12740:44:17"},{"assignments":[3370],"declarations":[{"constant":false,"id":3370,"mutability":"mutable","name":"result","nameLocation":"12811:6:17","nodeType":"VariableDeclaration","scope":3375,"src":"12794:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"12794:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3369,"nodeType":"ArrayTypeName","src":"12794:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3371,"nodeType":"VariableDeclarationStatement","src":"12794:23:17"},{"AST":{"nodeType":"YulBlock","src":"12880:39:17","statements":[{"nodeType":"YulAssignment","src":"12894:15:17","value":{"name":"store","nodeType":"YulIdentifier","src":"12904:5:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12894:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3370,"isOffset":false,"isSlot":false,"src":"12894:6:17","valueSize":1},{"declaration":3360,"isOffset":false,"isSlot":false,"src":"12904:5:17","valueSize":1}],"id":3372,"nodeType":"InlineAssembly","src":"12871:48:17"},{"expression":{"id":3373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"12936:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3355,"id":3374,"nodeType":"Return","src":"12929:13:17"}]},"documentation":{"id":3347,"nodeType":"StructuredDocumentation","src":"12118:529:17","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3376,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12661:6:17","nodeType":"FunctionDefinition","parameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3350,"mutability":"mutable","name":"set","nameLocation":"12684:3:17","nodeType":"VariableDeclaration","scope":3376,"src":"12668:19:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3349,"nodeType":"UserDefinedTypeName","pathNode":{"id":3348,"name":"UintSet","nameLocations":["12668:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3247,"src":"12668:7:17"},"referencedDeclaration":3247,"src":"12668:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3247_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12667:21:17"},"returnParameters":{"id":3355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3376,"src":"12712:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3352,"name":"uint256","nodeType":"ElementaryTypeName","src":"12712:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3353,"nodeType":"ArrayTypeName","src":"12712:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12711:18:17"},"scope":3377,"src":"12652:297:17","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3378,"src":"1321:11630:17","usedErrors":[]}],"src":"205:12747:17"},"id":17},"contracts/BatchTransfer.sol":{"ast":{"absolutePath":"contracts/BatchTransfer.sol","exportedSymbols":{"BatchTransfer":[3454],"IERC20":[1424]},"id":3455,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3379,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:18"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3380,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3455,"sourceUnit":1425,"src":"57:56:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BatchTransfer","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3454,"linearizedBaseContracts":[3454],"name":"BatchTransfer","nameLocation":"124:13:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3452,"nodeType":"Block","src":"258:488:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3392,"name":"addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"280:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"290:6:18","memberName":"length","nodeType":"MemberAccess","src":"280:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3394,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"300:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"309:6:18","memberName":"length","nodeType":"MemberAccess","src":"300:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"280:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468652074776f20617272617973206d7573742062652077697468207468652073616d65206c656e677468","id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"317:45:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_2225ea8d97c8ea827454fbff29514059117fe59eb54cd0567a2b5a813d93e6fb","typeString":"literal_string \"The two arrays must be with the same length\""},"value":"The two arrays must be with the same length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2225ea8d97c8ea827454fbff29514059117fe59eb54cd0567a2b5a813d93e6fb","typeString":"literal_string \"The two arrays must be with the same length\""}],"id":3391,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"272:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"272:91:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3399,"nodeType":"ExpressionStatement","src":"272:91:18"},{"assignments":[3402],"declarations":[{"constant":false,"id":3402,"mutability":"mutable","name":"token","nameLocation":"384:5:18","nodeType":"VariableDeclaration","scope":3452,"src":"377:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"},"typeName":{"id":3401,"nodeType":"UserDefinedTypeName","pathNode":{"id":3400,"name":"IERC20","nameLocations":["377:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1424,"src":"377:6:18"},"referencedDeclaration":1424,"src":"377:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"visibility":"internal"}],"id":3406,"initialValue":{"arguments":[{"id":3404,"name":"deployedTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"399:20:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3403,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"392:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1424_$","typeString":"type(contract IERC20)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"392:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"377:43:18"},{"body":{"id":3450,"nodeType":"Block","src":"477:263:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3419,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"503:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3421,"indexExpression":{"id":3420,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"512:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"503:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"expression":{"id":3424,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"534:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"538:6:18","memberName":"sender","nodeType":"MemberAccess","src":"534:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3422,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"518:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"524:9:18","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1381,"src":"518:15:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"518:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"503:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420656e6f7567682062616c616e6365","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"547:20:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad","typeString":"literal_string \"Not enough balance\""},"value":"Not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad","typeString":"literal_string \"Not enough balance\""}],"id":3418,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"495:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"495:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3430,"nodeType":"ExpressionStatement","src":"495:73:18"},{"assignments":[3432],"declarations":[{"constant":false,"id":3432,"mutability":"mutable","name":"result","nameLocation":"591:6:18","nodeType":"VariableDeclaration","scope":3450,"src":"586:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3431,"name":"bool","nodeType":"ElementaryTypeName","src":"586:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3444,"initialValue":{"arguments":[{"expression":{"id":3435,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"619:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"623:6:18","memberName":"sender","nodeType":"MemberAccess","src":"619:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3437,"name":"addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"631:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3439,"indexExpression":{"id":3438,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"641:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"631:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3440,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"645:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3442,"indexExpression":{"id":3441,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"654:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"645:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3433,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"600:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"606:12:18","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1423,"src":"600:18:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"600:57:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"586:71:18"},{"expression":{"arguments":[{"id":3446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"683:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546865207472616e7366657220776173206e6f74207375636365737366756c","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"691:33:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_37896778bbb81189824e785c20327687387efdfe35b977a04a70260992c96119","typeString":"literal_string \"The transfer was not successful\""},"value":"The transfer was not successful"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_37896778bbb81189824e785c20327687387efdfe35b977a04a70260992c96119","typeString":"literal_string \"The transfer was not successful\""}],"id":3445,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"675:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"675:50:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3449,"nodeType":"ExpressionStatement","src":"675:50:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3411,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"450:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3412,"name":"addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"454:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"464:6:18","memberName":"length","nodeType":"MemberAccess","src":"454:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"450:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3451,"initializationExpression":{"assignments":[3408],"declarations":[{"constant":false,"id":3408,"mutability":"mutable","name":"i","nameLocation":"443:1:18","nodeType":"VariableDeclaration","scope":3451,"src":"438:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint","nodeType":"ElementaryTypeName","src":"438:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3410,"initialValue":{"hexValue":"30","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"447:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"438:10:18"},"loopExpression":{"expression":{"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"472:3:18","subExpression":{"id":3415,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"472:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3417,"nodeType":"ExpressionStatement","src":"472:3:18"},"nodeType":"ForStatement","src":"434:306:18"}]},"functionSelector":"e83f967b","id":3453,"implemented":true,"kind":"function","modifiers":[],"name":"sendTokens","nameLocation":"155:10:18","nodeType":"FunctionDefinition","parameters":{"id":3389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3382,"mutability":"mutable","name":"deployedTokenAddress","nameLocation":"174:20:18","nodeType":"VariableDeclaration","scope":3453,"src":"166:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3381,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3385,"mutability":"mutable","name":"addresses","nameLocation":"213:9:18","nodeType":"VariableDeclaration","scope":3453,"src":"196:26:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3383,"name":"address","nodeType":"ElementaryTypeName","src":"196:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3384,"nodeType":"ArrayTypeName","src":"196:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3388,"mutability":"mutable","name":"balances","nameLocation":"241:8:18","nodeType":"VariableDeclaration","scope":3453,"src":"224:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3386,"name":"uint256","nodeType":"ElementaryTypeName","src":"224:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3387,"nodeType":"ArrayTypeName","src":"224:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"165:85:18"},"returnParameters":{"id":3390,"nodeType":"ParameterList","parameters":[],"src":"258:0:18"},"scope":3454,"src":"146:600:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3455,"src":"115:633:18","usedErrors":[]}],"src":"32:717:18"},"id":18},"contracts/PercentageCalculator.sol":{"ast":{"absolutePath":"contracts/PercentageCalculator.sol","exportedSymbols":{"PercentageCalculator":[3473]},"id":3474,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3456,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"PercentageCalculator","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3473,"linearizedBaseContracts":[3473],"name":"PercentageCalculator","nameLocation":"65:20:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3471,"nodeType":"Block","src":"306:45:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3465,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"317:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3466,"name":"_percentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"327:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"317:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030303030","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"341:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"src":"317:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3464,"id":3470,"nodeType":"Return","src":"310:37:19"}]},"functionSelector":"a391c15b","id":3472,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"235:3:19","nodeType":"FunctionDefinition","parameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"_amount","nameLocation":"247:7:19","nodeType":"VariableDeclaration","scope":3472,"src":"239:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3457,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"_percentage","nameLocation":"264:11:19","nodeType":"VariableDeclaration","scope":3472,"src":"256:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3459,"name":"uint256","nodeType":"ElementaryTypeName","src":"256:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"238:38:19"},"returnParameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3472,"src":"297:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3462,"name":"uint256","nodeType":"ElementaryTypeName","src":"297:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"296:9:19"},"scope":3473,"src":"226:125:19","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":3474,"src":"57:296:19","usedErrors":[]}],"src":"32:322:19"},"id":19},"contracts/Vesting.sol":{"ast":{"absolutePath":"contracts/Vesting.sol","exportedSymbols":{"Context":[1688],"IERC20":[1424],"Ownable":[651],"PercentageCalculator":[3473],"Vesting":[3848]},"id":3849,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3475,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:20"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3476,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3849,"sourceUnit":652,"src":"57:52:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3477,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3849,"sourceUnit":1425,"src":"110:56:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PercentageCalculator.sol","file":"./PercentageCalculator.sol","id":3478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3849,"sourceUnit":3474,"src":"167:36:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3479,"name":"Ownable","nameLocations":["225:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"225:7:20"},"id":3480,"nodeType":"InheritanceSpecifier","src":"225:7:20"}],"canonicalName":"Vesting","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3848,"linearizedBaseContracts":[3848,651,1688],"name":"Vesting","nameLocation":"214:7:20","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"0b97bc86","id":3482,"mutability":"mutable","name":"startDate","nameLocation":"254:9:20","nodeType":"VariableDeclaration","scope":3848,"src":"239:24:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3481,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"id":3485,"mutability":"constant","name":"periodLength","nameLocation":"295:12:20","nodeType":"VariableDeclaration","scope":3848,"src":"269:48:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3483,"name":"uint256","nodeType":"ElementaryTypeName","src":"269:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3330","id":3484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"310:7:20","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"visibility":"internal"},{"constant":false,"functionSelector":"e3eb1599","id":3489,"mutability":"mutable","name":"cumulativeAmountsToVest","nameLocation":"342:23:20","nodeType":"VariableDeclaration","scope":3848,"src":"323:42:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage","typeString":"uint256[35]"},"typeName":{"baseType":{"id":3486,"name":"uint256","nodeType":"ElementaryTypeName","src":"323:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3488,"length":{"hexValue":"3335","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"331:2:20","typeDescriptions":{"typeIdentifier":"t_rational_35_by_1","typeString":"int_const 35"},"value":"35"},"nodeType":"ArrayTypeName","src":"323:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage_ptr","typeString":"uint256[35]"}},"visibility":"public"},{"constant":false,"functionSelector":"56fcdae3","id":3491,"mutability":"mutable","name":"totalPercentages","nameLocation":"386:16:20","nodeType":"VariableDeclaration","scope":3848,"src":"371:31:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3490,"name":"uint256","nodeType":"ElementaryTypeName","src":"371:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":3494,"mutability":"mutable","name":"token","nameLocation":"424:5:20","nodeType":"VariableDeclaration","scope":3848,"src":"408:21:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"},"typeName":{"id":3493,"nodeType":"UserDefinedTypeName","pathNode":{"id":3492,"name":"IERC20","nameLocations":["408:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":1424,"src":"408:6:20"},"referencedDeclaration":1424,"src":"408:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"visibility":"internal"},{"canonicalName":"Vesting.Recipient","id":3499,"members":[{"constant":false,"id":3496,"mutability":"mutable","name":"withdrawnAmount","nameLocation":"471:15:20","nodeType":"VariableDeclaration","scope":3499,"src":"463:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"463:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3498,"mutability":"mutable","name":"withdrawPercentage","nameLocation":"504:18:20","nodeType":"VariableDeclaration","scope":3499,"src":"496:26:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3497,"name":"uint256","nodeType":"ElementaryTypeName","src":"496:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Recipient","nameLocation":"443:9:20","nodeType":"StructDefinition","scope":3848,"src":"436:93:20","visibility":"public"},{"constant":false,"functionSelector":"f4f8495b","id":3501,"mutability":"mutable","name":"totalRecipients","nameLocation":"550:15:20","nodeType":"VariableDeclaration","scope":3848,"src":"535:30:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3500,"name":"uint256","nodeType":"ElementaryTypeName","src":"535:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"eb820312","id":3506,"mutability":"mutable","name":"recipients","nameLocation":"608:10:20","nodeType":"VariableDeclaration","scope":3848,"src":"571:47:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Recipient_$3499_storage_$","typeString":"mapping(address => struct Vesting.Recipient)"},"typeName":{"id":3505,"keyType":{"id":3502,"name":"address","nodeType":"ElementaryTypeName","src":"579:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"571:29:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Recipient_$3499_storage_$","typeString":"mapping(address => struct Vesting.Recipient)"},"valueType":{"id":3504,"nodeType":"UserDefinedTypeName","pathNode":{"id":3503,"name":"Recipient","nameLocations":["590:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3499,"src":"590:9:20"},"referencedDeclaration":3499,"src":"590:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_storage_ptr","typeString":"struct Vesting.Recipient"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"e5461405d7121c89a6fa291896d72f0514ac8957d0839feae0b904b5065e51a8","id":3512,"name":"LogStartDateSet","nameLocation":"631:15:20","nodeType":"EventDefinition","parameters":{"id":3511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3508,"indexed":false,"mutability":"mutable","name":"setter","nameLocation":"655:6:20","nodeType":"VariableDeclaration","scope":3512,"src":"647:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3507,"name":"address","nodeType":"ElementaryTypeName","src":"647:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3510,"indexed":false,"mutability":"mutable","name":"startDate","nameLocation":"671:9:20","nodeType":"VariableDeclaration","scope":3512,"src":"663:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3509,"name":"uint256","nodeType":"ElementaryTypeName","src":"663:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"646:35:20"},"src":"625:57:20"},{"anonymous":false,"eventSelector":"595c5a9418c2ea607b802dfdeac0ce122b959c5eb469f9c0bf86c1e262e7c72f","id":3518,"name":"LogRecipientAdded","nameLocation":"693:17:20","nodeType":"EventDefinition","parameters":{"id":3517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3514,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"719:9:20","nodeType":"VariableDeclaration","scope":3518,"src":"711:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3513,"name":"address","nodeType":"ElementaryTypeName","src":"711:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3516,"indexed":false,"mutability":"mutable","name":"withdrawPercentage","nameLocation":"738:18:20","nodeType":"VariableDeclaration","scope":3518,"src":"730:26:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3515,"name":"uint256","nodeType":"ElementaryTypeName","src":"730:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"710:47:20"},"src":"687:71:20"},{"anonymous":false,"eventSelector":"cb3b287df62322e81cc5b4c1ba9d9f5a449e34069d403b00eb061faed581737b","id":3524,"name":"LogTokensClaimed","nameLocation":"769:16:20","nodeType":"EventDefinition","parameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"794:9:20","nodeType":"VariableDeclaration","scope":3524,"src":"786:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3519,"name":"address","nodeType":"ElementaryTypeName","src":"786:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3522,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"813:6:20","nodeType":"VariableDeclaration","scope":3524,"src":"805:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3521,"name":"uint256","nodeType":"ElementaryTypeName","src":"805:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"785:35:20"},"src":"763:58:20"},{"body":{"id":3543,"nodeType":"Block","src":"1018:255:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3529,"name":"_percentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1049:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313030303030","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1063:6:20","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"src":"1049:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726f76696465642070657263656e746167652073686f756c64206265206c657373207468616e2031303025","id":3532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1083:46:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_65ba7a7d860d762b28ea32f05970f7d2e943744e6b464d4ae4e27814b8a89ea5","typeString":"literal_string \"Provided percentage should be less than 100%\""},"value":"Provided percentage should be less than 100%"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_65ba7a7d860d762b28ea32f05970f7d2e943744e6b464d4ae4e27814b8a89ea5","typeString":"literal_string \"Provided percentage should be less than 100%\""}],"id":3528,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1028:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1028:111:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3534,"nodeType":"ExpressionStatement","src":"1028:111:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3536,"name":"_percentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1170:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1184:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1170:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726f76696465642070657263656e746167652073686f756c642062652067726561746572207468616e2030","id":3539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1199:46:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_537da7c3b78175a72d3f42782eac4174e950854483e90c646831b9f2c09d3884","typeString":"literal_string \"Provided percentage should be greater than 0\""},"value":"Provided percentage should be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_537da7c3b78175a72d3f42782eac4174e950854483e90c646831b9f2c09d3884","typeString":"literal_string \"Provided percentage should be greater than 0\""}],"id":3535,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1149:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:106:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3541,"nodeType":"ExpressionStatement","src":"1149:106:20"},{"id":3542,"nodeType":"PlaceholderStatement","src":"1265:1:20"}]},"id":3544,"name":"onlyValidPercentages","nameLocation":"976:20:20","nodeType":"ModifierDefinition","parameters":{"id":3527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3526,"mutability":"mutable","name":"_percentage","nameLocation":"1005:11:20","nodeType":"VariableDeclaration","scope":3544,"src":"997:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3525,"name":"uint256","nodeType":"ElementaryTypeName","src":"997:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"996:21:20"},"src":"967:306:20","virtual":false,"visibility":"internal"},{"body":{"id":3574,"nodeType":"Block","src":"1541:225:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3555,"name":"_tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"1572:13:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1597:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1589:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3556,"name":"address","nodeType":"ElementaryTypeName","src":"1589:7:20","typeDescriptions":{}}},"id":3559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1589:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1572:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e20416464726573732063616e2774206265207a65726f2061646472657373","id":3561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1613:37:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c3c3dc87836a060f3a41237e2e2cfadd040e33ba60ca9386fd36cb278e380260","typeString":"literal_string \"Token Address can't be zero address\""},"value":"Token Address can't be zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c3c3dc87836a060f3a41237e2e2cfadd040e33ba60ca9386fd36cb278e380260","typeString":"literal_string \"Token Address can't be zero address\""}],"id":3554,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1551:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1551:109:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3563,"nodeType":"ExpressionStatement","src":"1551:109:20"},{"expression":{"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3564,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"1670:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3566,"name":"_tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"1685:13:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3565,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"1678:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1424_$","typeString":"type(contract IERC20)"}},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1678:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"src":"1670:29:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"id":3569,"nodeType":"ExpressionStatement","src":"1670:29:20"},{"expression":{"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3570,"name":"cumulativeAmountsToVest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"1709:23:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage","typeString":"uint256[35] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3571,"name":"_cumulativeAmountsToVest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"1735:24:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_memory_ptr","typeString":"uint256[35] memory"}},"src":"1709:50:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage","typeString":"uint256[35] storage ref"}},"id":3573,"nodeType":"ExpressionStatement","src":"1709:50:20"}]},"documentation":{"id":3545,"nodeType":"StructuredDocumentation","src":"1279:155:20","text":" @param _tokenAddress The address of the ALBT token\n @param _cumulativeAmountsToVest The cumulative amounts for each vesting period"},"id":3575,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3547,"mutability":"mutable","name":"_tokenAddress","nameLocation":"1468:13:20","nodeType":"VariableDeclaration","scope":3575,"src":"1460:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3546,"name":"address","nodeType":"ElementaryTypeName","src":"1460:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3551,"mutability":"mutable","name":"_cumulativeAmountsToVest","nameLocation":"1510:24:20","nodeType":"VariableDeclaration","scope":3575,"src":"1491:43:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_memory_ptr","typeString":"uint256[35]"},"typeName":{"baseType":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3550,"length":{"hexValue":"3335","id":3549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:20","typeDescriptions":{"typeIdentifier":"t_rational_35_by_1","typeString":"int_const 35"},"value":"35"},"nodeType":"ArrayTypeName","src":"1491:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage_ptr","typeString":"uint256[35]"}},"visibility":"internal"}],"src":"1450:90:20"},"returnParameters":{"id":3553,"nodeType":"ParameterList","parameters":[],"src":"1541:0:20"},"scope":3848,"src":"1439:327:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3604,"nodeType":"Block","src":"1989:186:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3584,"name":"_startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2007:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":3585,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2021:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2027:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"2021:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2007:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537461727420446174652063616e277420626520696e207468652070617374","id":3588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2038:33:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd176167be579d89cf76ec20076406e30f1dc0059decd24a0591769873a8c6b1","typeString":"literal_string \"Start Date can't be in the past\""},"value":"Start Date can't be in the past"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bd176167be579d89cf76ec20076406e30f1dc0059decd24a0591769873a8c6b1","typeString":"literal_string \"Start Date can't be in the past\""}],"id":3583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1999:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1999:73:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3590,"nodeType":"ExpressionStatement","src":"1999:73:20"},{"expression":{"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3591,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"2083:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3592,"name":"_startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2095:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2083:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3594,"nodeType":"ExpressionStatement","src":"2083:22:20"},{"eventCall":{"arguments":[{"arguments":[{"expression":{"id":3598,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2144:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2148:6:20","memberName":"sender","nodeType":"MemberAccess","src":"2144:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2136:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3596,"name":"address","nodeType":"ElementaryTypeName","src":"2136:7:20","typeDescriptions":{}}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2136:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3601,"name":"_startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2157:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3595,"name":"LogStartDateSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"2120:15:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2120:48:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3603,"nodeType":"EmitStatement","src":"2115:53:20"}]},"documentation":{"id":3576,"nodeType":"StructuredDocumentation","src":"1772:153:20","text":" @dev Function that sets the start date of the Vesting\n @param _startDate The start date of the veseting presented as a timestamp"},"functionSelector":"82d95df5","id":3605,"implemented":true,"kind":"function","modifiers":[{"id":3581,"kind":"modifierInvocation","modifierName":{"id":3580,"name":"onlyOwner","nameLocations":["1979:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":570,"src":"1979:9:20"},"nodeType":"ModifierInvocation","src":"1979:9:20"}],"name":"setStartDate","nameLocation":"1939:12:20","nodeType":"FunctionDefinition","parameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3578,"mutability":"mutable","name":"_startDate","nameLocation":"1960:10:20","nodeType":"VariableDeclaration","scope":3605,"src":"1952:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3577,"name":"uint256","nodeType":"ElementaryTypeName","src":"1952:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1951:20:20"},"returnParameters":{"id":3582,"nodeType":"ParameterList","parameters":[],"src":"1989:0:20"},"scope":3848,"src":"1930:245:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3658,"nodeType":"Block","src":"2582:455:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"_recipientAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"2613:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2642:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2634:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3620,"name":"address","nodeType":"ElementaryTypeName","src":"2634:7:20","typeDescriptions":{}}},"id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2634:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2613:31:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526563657069656e7420416464726573732063616e2774206265207a65726f2061646472657373","id":3625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2658:41:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d56eadba0ca761df006afb92a146f359ec36f6b7ae4f099854a096c095b1080b","typeString":"literal_string \"Recepient Address can't be zero address\""},"value":"Recepient Address can't be zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d56eadba0ca761df006afb92a146f359ec36f6b7ae4f099854a096c095b1080b","typeString":"literal_string \"Recepient Address can't be zero address\""}],"id":3618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2592:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2592:117:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3627,"nodeType":"ExpressionStatement","src":"2592:117:20"},{"expression":{"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3628,"name":"totalPercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3491,"src":"2719:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3629,"name":"totalPercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3491,"src":"2738:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3630,"name":"_withdrawPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2757:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:38:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2719:57:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3633,"nodeType":"ExpressionStatement","src":"2719:57:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3635,"name":"totalPercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3491,"src":"2794:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"313030303030","id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2814:6:20","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"src":"2794:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f74616c2070657263656e746167657320657863656564732031303025","id":3638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2822:32:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d32a6d0555b0c150d4eeedf802d45631f413c7ba0ebe0c68468421cf2c0b62b7","typeString":"literal_string \"Total percentages exceeds 100%\""},"value":"Total percentages exceeds 100%"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d32a6d0555b0c150d4eeedf802d45631f413c7ba0ebe0c68468421cf2c0b62b7","typeString":"literal_string \"Total percentages exceeds 100%\""}],"id":3634,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2786:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2786:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3640,"nodeType":"ExpressionStatement","src":"2786:69:20"},{"expression":{"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2865:17:20","subExpression":{"id":3641,"name":"totalRecipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"2865:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3643,"nodeType":"ExpressionStatement","src":"2865:17:20"},{"expression":{"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3644,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"2893:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Recipient_$3499_storage_$","typeString":"mapping(address => struct Vesting.Recipient storage ref)"}},"id":3646,"indexExpression":{"id":3645,"name":"_recipientAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"2904:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2893:29:20","typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_storage","typeString":"struct Vesting.Recipient storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2935:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3649,"name":"_withdrawPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2938:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3647,"name":"Recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"2925:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Recipient_$3499_storage_ptr_$","typeString":"type(struct Vesting.Recipient storage pointer)"}},"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2925:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_memory_ptr","typeString":"struct Vesting.Recipient memory"}},"src":"2893:65:20","typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_storage","typeString":"struct Vesting.Recipient storage ref"}},"id":3652,"nodeType":"ExpressionStatement","src":"2893:65:20"},{"eventCall":{"arguments":[{"id":3654,"name":"_recipientAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"2991:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3655,"name":"_withdrawPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"3010:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3653,"name":"LogRecipientAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"2973:17:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2973:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3657,"nodeType":"EmitStatement","src":"2968:62:20"}]},"documentation":{"id":3606,"nodeType":"StructuredDocumentation","src":"2181:237:20","text":" @dev Function add recipient to the vesting contract\n @param _recipientAddress The address of the recipient\n @param _withdrawPercentage The percentage that the recipient should receive in each vesting period"},"functionSelector":"f7982243","id":3659,"implemented":true,"kind":"function","modifiers":[{"id":3613,"kind":"modifierInvocation","modifierName":{"id":3612,"name":"onlyOwner","nameLocations":["2530:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":570,"src":"2530:9:20"},"nodeType":"ModifierInvocation","src":"2530:9:20"},{"arguments":[{"id":3615,"name":"_withdrawPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2561:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3616,"kind":"modifierInvocation","modifierName":{"id":3614,"name":"onlyValidPercentages","nameLocations":["2540:20:20"],"nodeType":"IdentifierPath","referencedDeclaration":3544,"src":"2540:20:20"},"nodeType":"ModifierInvocation","src":"2540:41:20"}],"name":"addRecipient","nameLocation":"2432:12:20","nodeType":"FunctionDefinition","parameters":{"id":3611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3608,"mutability":"mutable","name":"_recipientAddress","nameLocation":"2462:17:20","nodeType":"VariableDeclaration","scope":3659,"src":"2454:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3607,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"_withdrawPercentage","nameLocation":"2497:19:20","nodeType":"VariableDeclaration","scope":3659,"src":"2489:27:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3609,"name":"uint256","nodeType":"ElementaryTypeName","src":"2489:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2444:78:20"},"returnParameters":{"id":3617,"nodeType":"ParameterList","parameters":[],"src":"2582:0:20"},"scope":3848,"src":"2423:614:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3709,"nodeType":"Block","src":"3486:406:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3672,"name":"_recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3663,"src":"3517:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3529:6:20","memberName":"length","nodeType":"MemberAccess","src":"3517:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"323330","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3538:3:20","typeDescriptions":{"typeIdentifier":"t_rational_230_by_1","typeString":"int_const 230"},"value":"230"},"src":"3517:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686520726563697069656e7473206d757374206265206e6f74206d6f7265207468616e20323330","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3555:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_75a3f70dcc23c85fee4f71cdcc974a138fa461b9b47d61814a5d7524c38d8cbc","typeString":"literal_string \"The recipients must be not more than 230\""},"value":"The recipients must be not more than 230"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75a3f70dcc23c85fee4f71cdcc974a138fa461b9b47d61814a5d7524c38d8cbc","typeString":"literal_string \"The recipients must be not more than 230\""}],"id":3671,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3496:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3496:111:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3678,"nodeType":"ExpressionStatement","src":"3496:111:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3680,"name":"_recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3663,"src":"3638:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3650:6:20","memberName":"length","nodeType":"MemberAccess","src":"3638:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3682,"name":"_withdrawPercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"3660:20:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3681:6:20","memberName":"length","nodeType":"MemberAccess","src":"3660:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3638:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468652074776f2061727279617320617265207769746820646966666572656e74206c656e677468","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3701:42:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_b6fe237ee8a03b5d3ca491aefa2d319ec5d5db991e59ca31b919f4be143b1660","typeString":"literal_string \"The two arryas are with different length\""},"value":"The two arryas are with different length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b6fe237ee8a03b5d3ca491aefa2d319ec5d5db991e59ca31b919f4be143b1660","typeString":"literal_string \"The two arryas are with different length\""}],"id":3679,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3617:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3617:136:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3687,"nodeType":"ExpressionStatement","src":"3617:136:20"},{"body":{"id":3707,"nodeType":"Block","src":"3808:78:20","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3699,"name":"_recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3663,"src":"3835:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3701,"indexExpression":{"id":3700,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"3847:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3835:14:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3702,"name":"_withdrawPercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"3851:20:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3704,"indexExpression":{"id":3703,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"3872:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3851:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3698,"name":"addRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"3822:12:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3706,"nodeType":"ExpressionStatement","src":"3822:53:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3691,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"3779:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3692,"name":"_recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3663,"src":"3783:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3795:6:20","memberName":"length","nodeType":"MemberAccess","src":"3783:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3779:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3708,"initializationExpression":{"assignments":[3689],"declarations":[{"constant":false,"id":3689,"mutability":"mutable","name":"i","nameLocation":"3776:1:20","nodeType":"VariableDeclaration","scope":3708,"src":"3768:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"3768:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3690,"nodeType":"VariableDeclarationStatement","src":"3768:9:20"},"loopExpression":{"expression":{"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3803:3:20","subExpression":{"id":3695,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"3803:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3697,"nodeType":"ExpressionStatement","src":"3803:3:20"},"nodeType":"ForStatement","src":"3763:123:20"}]},"documentation":{"id":3660,"nodeType":"StructuredDocumentation","src":"3043:299:20","text":" @dev Function add  multiple recipients to the vesting contract\n @param _recipients Array of recipient addresses. The arrya length should be less than 230, otherwise it will overflow the gas limit\n @param _withdrawPercentages Corresponding percentages of the recipients"},"functionSelector":"114a76a1","id":3710,"implemented":true,"kind":"function","modifiers":[{"id":3669,"kind":"modifierInvocation","modifierName":{"id":3668,"name":"onlyOwner","nameLocations":["3476:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":570,"src":"3476:9:20"},"nodeType":"ModifierInvocation","src":"3476:9:20"}],"name":"addMultipleRecipients","nameLocation":"3356:21:20","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3663,"mutability":"mutable","name":"_recipients","nameLocation":"3404:11:20","nodeType":"VariableDeclaration","scope":3710,"src":"3387:28:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3661,"name":"address","nodeType":"ElementaryTypeName","src":"3387:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3662,"nodeType":"ArrayTypeName","src":"3387:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"_withdrawPercentages","nameLocation":"3442:20:20","nodeType":"VariableDeclaration","scope":3710,"src":"3425:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3664,"name":"uint256","nodeType":"ElementaryTypeName","src":"3425:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3665,"nodeType":"ArrayTypeName","src":"3425:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3377:91:20"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[],"src":"3486:0:20"},"scope":3848,"src":"3347:545:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3764,"nodeType":"Block","src":"4018:466:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3715,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"4036:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4049:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4036:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468652076657374696e67206861736e27742073746172746564","id":3718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4052:28:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87","typeString":"literal_string \"The vesting hasn't started\""},"value":"The vesting hasn't started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87","typeString":"literal_string \"The vesting hasn't started\""}],"id":3714,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4028:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4028:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3720,"nodeType":"ExpressionStatement","src":"4028:53:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3722,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4099:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4105:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"4099:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3724,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"4118:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4099:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468652076657374696e67206861736e27742073746172746564","id":3726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4129:28:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87","typeString":"literal_string \"The vesting hasn't started\""},"value":"The vesting hasn't started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87","typeString":"literal_string \"The vesting hasn't started\""}],"id":3721,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4091:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4091:67:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3728,"nodeType":"ExpressionStatement","src":"4091:67:20"},{"assignments":[3730,3732],"declarations":[{"constant":false,"id":3730,"mutability":"mutable","name":"owedAmount","nameLocation":"4178:10:20","nodeType":"VariableDeclaration","scope":3764,"src":"4170:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3729,"name":"uint256","nodeType":"ElementaryTypeName","src":"4170:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3732,"mutability":"mutable","name":"calculatedAmount","nameLocation":"4198:16:20","nodeType":"VariableDeclaration","scope":3764,"src":"4190:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3731,"name":"uint256","nodeType":"ElementaryTypeName","src":"4190:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3735,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3733,"name":"calculateAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"4218:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$_t_uint256_$","typeString":"function () view returns (uint256,uint256)"}},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4218:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4169:67:20"},{"expression":{"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3736,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"4246:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Recipient_$3499_storage_$","typeString":"mapping(address => struct Vesting.Recipient storage ref)"}},"id":3739,"indexExpression":{"expression":{"id":3737,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4257:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4261:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4257:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4246:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_storage","typeString":"struct Vesting.Recipient storage ref"}},"id":3740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4269:15:20","memberName":"withdrawnAmount","nodeType":"MemberAccess","referencedDeclaration":3496,"src":"4246:38:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3741,"name":"calculatedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"4287:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4246:57:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3743,"nodeType":"ExpressionStatement","src":"4246:57:20"},{"assignments":[3745],"declarations":[{"constant":false,"id":3745,"mutability":"mutable","name":"result","nameLocation":"4318:6:20","nodeType":"VariableDeclaration","scope":3764,"src":"4313:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3744,"name":"bool","nodeType":"ElementaryTypeName","src":"4313:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3752,"initialValue":{"arguments":[{"expression":{"id":3748,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4342:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4346:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4342:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3750,"name":"owedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3730,"src":"4354:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3746,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"4327:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1424","typeString":"contract IERC20"}},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4333:8:20","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1391,"src":"4327:14:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4327:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4313:52:20"},{"expression":{"arguments":[{"id":3754,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"4383:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686520636c61696d20776173206e6f74207375636365737366756c","id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4391:30:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a055115b009b714ca33e578386dd7f5a5668f8ed33b12c52cde00b077fafb96","typeString":"literal_string \"The claim was not successful\""},"value":"The claim was not successful"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a055115b009b714ca33e578386dd7f5a5668f8ed33b12c52cde00b077fafb96","typeString":"literal_string \"The claim was not successful\""}],"id":3753,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4375:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4375:47:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3757,"nodeType":"ExpressionStatement","src":"4375:47:20"},{"eventCall":{"arguments":[{"expression":{"id":3759,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4454:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4458:6:20","memberName":"sender","nodeType":"MemberAccess","src":"4454:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3761,"name":"owedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3730,"src":"4466:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3758,"name":"LogTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"4437:16:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4437:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3763,"nodeType":"EmitStatement","src":"4432:45:20"}]},"documentation":{"id":3711,"nodeType":"StructuredDocumentation","src":"3898:91:20","text":" @dev Function that withdraws all available tokens for the current period"},"functionSelector":"4e71d92d","id":3765,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"4003:5:20","nodeType":"FunctionDefinition","parameters":{"id":3712,"nodeType":"ParameterList","parameters":[],"src":"4008:2:20"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[],"src":"4018:0:20"},"scope":3848,"src":"3994:490:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3786,"nodeType":"Block","src":"4751:164:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3771,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4765:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4771:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"4765:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3773,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"4784:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4765:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3778,"nodeType":"IfStatement","src":"4761:67:20","trueBody":{"id":3777,"nodeType":"Block","src":"4795:33:20","statements":[{"expression":{"hexValue":"30","id":3775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4816:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3770,"id":3776,"nodeType":"Return","src":"4809:8:20"}]}},{"assignments":[3780,null],"declarations":[{"constant":false,"id":3780,"mutability":"mutable","name":"owedAmount","nameLocation":"4847:10:20","nodeType":"VariableDeclaration","scope":3786,"src":"4839:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3779,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":3783,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3781,"name":"calculateAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"4863:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$_t_uint256_$","typeString":"function () view returns (uint256,uint256)"}},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4838:43:20"},{"expression":{"id":3784,"name":"owedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"4898:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3770,"id":3785,"nodeType":"Return","src":"4891:17:20"}]},"documentation":{"id":3766,"nodeType":"StructuredDocumentation","src":"4490:194:20","text":" @dev Function that returns the amount that the user can withdraw at the current period.\n @return _owedAmount The amount that the user can withdraw at the current period."},"functionSelector":"3e2c3a5a","id":3787,"implemented":true,"kind":"function","modifiers":[],"name":"hasClaim","nameLocation":"4698:8:20","nodeType":"FunctionDefinition","parameters":{"id":3767,"nodeType":"ParameterList","parameters":[],"src":"4706:2:20"},"returnParameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"_owedAmount","nameLocation":"4738:11:20","nodeType":"VariableDeclaration","scope":3787,"src":"4730:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3768,"name":"uint256","nodeType":"ElementaryTypeName","src":"4730:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4729:21:20"},"scope":3848,"src":"4689:226:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3846,"nodeType":"Block","src":"5048:522:20","statements":[{"assignments":[3795],"declarations":[{"constant":false,"id":3795,"mutability":"mutable","name":"period","nameLocation":"5066:6:20","nodeType":"VariableDeclaration","scope":3846,"src":"5058:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3794,"name":"uint256","nodeType":"ElementaryTypeName","src":"5058:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3804,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3796,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5076:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5082:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"5076:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3798,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"5094:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3800,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5075:29:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"id":3801,"name":"periodLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"5108:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5107:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5075:46:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5058:63:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3805,"name":"period","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"5135:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":3806,"name":"cumulativeAmountsToVest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"5145:23:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage","typeString":"uint256[35] storage ref"}},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5169:6:20","memberName":"length","nodeType":"MemberAccess","src":"5145:30:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5135:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3817,"nodeType":"IfStatement","src":"5131:114:20","trueBody":{"id":3816,"nodeType":"Block","src":"5177:68:20","statements":[{"expression":{"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3809,"name":"period","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"5191:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3810,"name":"cumulativeAmountsToVest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"5200:23:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage","typeString":"uint256[35] storage ref"}},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5224:6:20","memberName":"length","nodeType":"MemberAccess","src":"5200:30:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5233:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5200:34:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5191:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3815,"nodeType":"ExpressionStatement","src":"5191:43:20"}]}},{"assignments":[3819],"declarations":[{"constant":false,"id":3819,"mutability":"mutable","name":"calculatedAmount","nameLocation":"5262:16:20","nodeType":"VariableDeclaration","scope":3846,"src":"5254:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3818,"name":"uint256","nodeType":"ElementaryTypeName","src":"5254:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3831,"initialValue":{"arguments":[{"baseExpression":{"id":3822,"name":"cumulativeAmountsToVest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"5319:23:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$35_storage","typeString":"uint256[35] storage ref"}},"id":3824,"indexExpression":{"id":3823,"name":"period","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"5343:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5319:31:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":3825,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"5364:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Recipient_$3499_storage_$","typeString":"mapping(address => struct Vesting.Recipient storage ref)"}},"id":3828,"indexExpression":{"expression":{"id":3826,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5375:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5379:6:20","memberName":"sender","nodeType":"MemberAccess","src":"5375:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5364:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_storage","typeString":"struct Vesting.Recipient storage ref"}},"id":3829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5387:18:20","memberName":"withdrawPercentage","nodeType":"MemberAccess","referencedDeclaration":3498,"src":"5364:41:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3820,"name":"PercentageCalculator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"5281:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PercentageCalculator_$3473_$","typeString":"type(library PercentageCalculator)"}},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5302:3:20","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":3472,"src":"5281:24:20","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5281:134:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5254:161:20"},{"assignments":[3833],"declarations":[{"constant":false,"id":3833,"mutability":"mutable","name":"owedAmount","nameLocation":"5433:10:20","nodeType":"VariableDeclaration","scope":3846,"src":"5425:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3832,"name":"uint256","nodeType":"ElementaryTypeName","src":"5425:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3841,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3834,"name":"calculatedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"5446:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"baseExpression":{"id":3835,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"5477:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Recipient_$3499_storage_$","typeString":"mapping(address => struct Vesting.Recipient storage ref)"}},"id":3838,"indexExpression":{"expression":{"id":3836,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5488:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5492:6:20","memberName":"sender","nodeType":"MemberAccess","src":"5488:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5477:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_Recipient_$3499_storage","typeString":"struct Vesting.Recipient storage ref"}},"id":3839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5500:15:20","memberName":"withdrawnAmount","nodeType":"MemberAccess","referencedDeclaration":3496,"src":"5477:38:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5446:69:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5425:90:20"},{"expression":{"components":[{"id":3842,"name":"owedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"5534:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3843,"name":"calculatedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"5546:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3844,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5533:30:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3793,"id":3845,"nodeType":"Return","src":"5526:37:20"}]},"id":3847,"implemented":true,"kind":"function","modifiers":[],"name":"calculateAmounts","nameLocation":"4930:16:20","nodeType":"FunctionDefinition","parameters":{"id":3788,"nodeType":"ParameterList","parameters":[],"src":"4946:2:20"},"returnParameters":{"id":3793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3790,"mutability":"mutable","name":"_owedAmount","nameLocation":"5004:11:20","nodeType":"VariableDeclaration","scope":3847,"src":"4996:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3789,"name":"uint256","nodeType":"ElementaryTypeName","src":"4996:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3792,"mutability":"mutable","name":"_calculatedAmount","nameLocation":"5025:17:20","nodeType":"VariableDeclaration","scope":3847,"src":"5017:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3791,"name":"uint256","nodeType":"ElementaryTypeName","src":"5017:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4995:48:20"},"scope":3848,"src":"4921:649:20","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3849,"src":"205:5367:20","usedErrors":[]}],"src":"32:5541:20"},"id":20},"contracts/token/AllianceBlockToken.sol":{"ast":{"absolutePath":"contracts/token/AllianceBlockToken.sol","exportedSymbols":{"AccessControl":[315],"AccessControlEnumerable":[440],"AllianceBlockToken":[3873],"Context":[1688],"ERC165":[1887],"ERC20":[1346],"ERC20Burnable":[1468],"ERC20Pausable":[1505],"ERC20PresetMinterPauser":[1666],"EnumerableSet":[3377],"IAccessControl":[513],"IAccessControlEnumerable":[538],"IERC165":[1899],"IERC20":[1424],"IERC20Metadata":[1530],"Math":[2764],"Pausable":[759],"Strings":[1863]},"id":3874,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3850,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:21"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol","file":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol","id":3851,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3874,"sourceUnit":1667,"src":"57:81:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3852,"name":"ERC20PresetMinterPauser","nameLocations":["171:23:21"],"nodeType":"IdentifierPath","referencedDeclaration":1666,"src":"171:23:21"},"id":3853,"nodeType":"InheritanceSpecifier","src":"171:23:21"}],"canonicalName":"AllianceBlockToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3873,"linearizedBaseContracts":[3873,1666,1505,759,1468,1346,1530,1424,440,315,1887,1899,538,513,1688],"name":"AllianceBlockToken","nameLocation":"149:18:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":3860,"nodeType":"Block","src":"271:2:21","statements":[]},"id":3861,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"416c6c69616e6365426c6f636b20546f6b656e","id":3856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"240:21:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_ea71d49c789581e8a8e0c7062164e3517162845d12328b825036f668b2a611fe","typeString":"literal_string \"AllianceBlock Token\""},"value":"AllianceBlock Token"},{"hexValue":"414c4254","id":3857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"263:6:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_516eeb0ad98cc87a5e58c9885909efda924aa77b6c2cb29aac5a48b9d95fba1a","typeString":"literal_string \"ALBT\""},"value":"ALBT"}],"id":3858,"kind":"baseConstructorSpecifier","modifierName":{"id":3855,"name":"ERC20PresetMinterPauser","nameLocations":["216:23:21"],"nodeType":"IdentifierPath","referencedDeclaration":1666,"src":"216:23:21"},"nodeType":"ModifierInvocation","src":"216:54:21"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3854,"nodeType":"ParameterList","parameters":[],"src":"213:2:21"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[],"src":"271:0:21"},"scope":3873,"src":"202:71:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3871,"nodeType":"Block","src":"328:50:21","statements":[{"expression":{"arguments":[{"id":3867,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"351:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3868,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"364:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3866,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"340:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"340:30:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3870,"nodeType":"ExpressionStatement","src":"340:30:21"}]},"functionSelector":"54f1e126","id":3872,"implemented":true,"kind":"function","modifiers":[],"name":"removeMinterRole","nameLocation":"289:16:21","nodeType":"FunctionDefinition","parameters":{"id":3864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3863,"mutability":"mutable","name":"owner","nameLocation":"314:5:21","nodeType":"VariableDeclaration","scope":3872,"src":"306:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3862,"name":"address","nodeType":"ElementaryTypeName","src":"306:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"305:15:21"},"returnParameters":{"id":3865,"nodeType":"ParameterList","parameters":[],"src":"328:0:21"},"scope":3873,"src":"280:98:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3874,"src":"140:240:21","usedErrors":[]}],"src":"32:349:21"},"id":21}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/AccessControlEnumerable.sol":{"AccessControlEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":334,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)3090_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3090_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3090_storage"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3090_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3089,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2775_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2775_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2770,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2774,"contract":"@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"IAccessControlEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":546,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/Pausable.sol":{"Pausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":669,"contract":"@openzeppelin/contracts/security/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_804":{"entryPoint":null,"id":804,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"210:776:22","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:22"},"nodeType":"YulFunctionCall","src":"261:12:22"},"nodeType":"YulExpressionStatement","src":"261:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:22"},"nodeType":"YulFunctionCall","src":"234:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:22"},"nodeType":"YulFunctionCall","src":"223:35:22"},"nodeType":"YulIf","src":"220:55:22"},{"nodeType":"YulVariableDeclaration","src":"284:23:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:22"},"nodeType":"YulFunctionCall","src":"294:13:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:22"},"nodeType":"YulFunctionCall","src":"330:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:22"},"nodeType":"YulFunctionCall","src":"326:18:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:22"},"nodeType":"YulFunctionCall","src":"369:18:22"},"nodeType":"YulExpressionStatement","src":"369:18:22"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:22"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:22"},"nodeType":"YulFunctionCall","src":"356:10:22"},"nodeType":"YulIf","src":"353:36:22"},{"nodeType":"YulVariableDeclaration","src":"398:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:22"},"nodeType":"YulFunctionCall","src":"408:7:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:22"},"nodeType":"YulFunctionCall","src":"438:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:22"},"nodeType":"YulFunctionCall","src":"498:13:22"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:22"},"nodeType":"YulFunctionCall","src":"494:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:22"},"nodeType":"YulFunctionCall","src":"490:31:22"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:22"},"nodeType":"YulFunctionCall","src":"486:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:22"},"nodeType":"YulFunctionCall","src":"474:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:22"},"nodeType":"YulFunctionCall","src":"588:18:22"},"nodeType":"YulExpressionStatement","src":"588:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:22"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:22"},"nodeType":"YulFunctionCall","src":"542:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:22"},"nodeType":"YulFunctionCall","src":"562:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:46:22"},"nodeType":"YulIf","src":"536:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:22"},"nodeType":"YulFunctionCall","src":"617:22:22"},"nodeType":"YulExpressionStatement","src":"617:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:22"},"nodeType":"YulFunctionCall","src":"648:18:22"},"nodeType":"YulExpressionStatement","src":"648:18:22"},{"nodeType":"YulVariableDeclaration","src":"675:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:22"},"nodeType":"YulFunctionCall","src":"737:12:22"},"nodeType":"YulExpressionStatement","src":"737:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:22"},"nodeType":"YulFunctionCall","src":"708:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:22"},"nodeType":"YulFunctionCall","src":"704:24:22"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:22"},"nodeType":"YulFunctionCall","src":"701:33:22"},"nodeType":"YulIf","src":"698:53:22"},{"nodeType":"YulVariableDeclaration","src":"760:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:22"},"nodeType":"YulFunctionCall","src":"850:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:22"},"nodeType":"YulFunctionCall","src":"846:23:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:22"},"nodeType":"YulFunctionCall","src":"881:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:22"},"nodeType":"YulFunctionCall","src":"877:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:22"},"nodeType":"YulFunctionCall","src":"871:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:22"},"nodeType":"YulFunctionCall","src":"839:63:22"},"nodeType":"YulExpressionStatement","src":"839:63:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:22"},"nodeType":"YulFunctionCall","src":"787:9:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:22","statements":[{"nodeType":"YulAssignment","src":"799:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:22"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:22"},"nodeType":"YulFunctionCall","src":"804:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:22","statements":[]},"src":"779:133:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:22"},"nodeType":"YulFunctionCall","src":"932:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:22"},"nodeType":"YulFunctionCall","src":"928:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:22"},"nodeType":"YulFunctionCall","src":"921:35:22"},"nodeType":"YulExpressionStatement","src":"921:35:22"},{"nodeType":"YulAssignment","src":"965:15:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:22"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:22","type":""}],"src":"146:840:22"},{"body":{"nodeType":"YulBlock","src":"1109:444:22","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:22"},"nodeType":"YulFunctionCall","src":"1157:12:22"},"nodeType":"YulExpressionStatement","src":"1157:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:22"},"nodeType":"YulFunctionCall","src":"1126:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:22"},"nodeType":"YulFunctionCall","src":"1122:32:22"},"nodeType":"YulIf","src":"1119:52:22"},{"nodeType":"YulVariableDeclaration","src":"1180:30:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:22"},"nodeType":"YulFunctionCall","src":"1194:16:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:22"},"nodeType":"YulFunctionCall","src":"1233:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:22"},"nodeType":"YulFunctionCall","src":"1229:18:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:22"},"nodeType":"YulFunctionCall","src":"1276:12:22"},"nodeType":"YulExpressionStatement","src":"1276:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:22"},"nodeType":"YulFunctionCall","src":"1259:14:22"},"nodeType":"YulIf","src":"1256:34:22"},{"nodeType":"YulAssignment","src":"1299:71:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:22"},"nodeType":"YulFunctionCall","src":"1338:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:22"},"nodeType":"YulFunctionCall","src":"1309:61:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:22"},"nodeType":"YulFunctionCall","src":"1401:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:22"},"nodeType":"YulFunctionCall","src":"1395:25:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:22"},"nodeType":"YulFunctionCall","src":"1451:12:22"},"nodeType":"YulExpressionStatement","src":"1451:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:22"},"nodeType":"YulFunctionCall","src":"1432:16:22"},"nodeType":"YulIf","src":"1429:36:22"},{"nodeType":"YulAssignment","src":"1474:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:22"},"nodeType":"YulFunctionCall","src":"1513:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:22"},"nodeType":"YulFunctionCall","src":"1484:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:22"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:22","type":""}],"src":"991:562:22"},{"body":{"nodeType":"YulBlock","src":"1613:325:22","statements":[{"nodeType":"YulAssignment","src":"1623:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:22"},"nodeType":"YulFunctionCall","src":"1633:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:22"},"nodeType":"YulFunctionCall","src":"1680:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:22","statements":[{"nodeType":"YulAssignment","src":"1733:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:22"},"nodeType":"YulFunctionCall","src":"1743:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:22"},"nodeType":"YulFunctionCall","src":"1704:26:22"},"nodeType":"YulIf","src":"1701:61:22"},{"body":{"nodeType":"YulBlock","src":"1821:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:22"},"nodeType":"YulFunctionCall","src":"1845:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:22"},"nodeType":"YulFunctionCall","src":"1835:31:22"},"nodeType":"YulExpressionStatement","src":"1835:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:22"},"nodeType":"YulFunctionCall","src":"1879:15:22"},"nodeType":"YulExpressionStatement","src":"1879:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:22"},"nodeType":"YulFunctionCall","src":"1907:15:22"},"nodeType":"YulExpressionStatement","src":"1907:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:22"},"nodeType":"YulFunctionCall","src":"1797:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:22"},"nodeType":"YulFunctionCall","src":"1774:38:22"},"nodeType":"YulIf","src":"1771:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:22","type":""}],"src":"1558:380:22"},{"body":{"nodeType":"YulBlock","src":"1999:65:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:22","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:22"},"nodeType":"YulFunctionCall","src":"2009:14:22"},"nodeType":"YulExpressionStatement","src":"2009:14:22"},{"nodeType":"YulAssignment","src":"2032:26:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:22"},"nodeType":"YulFunctionCall","src":"2040:18:22"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:22"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:22","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:22","type":""}],"src":"1943:121:22"},{"body":{"nodeType":"YulBlock","src":"2150:464:22","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:22","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:22","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:22"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:22"},"nodeType":"YulFunctionCall","src":"2221:17:22"},"nodeType":"YulExpressionStatement","src":"2221:17:22"},{"nodeType":"YulVariableDeclaration","src":"2251:31:22","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:22"},"nodeType":"YulFunctionCall","src":"2263:19:22"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:22","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:22"},"nodeType":"YulFunctionCall","src":"2331:19:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:22"},"nodeType":"YulFunctionCall","src":"2324:27:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:22"},"nodeType":"YulFunctionCall","src":"2314:38:22"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:22","statements":[{"nodeType":"YulAssignment","src":"2391:19:22","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:22"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:22"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:22","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:22"},"nodeType":"YulFunctionCall","src":"2368:20:22"},"nodeType":"YulIf","src":"2365:47:22"},{"nodeType":"YulVariableDeclaration","src":"2425:41:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:22","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:22"},"nodeType":"YulFunctionCall","src":"2452:12:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:22"},"nodeType":"YulFunctionCall","src":"2445:20:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:22"},"nodeType":"YulFunctionCall","src":"2435:31:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:22","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:22"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:22","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:22"},"nodeType":"YulFunctionCall","src":"2579:17:22"},"nodeType":"YulExpressionStatement","src":"2579:17:22"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:22"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:22"},"nodeType":"YulFunctionCall","src":"2524:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:22","statements":[{"nodeType":"YulAssignment","src":"2540:22:22","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:22"},"nodeType":"YulFunctionCall","src":"2549:13:22"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:22"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:22","statements":[]},"src":"2516:82:22"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:22","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:22"},"nodeType":"YulFunctionCall","src":"2163:11:22"},"nodeType":"YulIf","src":"2160:448:22"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:22","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:22","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:22","type":""}],"src":"2069:545:22"},{"body":{"nodeType":"YulBlock","src":"2704:81:22","statements":[{"nodeType":"YulAssignment","src":"2714:65:22","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:22"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:22","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:22"},"nodeType":"YulFunctionCall","src":"2743:11:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:22"},"nodeType":"YulFunctionCall","src":"2756:6:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:22"},"nodeType":"YulFunctionCall","src":"2739:24:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:22"},"nodeType":"YulFunctionCall","src":"2735:29:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:22"},"nodeType":"YulFunctionCall","src":"2725:40:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:22","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:22"},"nodeType":"YulFunctionCall","src":"2767:11:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:22"},"nodeType":"YulFunctionCall","src":"2722:57:22"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:22"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:22","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:22","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:22","type":""}],"src":"2619:166:22"},{"body":{"nodeType":"YulBlock","src":"2886:1256:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:22"},"nodeType":"YulFunctionCall","src":"2910:10:22"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:22"},"nodeType":"YulFunctionCall","src":"2965:18:22"},"nodeType":"YulExpressionStatement","src":"2965:18:22"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:22"},"nodeType":"YulFunctionCall","src":"2947:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:22"},"nodeType":"YulFunctionCall","src":"2943:18:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:22"},"nodeType":"YulFunctionCall","src":"2932:30:22"},"nodeType":"YulIf","src":"2929:56:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:22"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:22"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:22"},"nodeType":"YulFunctionCall","src":"3070:11:22"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:22"},"nodeType":"YulFunctionCall","src":"3044:38:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:22"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:22"},"nodeType":"YulFunctionCall","src":"2994:97:22"},"nodeType":"YulExpressionStatement","src":"2994:97:22"},{"nodeType":"YulVariableDeclaration","src":"3100:18:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:22","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:22","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:22","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:22","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:22"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:22"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:22","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:22","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:22"},"nodeType":"YulFunctionCall","src":"3270:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:22"},"nodeType":"YulFunctionCall","src":"3258:20:22"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:22","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:22"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:22"},"nodeType":"YulFunctionCall","src":"3305:35:22"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:22","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:22"},"nodeType":"YulFunctionCall","src":"3479:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:22"},"nodeType":"YulFunctionCall","src":"3473:26:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:22"},"nodeType":"YulFunctionCall","src":"3458:42:22"},"nodeType":"YulExpressionStatement","src":"3458:42:22"},{"nodeType":"YulAssignment","src":"3517:24:22","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:22"},"nodeType":"YulFunctionCall","src":"3527:14:22"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:22"}]},{"nodeType":"YulAssignment","src":"3558:40:22","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:22"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:22"},"nodeType":"YulFunctionCall","src":"3571:27:22"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:22"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:22"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:22"},"nodeType":"YulFunctionCall","src":"3384:14:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:22","statements":[{"nodeType":"YulAssignment","src":"3401:24:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:22"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:22"},"nodeType":"YulFunctionCall","src":"3406:19:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:22","statements":[]},"src":"3376:236:22"},{"body":{"nodeType":"YulBlock","src":"3660:166:22","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:22","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:22"},"nodeType":"YulFunctionCall","src":"3701:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:22"},"nodeType":"YulFunctionCall","src":"3695:26:22"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:22","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:22"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:22","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:22"},"nodeType":"YulFunctionCall","src":"3780:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:22","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:22"},"nodeType":"YulFunctionCall","src":"3776:24:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:22"},"nodeType":"YulFunctionCall","src":"3802:6:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:22"},"nodeType":"YulFunctionCall","src":"3772:37:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:22"},"nodeType":"YulFunctionCall","src":"3768:42:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:22"},"nodeType":"YulFunctionCall","src":"3753:58:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:22"},"nodeType":"YulFunctionCall","src":"3738:74:22"},"nodeType":"YulExpressionStatement","src":"3738:74:22"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:22"},"nodeType":"YulFunctionCall","src":"3628:19:22"},"nodeType":"YulIf","src":"3625:201:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:22","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:22"},"nodeType":"YulFunctionCall","src":"3856:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:22"},"nodeType":"YulFunctionCall","src":"3852:22:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:22"},"nodeType":"YulFunctionCall","src":"3839:36:22"},"nodeType":"YulExpressionStatement","src":"3839:36:22"}]},"nodeType":"YulCase","src":"3222:663:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:22","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:22","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:22","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:22","statements":[{"nodeType":"YulAssignment","src":"3983:35:22","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:22"},"nodeType":"YulFunctionCall","src":"3998:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:22"},"nodeType":"YulFunctionCall","src":"3992:26:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:22"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:22"},"nodeType":"YulIf","src":"3943:89:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:22"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:22"},"nodeType":"YulFunctionCall","src":"4058:67:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:22"},"nodeType":"YulFunctionCall","src":"4045:81:22"},"nodeType":"YulExpressionStatement","src":"4045:81:22"}]},"nodeType":"YulCase","src":"3894:242:22","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:22","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:22"},"nodeType":"YulFunctionCall","src":"3199:14:22"},"nodeType":"YulSwitch","src":"3192:944:22"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:22","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:22","type":""}],"src":"2790:1352:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000bf438038062000bf483398101604081905262000034916200011f565b600362000042838262000218565b50600462000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61090080620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e3919061074a565b60405180910390f35b6100ff6100fa3660046107b4565b610278565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107de565b610292565b604051601281526020016100e3565b6100ff6101513660046107b4565b6102b6565b61011361016436600461081a565b6001600160a01b031660009081526020819052604090205490565b6100d66102f5565b6100ff6101953660046107b4565b610304565b6100ff6101a83660046107b4565b6103b3565b6101136101bb36600461083c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f59061086f565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061086f565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a08582856104e5565b6102ab858585610577565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f09087906108a9565b6103c1565b6060600480546101f59061086f565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b600033610286818585610577565b6001600160a01b0383166104235760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161039d565b6001600160a01b0382166104845760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161039d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461057157818110156105645760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b61057184848484036103c1565b50505050565b6001600160a01b0383166105f35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106555760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161039d565b6001600160a01b038316600090815260208190526040902054818110156106e45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610571565b600060208083528351808285015260005b818110156107775785810183015185820160400152820161075b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107af57600080fd5b919050565b600080604083850312156107c757600080fd5b6107d083610798565b946020939093013593505050565b6000806000606084860312156107f357600080fd5b6107fc84610798565b925061080a60208501610798565b9150604084013590509250925092565b60006020828403121561082c57600080fd5b61083582610798565b9392505050565b6000806040838503121561084f57600080fd5b61085883610798565b915061086660208401610798565b90509250929050565b600181811c9082168061088357607f821691505b6020821081036108a357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028c57634e487b7160e01b600052601160045260246000fdfea264697066735822122031edb941fa2978770b4d072dcb3775d6a286a23c4d239621586b3fb23a24c25164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xBF4 CODESIZE SUB DUP1 PUSH3 0xBF4 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x3 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x900 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x304 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x221 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x243 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x26E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x251 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP6 DUP3 DUP6 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x2AB DUP6 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x286 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2F0 SWAP1 DUP8 SWAP1 PUSH2 0x8A9 JUMP JUMPDEST PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x571 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x564 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x39D JUMP JUMPDEST PUSH2 0x571 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x571 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x777 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x75B JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D0 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FC DUP5 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP PUSH2 0x80A PUSH1 0x20 DUP6 ADD PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x835 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x84F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x858 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0x866 PUSH1 0x20 DUP5 ADD PUSH2 0x798 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x883 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8A3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x28C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xED 0xB9 COINBASE STATICCALL 0x29 PUSH25 0x770B4D072DCB3775D6A286A23C4D239621586B3FB23A24C251 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1401:11610:6:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2042:5;:13;2050:5;2042;:13;:::i;:::-;-1:-1:-1;2065:7:6;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;1401:11610;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:22;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:22;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:22:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:22;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:22;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:22;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:22;;;3992:26;3943:89;-1:-1:-1;;2747:1:22;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:22;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:22;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:22;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:22:o;:::-;1401:11610:6;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1345":{"entryPoint":null,"id":1345,"parameterSlots":3,"returnSlots":0},"@_approve_1280":{"entryPoint":961,"id":1280,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1334":{"entryPoint":null,"id":1334,"parameterSlots":3,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_1323":{"entryPoint":1253,"id":1323,"parameterSlots":3,"returnSlots":0},"@_transfer_1106":{"entryPoint":1399,"id":1106,"parameterSlots":3,"returnSlots":0},"@allowance_901":{"entryPoint":null,"id":901,"parameterSlots":2,"returnSlots":1},"@approve_926":{"entryPoint":632,"id":926,"parameterSlots":2,"returnSlots":1},"@balanceOf_858":{"entryPoint":null,"id":858,"parameterSlots":1,"returnSlots":1},"@decimals_834":{"entryPoint":null,"id":834,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1029":{"entryPoint":772,"id":1029,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_988":{"entryPoint":694,"id":988,"parameterSlots":2,"returnSlots":1},"@name_814":{"entryPoint":486,"id":814,"parameterSlots":0,"returnSlots":1},"@symbol_824":{"entryPoint":757,"id":824,"parameterSlots":0,"returnSlots":1},"@totalSupply_844":{"entryPoint":null,"id":844,"parameterSlots":0,"returnSlots":1},"@transferFrom_959":{"entryPoint":658,"id":959,"parameterSlots":3,"returnSlots":1},"@transfer_883":{"entryPoint":947,"id":883,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":1944,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2074,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2108,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2014,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1972,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1866,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2217,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2159,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5777:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:427:22","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:22","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:22","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:22"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:22"},"nodeType":"YulFunctionCall","src":"166:21:22"},"nodeType":"YulExpressionStatement","src":"166:21:22"},{"nodeType":"YulVariableDeclaration","src":"196:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:22"},"nodeType":"YulFunctionCall","src":"210:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:22"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:22"},"nodeType":"YulFunctionCall","src":"239:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:22"},"nodeType":"YulFunctionCall","src":"232:34:22"},"nodeType":"YulExpressionStatement","src":"232:34:22"},{"nodeType":"YulVariableDeclaration","src":"275:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:22"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:22"},"nodeType":"YulFunctionCall","src":"369:17:22"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:22"},"nodeType":"YulFunctionCall","src":"365:26:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:22"},"nodeType":"YulFunctionCall","src":"403:14:22"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:22"},"nodeType":"YulFunctionCall","src":"399:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:22"},"nodeType":"YulFunctionCall","src":"393:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:22"},"nodeType":"YulFunctionCall","src":"358:66:22"},"nodeType":"YulExpressionStatement","src":"358:66:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:22"},"nodeType":"YulFunctionCall","src":"302:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:22","statements":[{"nodeType":"YulAssignment","src":"318:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:22"},"nodeType":"YulFunctionCall","src":"323:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:22","statements":[]},"src":"294:140:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"458:9:22"},{"name":"length","nodeType":"YulIdentifier","src":"469:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"454:3:22"},"nodeType":"YulFunctionCall","src":"454:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"478:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"450:3:22"},"nodeType":"YulFunctionCall","src":"450:31:22"},{"kind":"number","nodeType":"YulLiteral","src":"483:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"443:6:22"},"nodeType":"YulFunctionCall","src":"443:42:22"},"nodeType":"YulExpressionStatement","src":"443:42:22"},{"nodeType":"YulAssignment","src":"494:62:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"529:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"537:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:22"},"nodeType":"YulFunctionCall","src":"525:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"546:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"542:3:22"},"nodeType":"YulFunctionCall","src":"542:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"521:3:22"},"nodeType":"YulFunctionCall","src":"521:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"506:3:22"},"nodeType":"YulFunctionCall","src":"506:45:22"},{"kind":"number","nodeType":"YulLiteral","src":"553:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:22"},"nodeType":"YulFunctionCall","src":"502:54:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:22","type":""}],"src":"14:548:22"},{"body":{"nodeType":"YulBlock","src":"616:147:22","statements":[{"nodeType":"YulAssignment","src":"626:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"648:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"635:12:22"},"nodeType":"YulFunctionCall","src":"635:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"626:5:22"}]},{"body":{"nodeType":"YulBlock","src":"741:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"750:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"753:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"743:6:22"},"nodeType":"YulFunctionCall","src":"743:12:22"},"nodeType":"YulExpressionStatement","src":"743:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"677:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"688:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"695:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"684:3:22"},"nodeType":"YulFunctionCall","src":"684:54:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"674:2:22"},"nodeType":"YulFunctionCall","src":"674:65:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"667:6:22"},"nodeType":"YulFunctionCall","src":"667:73:22"},"nodeType":"YulIf","src":"664:93:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"606:5:22","type":""}],"src":"567:196:22"},{"body":{"nodeType":"YulBlock","src":"855:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"901:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"910:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"913:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"903:6:22"},"nodeType":"YulFunctionCall","src":"903:12:22"},"nodeType":"YulExpressionStatement","src":"903:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"876:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"885:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"872:3:22"},"nodeType":"YulFunctionCall","src":"872:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"897:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"868:3:22"},"nodeType":"YulFunctionCall","src":"868:32:22"},"nodeType":"YulIf","src":"865:52:22"},{"nodeType":"YulAssignment","src":"926:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"955:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"936:18:22"},"nodeType":"YulFunctionCall","src":"936:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"926:6:22"}]},{"nodeType":"YulAssignment","src":"974:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1001:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1012:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"997:3:22"},"nodeType":"YulFunctionCall","src":"997:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"984:12:22"},"nodeType":"YulFunctionCall","src":"984:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"974:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"824:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"836:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"844:6:22","type":""}],"src":"768:254:22"},{"body":{"nodeType":"YulBlock","src":"1122:92:22","statements":[{"nodeType":"YulAssignment","src":"1132:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1144:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1155:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1140:3:22"},"nodeType":"YulFunctionCall","src":"1140:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1132:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1199:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1192:6:22"},"nodeType":"YulFunctionCall","src":"1192:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1185:6:22"},"nodeType":"YulFunctionCall","src":"1185:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1167:6:22"},"nodeType":"YulFunctionCall","src":"1167:41:22"},"nodeType":"YulExpressionStatement","src":"1167:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1091:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1102:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1113:4:22","type":""}],"src":"1027:187:22"},{"body":{"nodeType":"YulBlock","src":"1320:76:22","statements":[{"nodeType":"YulAssignment","src":"1330:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1353:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:22"},"nodeType":"YulFunctionCall","src":"1338:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1330:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1372:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"1383:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1365:6:22"},"nodeType":"YulFunctionCall","src":"1365:25:22"},"nodeType":"YulExpressionStatement","src":"1365:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1289:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1300:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1311:4:22","type":""}],"src":"1219:177:22"},{"body":{"nodeType":"YulBlock","src":"1505:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"1551:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1560:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1563:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1553:6:22"},"nodeType":"YulFunctionCall","src":"1553:12:22"},"nodeType":"YulExpressionStatement","src":"1553:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1526:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:22"},"nodeType":"YulFunctionCall","src":"1522:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1518:3:22"},"nodeType":"YulFunctionCall","src":"1518:32:22"},"nodeType":"YulIf","src":"1515:52:22"},{"nodeType":"YulAssignment","src":"1576:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1605:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1586:18:22"},"nodeType":"YulFunctionCall","src":"1586:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1576:6:22"}]},{"nodeType":"YulAssignment","src":"1624:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1657:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1668:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1653:3:22"},"nodeType":"YulFunctionCall","src":"1653:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1634:18:22"},"nodeType":"YulFunctionCall","src":"1634:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1624:6:22"}]},{"nodeType":"YulAssignment","src":"1681:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1708:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1719:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1704:3:22"},"nodeType":"YulFunctionCall","src":"1704:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1691:12:22"},"nodeType":"YulFunctionCall","src":"1691:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1681:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1455:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1466:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1478:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1486:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1494:6:22","type":""}],"src":"1401:328:22"},{"body":{"nodeType":"YulBlock","src":"1831:87:22","statements":[{"nodeType":"YulAssignment","src":"1841:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1853:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1864:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1849:3:22"},"nodeType":"YulFunctionCall","src":"1849:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1841:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1883:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1898:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1906:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1894:3:22"},"nodeType":"YulFunctionCall","src":"1894:17:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1876:6:22"},"nodeType":"YulFunctionCall","src":"1876:36:22"},"nodeType":"YulExpressionStatement","src":"1876:36:22"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1800:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1811:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1822:4:22","type":""}],"src":"1734:184:22"},{"body":{"nodeType":"YulBlock","src":"1993:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2039:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2048:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2051:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2041:6:22"},"nodeType":"YulFunctionCall","src":"2041:12:22"},"nodeType":"YulExpressionStatement","src":"2041:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2014:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2010:3:22"},"nodeType":"YulFunctionCall","src":"2010:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2035:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2006:3:22"},"nodeType":"YulFunctionCall","src":"2006:32:22"},"nodeType":"YulIf","src":"2003:52:22"},{"nodeType":"YulAssignment","src":"2064:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2093:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2074:18:22"},"nodeType":"YulFunctionCall","src":"2074:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2064:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:22","type":""}],"src":"1923:186:22"},{"body":{"nodeType":"YulBlock","src":"2201:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"2247:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2256:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2259:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2249:6:22"},"nodeType":"YulFunctionCall","src":"2249:12:22"},"nodeType":"YulExpressionStatement","src":"2249:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2222:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2231:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2218:3:22"},"nodeType":"YulFunctionCall","src":"2218:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2243:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2214:3:22"},"nodeType":"YulFunctionCall","src":"2214:32:22"},"nodeType":"YulIf","src":"2211:52:22"},{"nodeType":"YulAssignment","src":"2272:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2282:18:22"},"nodeType":"YulFunctionCall","src":"2282:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2272:6:22"}]},{"nodeType":"YulAssignment","src":"2320:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2353:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2364:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2349:3:22"},"nodeType":"YulFunctionCall","src":"2349:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2330:18:22"},"nodeType":"YulFunctionCall","src":"2330:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2320:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2159:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2170:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2182:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2190:6:22","type":""}],"src":"2114:260:22"},{"body":{"nodeType":"YulBlock","src":"2434:325:22","statements":[{"nodeType":"YulAssignment","src":"2444:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2458:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2461:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2454:3:22"},"nodeType":"YulFunctionCall","src":"2454:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2444:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"2475:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2505:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"2511:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2501:3:22"},"nodeType":"YulFunctionCall","src":"2501:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2479:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2552:31:22","statements":[{"nodeType":"YulAssignment","src":"2554:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2568:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2576:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2564:3:22"},"nodeType":"YulFunctionCall","src":"2564:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2554:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2532:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2525:6:22"},"nodeType":"YulFunctionCall","src":"2525:26:22"},"nodeType":"YulIf","src":"2522:61:22"},{"body":{"nodeType":"YulBlock","src":"2642:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2663:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2670:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2675:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2666:3:22"},"nodeType":"YulFunctionCall","src":"2666:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2656:6:22"},"nodeType":"YulFunctionCall","src":"2656:31:22"},"nodeType":"YulExpressionStatement","src":"2656:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2707:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2710:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2700:6:22"},"nodeType":"YulFunctionCall","src":"2700:15:22"},"nodeType":"YulExpressionStatement","src":"2700:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2735:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2738:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2728:6:22"},"nodeType":"YulFunctionCall","src":"2728:15:22"},"nodeType":"YulExpressionStatement","src":"2728:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2598:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2621:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2629:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2618:2:22"},"nodeType":"YulFunctionCall","src":"2618:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2595:2:22"},"nodeType":"YulFunctionCall","src":"2595:38:22"},"nodeType":"YulIf","src":"2592:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2414:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2423:6:22","type":""}],"src":"2379:380:22"},{"body":{"nodeType":"YulBlock","src":"2812:174:22","statements":[{"nodeType":"YulAssignment","src":"2822:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2833:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2836:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2829:3:22"},"nodeType":"YulFunctionCall","src":"2829:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2822:3:22"}]},{"body":{"nodeType":"YulBlock","src":"2869:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2890:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2897:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2902:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2893:3:22"},"nodeType":"YulFunctionCall","src":"2893:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2883:6:22"},"nodeType":"YulFunctionCall","src":"2883:31:22"},"nodeType":"YulExpressionStatement","src":"2883:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2934:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2937:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2927:6:22"},"nodeType":"YulFunctionCall","src":"2927:15:22"},"nodeType":"YulExpressionStatement","src":"2927:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2962:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2965:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2955:6:22"},"nodeType":"YulFunctionCall","src":"2955:15:22"},"nodeType":"YulExpressionStatement","src":"2955:15:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2853:1:22"},{"name":"sum","nodeType":"YulIdentifier","src":"2856:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2850:2:22"},"nodeType":"YulFunctionCall","src":"2850:10:22"},"nodeType":"YulIf","src":"2847:133:22"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2795:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"2798:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2804:3:22","type":""}],"src":"2764:222:22"},{"body":{"nodeType":"YulBlock","src":"3165:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3182:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3175:6:22"},"nodeType":"YulFunctionCall","src":"3175:21:22"},"nodeType":"YulExpressionStatement","src":"3175:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3216:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3227:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3212:3:22"},"nodeType":"YulFunctionCall","src":"3212:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"3232:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3205:6:22"},"nodeType":"YulFunctionCall","src":"3205:30:22"},"nodeType":"YulExpressionStatement","src":"3205:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3255:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3266:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3251:3:22"},"nodeType":"YulFunctionCall","src":"3251:18:22"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3271:34:22","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3244:6:22"},"nodeType":"YulFunctionCall","src":"3244:62:22"},"nodeType":"YulExpressionStatement","src":"3244:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3326:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3337:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3322:3:22"},"nodeType":"YulFunctionCall","src":"3322:18:22"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3342:7:22","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3315:6:22"},"nodeType":"YulFunctionCall","src":"3315:35:22"},"nodeType":"YulExpressionStatement","src":"3315:35:22"},{"nodeType":"YulAssignment","src":"3359:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3371:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3382:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3367:3:22"},"nodeType":"YulFunctionCall","src":"3367:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3359:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3142:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3156:4:22","type":""}],"src":"2991:401:22"},{"body":{"nodeType":"YulBlock","src":"3571:226:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3588:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3599:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3581:6:22"},"nodeType":"YulFunctionCall","src":"3581:21:22"},"nodeType":"YulExpressionStatement","src":"3581:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3622:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3633:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3618:3:22"},"nodeType":"YulFunctionCall","src":"3618:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"3638:2:22","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3611:6:22"},"nodeType":"YulFunctionCall","src":"3611:30:22"},"nodeType":"YulExpressionStatement","src":"3611:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3661:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3672:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3657:3:22"},"nodeType":"YulFunctionCall","src":"3657:18:22"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"3677:34:22","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3650:6:22"},"nodeType":"YulFunctionCall","src":"3650:62:22"},"nodeType":"YulExpressionStatement","src":"3650:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3732:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3743:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3728:3:22"},"nodeType":"YulFunctionCall","src":"3728:18:22"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"3748:6:22","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3721:6:22"},"nodeType":"YulFunctionCall","src":"3721:34:22"},"nodeType":"YulExpressionStatement","src":"3721:34:22"},{"nodeType":"YulAssignment","src":"3764:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3776:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3787:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3772:3:22"},"nodeType":"YulFunctionCall","src":"3772:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3764:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3548:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3562:4:22","type":""}],"src":"3397:400:22"},{"body":{"nodeType":"YulBlock","src":"3976:224:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3993:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4004:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3986:6:22"},"nodeType":"YulFunctionCall","src":"3986:21:22"},"nodeType":"YulExpressionStatement","src":"3986:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4027:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4038:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4023:3:22"},"nodeType":"YulFunctionCall","src":"4023:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4043:2:22","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4016:6:22"},"nodeType":"YulFunctionCall","src":"4016:30:22"},"nodeType":"YulExpressionStatement","src":"4016:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4066:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4077:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4062:3:22"},"nodeType":"YulFunctionCall","src":"4062:18:22"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4082:34:22","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4055:6:22"},"nodeType":"YulFunctionCall","src":"4055:62:22"},"nodeType":"YulExpressionStatement","src":"4055:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4137:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4148:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:22"},"nodeType":"YulFunctionCall","src":"4133:18:22"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4153:4:22","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4126:6:22"},"nodeType":"YulFunctionCall","src":"4126:32:22"},"nodeType":"YulExpressionStatement","src":"4126:32:22"},{"nodeType":"YulAssignment","src":"4167:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4179:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4190:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4175:3:22"},"nodeType":"YulFunctionCall","src":"4175:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4167:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3953:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3967:4:22","type":""}],"src":"3802:398:22"},{"body":{"nodeType":"YulBlock","src":"4379:179:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4396:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4407:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4389:6:22"},"nodeType":"YulFunctionCall","src":"4389:21:22"},"nodeType":"YulExpressionStatement","src":"4389:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4430:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4441:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4426:3:22"},"nodeType":"YulFunctionCall","src":"4426:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4446:2:22","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4419:6:22"},"nodeType":"YulFunctionCall","src":"4419:30:22"},"nodeType":"YulExpressionStatement","src":"4419:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4469:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4480:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4465:3:22"},"nodeType":"YulFunctionCall","src":"4465:18:22"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4485:31:22","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4458:6:22"},"nodeType":"YulFunctionCall","src":"4458:59:22"},"nodeType":"YulExpressionStatement","src":"4458:59:22"},{"nodeType":"YulAssignment","src":"4526:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4538:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4549:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4534:3:22"},"nodeType":"YulFunctionCall","src":"4534:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4526:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4356:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4370:4:22","type":""}],"src":"4205:353:22"},{"body":{"nodeType":"YulBlock","src":"4737:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4754:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4765:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4747:6:22"},"nodeType":"YulFunctionCall","src":"4747:21:22"},"nodeType":"YulExpressionStatement","src":"4747:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:22"},"nodeType":"YulFunctionCall","src":"4784:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4804:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4777:6:22"},"nodeType":"YulFunctionCall","src":"4777:30:22"},"nodeType":"YulExpressionStatement","src":"4777:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4827:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4838:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4823:3:22"},"nodeType":"YulFunctionCall","src":"4823:18:22"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"4843:34:22","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4816:6:22"},"nodeType":"YulFunctionCall","src":"4816:62:22"},"nodeType":"YulExpressionStatement","src":"4816:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4909:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:22"},"nodeType":"YulFunctionCall","src":"4894:18:22"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"4914:7:22","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:22"},"nodeType":"YulFunctionCall","src":"4887:35:22"},"nodeType":"YulExpressionStatement","src":"4887:35:22"},{"nodeType":"YulAssignment","src":"4931:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4943:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4954:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4939:3:22"},"nodeType":"YulFunctionCall","src":"4939:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4931:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4714:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4728:4:22","type":""}],"src":"4563:401:22"},{"body":{"nodeType":"YulBlock","src":"5143:225:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5160:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5171:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5153:6:22"},"nodeType":"YulFunctionCall","src":"5153:21:22"},"nodeType":"YulExpressionStatement","src":"5153:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5194:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5205:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5190:3:22"},"nodeType":"YulFunctionCall","src":"5190:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5210:2:22","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5183:6:22"},"nodeType":"YulFunctionCall","src":"5183:30:22"},"nodeType":"YulExpressionStatement","src":"5183:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5233:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5244:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5229:3:22"},"nodeType":"YulFunctionCall","src":"5229:18:22"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5249:34:22","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5222:6:22"},"nodeType":"YulFunctionCall","src":"5222:62:22"},"nodeType":"YulExpressionStatement","src":"5222:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5304:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5315:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5300:3:22"},"nodeType":"YulFunctionCall","src":"5300:18:22"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5320:5:22","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5293:6:22"},"nodeType":"YulFunctionCall","src":"5293:33:22"},"nodeType":"YulExpressionStatement","src":"5293:33:22"},{"nodeType":"YulAssignment","src":"5335:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5358:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5343:3:22"},"nodeType":"YulFunctionCall","src":"5343:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5335:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5120:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5134:4:22","type":""}],"src":"4969:399:22"},{"body":{"nodeType":"YulBlock","src":"5547:228:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5564:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5575:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5557:6:22"},"nodeType":"YulFunctionCall","src":"5557:21:22"},"nodeType":"YulExpressionStatement","src":"5557:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5598:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5609:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5594:3:22"},"nodeType":"YulFunctionCall","src":"5594:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5614:2:22","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5587:6:22"},"nodeType":"YulFunctionCall","src":"5587:30:22"},"nodeType":"YulExpressionStatement","src":"5587:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5637:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5648:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5633:3:22"},"nodeType":"YulFunctionCall","src":"5633:18:22"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"5653:34:22","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5626:6:22"},"nodeType":"YulFunctionCall","src":"5626:62:22"},"nodeType":"YulExpressionStatement","src":"5626:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5708:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5719:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5704:3:22"},"nodeType":"YulFunctionCall","src":"5704:18:22"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5724:8:22","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5697:6:22"},"nodeType":"YulFunctionCall","src":"5697:36:22"},"nodeType":"YulExpressionStatement","src":"5697:36:22"},{"nodeType":"YulAssignment","src":"5742:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5754:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5765:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5750:3:22"},"nodeType":"YulFunctionCall","src":"5750:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5742:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5524:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5538:4:22","type":""}],"src":"5373:402:22"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e3919061074a565b60405180910390f35b6100ff6100fa3660046107b4565b610278565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107de565b610292565b604051601281526020016100e3565b6100ff6101513660046107b4565b6102b6565b61011361016436600461081a565b6001600160a01b031660009081526020819052604090205490565b6100d66102f5565b6100ff6101953660046107b4565b610304565b6100ff6101a83660046107b4565b6103b3565b6101136101bb36600461083c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f59061086f565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061086f565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a08582856104e5565b6102ab858585610577565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f09087906108a9565b6103c1565b6060600480546101f59061086f565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b600033610286818585610577565b6001600160a01b0383166104235760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161039d565b6001600160a01b0382166104845760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161039d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461057157818110156105645760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b61057184848484036103c1565b50505050565b6001600160a01b0383166105f35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106555760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161039d565b6001600160a01b038316600090815260208190526040902054818110156106e45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610571565b600060208083528351808285015260005b818110156107775785810183015185820160400152820161075b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107af57600080fd5b919050565b600080604083850312156107c757600080fd5b6107d083610798565b946020939093013593505050565b6000806000606084860312156107f357600080fd5b6107fc84610798565b925061080a60208501610798565b9150604084013590509250925092565b60006020828403121561082c57600080fd5b61083582610798565b9392505050565b6000806040838503121561084f57600080fd5b61085883610798565b915061086660208401610798565b90509250929050565b600181811c9082168061088357607f821691505b6020821081036108a357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028c57634e487b7160e01b600052601160045260246000fdfea264697066735822122031edb941fa2978770b4d072dcb3775d6a286a23c4d239621586b3fb23a24c25164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x304 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x221 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x243 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x26E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x251 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP6 DUP3 DUP6 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x2AB DUP6 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x286 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2F0 SWAP1 DUP8 SWAP1 PUSH2 0x8A9 JUMP JUMPDEST PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x571 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x564 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x39D JUMP JUMPDEST PUSH2 0x571 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x571 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x777 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x75B JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D0 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FC DUP5 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP PUSH2 0x80A PUSH1 0x20 DUP6 ADD PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x835 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x84F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x858 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0x866 PUSH1 0x20 DUP5 ADD PUSH2 0x798 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x883 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8A3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x28C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xED 0xB9 COINBASE STATICCALL 0x29 PUSH25 0x770B4D072DCB3775D6A286A23C4D239621586B3FB23A24C251 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1401:11610:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:22;;1185:22;1167:41;;1155:2;1140:18;4431:197:6;1027:187:22;3242:106:6;3329:12;;3242:106;;;1365:25:22;;;1353:2;1338:18;3242:106:6;1219:177:22;5190:286:6;;;;;;:::i;:::-;;:::i;3091:91::-;;;3173:2;1876:36:22;;1864:2;1849:18;3091:91:6;1734:184:22;5871:234:6;;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:6;3480:7;3506:18;;;;;;;;;;;;3406:125;2365:102;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4089:18:6;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:12;4568:32:6;719:10:12;4584:7:6;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:12;5373:38:6;5389:4;719:10:12;5404:6:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:6;;5190:286;-1:-1:-1;;;;5190:286:6:o;5871:234::-;719:10:12;5959:4:6;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:6;;;;;;;;;;5959:4;;719:10:12;6013:64:6;;719:10:12;;4089:27:6;;6038:38;;6066:10;;6038:38;:::i;:::-;6013:8;:64::i;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;719:10:12;6685:4:6;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:6;;;;;;;;;;6685:4;;719:10:12;6829:15:6;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:6;;3193:2:22;6801:85:6;;;3175:21:22;3232:2;3212:18;;;3205:30;3271:34;3251:18;;;3244:62;3342:7;3322:18;;;3315:35;3367:19;;6801:85:6;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:12;3860:28:6;719:10:12;3877:2:6;3881:6;3860:9;:28::i;10504:370::-;-1:-1:-1;;;;;10635:19:6;;10627:68;;;;-1:-1:-1;;;10627:68:6;;3599:2:22;10627:68:6;;;3581:21:22;3638:2;3618:18;;;3611:30;3677:34;3657:18;;;3650:62;-1:-1:-1;;;3728:18:22;;;3721:34;3772:19;;10627:68:6;3397:400:22;10627:68:6;-1:-1:-1;;;;;10713:21:6;;10705:68;;;;-1:-1:-1;;;10705:68:6;;4004:2:22;10705:68:6;;;3986:21:22;4043:2;4023:18;;;4016:30;4082:34;4062:18;;;4055:62;-1:-1:-1;;;4133:18:22;;;4126:32;4175:19;;10705:68:6;3802:398:22;10705:68:6;-1:-1:-1;;;;;10784:18:6;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1365:25:22;;;10835:32:6;;1338:18:22;10835:32:6;;;;;;;10504:370;;;:::o;11155:441::-;-1:-1:-1;;;;;4089:18:6;;;11285:24;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11351:37:6;;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:6;;4407:2:22;11404:68:6;;;4389:21:22;4446:2;4426:18;;;4419:30;4485:31;4465:18;;;4458:59;4534:18;;11404:68:6;4205:353:22;11404:68:6;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:6;;7591:68;;;;-1:-1:-1;;;7591:68:6;;4765:2:22;7591:68:6;;;4747:21:22;4804:2;4784:18;;;4777:30;4843:34;4823:18;;;4816:62;4914:7;4894:18;;;4887:35;4939:19;;7591:68:6;4563:401:22;7591:68:6;-1:-1:-1;;;;;7677:16:6;;7669:64;;;;-1:-1:-1;;;7669:64:6;;5171:2:22;7669:64:6;;;5153:21:22;5210:2;5190:18;;;5183:30;5249:34;5229:18;;;5222:62;-1:-1:-1;;;5300:18:22;;;5293:33;5343:19;;7669:64:6;4969:399:22;7669:64:6;-1:-1:-1;;;;;7815:15:6;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:6;;5575:2:22;7840:72:6;;;5557:21:22;5614:2;5594:18;;;5587:30;5653:34;5633:18;;;5626:62;5724:8;5704:18;;;5697:36;5750:19;;7840:72:6;5373:402:22;7840:72:6;-1:-1:-1;;;;;7946:15:6;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1365:25:22;;;8161:13:6;;8210:26;;1338:18:22;8210:26:6;;;;;;;8247:37;12180:121;14:548:22;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:22;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:22:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:186::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;2074:29;2093:9;2074:29;:::i;:::-;2064:39;1923:186;-1:-1:-1;;;1923:186:22:o;2114:260::-;2182:6;2190;2243:2;2231:9;2222:7;2218:23;2214:32;2211:52;;;2259:1;2256;2249:12;2211:52;2282:29;2301:9;2282:29;:::i;:::-;2272:39;;2330:38;2364:2;2353:9;2349:18;2330:38;:::i;:::-;2320:48;;2114:260;;;;;:::o;2379:380::-;2458:1;2454:12;;;;2501;;;2522:61;;2576:4;2568:6;2564:17;2554:27;;2522:61;2629:2;2621:6;2618:14;2598:18;2595:38;2592:161;;2675:10;2670:3;2666:20;2663:1;2656:31;2710:4;2707:1;2700:15;2738:4;2735:1;2728:15;2592:161;;2379:380;;;:::o;2764:222::-;2829:9;;;2850:10;;;2847:133;;;2902:10;2897:3;2893:20;2890:1;2883:31;2937:4;2934:1;2927:15;2965:4;2962:1;2955:15"},"gasEstimates":{"creation":{"codeDepositCost":"460800","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24651","balanceOf(address)":"2585","decimals()":"244","decreaseAllowance(address,uint256)":"26922","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2304","transfer(address,uint256)":"51094","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":775,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":781,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":783,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":785,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":787,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ERC20Burnable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":775,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":781,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":783,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":785,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":787,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol":{"ERC20Pausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","paused()":"5c975abb","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":\"ERC20Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":775,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":781,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":783,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":785,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":787,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":669,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable","label":"_paused","offset":0,"slot":"5","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol":{"ERC20PresetMinterPauser":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"{ERC20} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts. _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"constructor":{"details":"Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract. See {ERC20-constructor}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{"details":"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."},"name()":{"details":"Returns the name of the token."},"pause()":{"details":"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"unpause()":{"details":"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1587":{"entryPoint":null,"id":1587,"parameterSlots":2,"returnSlots":0},"@_678":{"entryPoint":null,"id":678,"parameterSlots":0,"returnSlots":0},"@_804":{"entryPoint":null,"id":804,"parameterSlots":2,"returnSlots":0},"@_add_2817":{"entryPoint":480,"id":2817,"parameterSlots":2,"returnSlots":1},"@_contains_2920":{"entryPoint":null,"id":2920,"parameterSlots":2,"returnSlots":1},"@_grantRole_283":{"entryPoint":288,"id":283,"parameterSlots":2,"returnSlots":0},"@_grantRole_415":{"entryPoint":221,"id":415,"parameterSlots":2,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_setupRole_223":{"entryPoint":205,"id":223,"parameterSlots":2,"returnSlots":0},"@add_3117":{"entryPoint":448,"id":3117,"parameterSlots":2,"returnSlots":1},"@hasRole_79":{"entryPoint":null,"id":79,"parameterSlots":2,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":584,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":759,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":925,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1007,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":865,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":562,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"210:776:22","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:22"},"nodeType":"YulFunctionCall","src":"261:12:22"},"nodeType":"YulExpressionStatement","src":"261:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:22"},"nodeType":"YulFunctionCall","src":"234:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:22"},"nodeType":"YulFunctionCall","src":"223:35:22"},"nodeType":"YulIf","src":"220:55:22"},{"nodeType":"YulVariableDeclaration","src":"284:23:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:22"},"nodeType":"YulFunctionCall","src":"294:13:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:22"},"nodeType":"YulFunctionCall","src":"330:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:22"},"nodeType":"YulFunctionCall","src":"326:18:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:22"},"nodeType":"YulFunctionCall","src":"369:18:22"},"nodeType":"YulExpressionStatement","src":"369:18:22"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:22"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:22"},"nodeType":"YulFunctionCall","src":"356:10:22"},"nodeType":"YulIf","src":"353:36:22"},{"nodeType":"YulVariableDeclaration","src":"398:17:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:22"},"nodeType":"YulFunctionCall","src":"408:7:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:22"},"nodeType":"YulFunctionCall","src":"438:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:22"},"nodeType":"YulFunctionCall","src":"498:13:22"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:22"},"nodeType":"YulFunctionCall","src":"494:22:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:22"},"nodeType":"YulFunctionCall","src":"490:31:22"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:22"},"nodeType":"YulFunctionCall","src":"486:40:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:22"},"nodeType":"YulFunctionCall","src":"474:53:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:22"},"nodeType":"YulFunctionCall","src":"588:18:22"},"nodeType":"YulExpressionStatement","src":"588:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:22"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:22"},"nodeType":"YulFunctionCall","src":"542:18:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:22"},"nodeType":"YulFunctionCall","src":"562:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:46:22"},"nodeType":"YulIf","src":"536:72:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:22"},"nodeType":"YulFunctionCall","src":"617:22:22"},"nodeType":"YulExpressionStatement","src":"617:22:22"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:22"},"nodeType":"YulFunctionCall","src":"648:18:22"},"nodeType":"YulExpressionStatement","src":"648:18:22"},{"nodeType":"YulVariableDeclaration","src":"675:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:22"},"nodeType":"YulFunctionCall","src":"737:12:22"},"nodeType":"YulExpressionStatement","src":"737:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:22"},"nodeType":"YulFunctionCall","src":"708:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:22"},"nodeType":"YulFunctionCall","src":"704:24:22"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:22"},"nodeType":"YulFunctionCall","src":"701:33:22"},"nodeType":"YulIf","src":"698:53:22"},{"nodeType":"YulVariableDeclaration","src":"760:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:22"},"nodeType":"YulFunctionCall","src":"850:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:22"},"nodeType":"YulFunctionCall","src":"846:23:22"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:22"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:22"},"nodeType":"YulFunctionCall","src":"881:14:22"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:22"},"nodeType":"YulFunctionCall","src":"877:23:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:22"},"nodeType":"YulFunctionCall","src":"871:30:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:22"},"nodeType":"YulFunctionCall","src":"839:63:22"},"nodeType":"YulExpressionStatement","src":"839:63:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:22"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:22"},"nodeType":"YulFunctionCall","src":"787:9:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:22","statements":[{"nodeType":"YulAssignment","src":"799:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:22"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:22"},"nodeType":"YulFunctionCall","src":"804:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:22","statements":[]},"src":"779:133:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:22"},"nodeType":"YulFunctionCall","src":"932:15:22"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:22"},"nodeType":"YulFunctionCall","src":"928:24:22"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:22"},"nodeType":"YulFunctionCall","src":"921:35:22"},"nodeType":"YulExpressionStatement","src":"921:35:22"},{"nodeType":"YulAssignment","src":"965:15:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:22"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:22","type":""}],"src":"146:840:22"},{"body":{"nodeType":"YulBlock","src":"1109:444:22","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:22"},"nodeType":"YulFunctionCall","src":"1157:12:22"},"nodeType":"YulExpressionStatement","src":"1157:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:22"},"nodeType":"YulFunctionCall","src":"1126:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:22"},"nodeType":"YulFunctionCall","src":"1122:32:22"},"nodeType":"YulIf","src":"1119:52:22"},{"nodeType":"YulVariableDeclaration","src":"1180:30:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:22"},"nodeType":"YulFunctionCall","src":"1194:16:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:22"},"nodeType":"YulFunctionCall","src":"1233:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:22"},"nodeType":"YulFunctionCall","src":"1229:18:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:22"},"nodeType":"YulFunctionCall","src":"1276:12:22"},"nodeType":"YulExpressionStatement","src":"1276:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:22"},"nodeType":"YulFunctionCall","src":"1259:14:22"},"nodeType":"YulIf","src":"1256:34:22"},{"nodeType":"YulAssignment","src":"1299:71:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:22"},"nodeType":"YulFunctionCall","src":"1338:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:22"},"nodeType":"YulFunctionCall","src":"1309:61:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:22"},"nodeType":"YulFunctionCall","src":"1401:18:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:22"},"nodeType":"YulFunctionCall","src":"1395:25:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:22"},"nodeType":"YulFunctionCall","src":"1451:12:22"},"nodeType":"YulExpressionStatement","src":"1451:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:22"},"nodeType":"YulFunctionCall","src":"1432:16:22"},"nodeType":"YulIf","src":"1429:36:22"},{"nodeType":"YulAssignment","src":"1474:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:22"},"nodeType":"YulFunctionCall","src":"1513:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:22"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:22"},"nodeType":"YulFunctionCall","src":"1484:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:22"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:22","type":""}],"src":"991:562:22"},{"body":{"nodeType":"YulBlock","src":"1613:325:22","statements":[{"nodeType":"YulAssignment","src":"1623:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:22"},"nodeType":"YulFunctionCall","src":"1633:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:22"},"nodeType":"YulFunctionCall","src":"1680:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:22","statements":[{"nodeType":"YulAssignment","src":"1733:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:22"},"nodeType":"YulFunctionCall","src":"1743:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:22"},"nodeType":"YulFunctionCall","src":"1704:26:22"},"nodeType":"YulIf","src":"1701:61:22"},{"body":{"nodeType":"YulBlock","src":"1821:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:22"},"nodeType":"YulFunctionCall","src":"1845:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:22"},"nodeType":"YulFunctionCall","src":"1835:31:22"},"nodeType":"YulExpressionStatement","src":"1835:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:22"},"nodeType":"YulFunctionCall","src":"1879:15:22"},"nodeType":"YulExpressionStatement","src":"1879:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:22"},"nodeType":"YulFunctionCall","src":"1907:15:22"},"nodeType":"YulExpressionStatement","src":"1907:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:22"},"nodeType":"YulFunctionCall","src":"1797:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:22"},"nodeType":"YulFunctionCall","src":"1774:38:22"},"nodeType":"YulIf","src":"1771:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:22","type":""}],"src":"1558:380:22"},{"body":{"nodeType":"YulBlock","src":"1999:65:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:22","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:22"},"nodeType":"YulFunctionCall","src":"2009:14:22"},"nodeType":"YulExpressionStatement","src":"2009:14:22"},{"nodeType":"YulAssignment","src":"2032:26:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:22"},"nodeType":"YulFunctionCall","src":"2040:18:22"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:22"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:22","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:22","type":""}],"src":"1943:121:22"},{"body":{"nodeType":"YulBlock","src":"2150:464:22","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:22","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:22","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:22"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:22"},"nodeType":"YulFunctionCall","src":"2221:17:22"},"nodeType":"YulExpressionStatement","src":"2221:17:22"},{"nodeType":"YulVariableDeclaration","src":"2251:31:22","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:22"},"nodeType":"YulFunctionCall","src":"2263:19:22"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:22","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:22"},"nodeType":"YulFunctionCall","src":"2331:19:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:22"},"nodeType":"YulFunctionCall","src":"2324:27:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:22"},"nodeType":"YulFunctionCall","src":"2314:38:22"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:22","statements":[{"nodeType":"YulAssignment","src":"2391:19:22","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:22"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:22"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:22","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:22"},"nodeType":"YulFunctionCall","src":"2368:20:22"},"nodeType":"YulIf","src":"2365:47:22"},{"nodeType":"YulVariableDeclaration","src":"2425:41:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:22","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:22"},"nodeType":"YulFunctionCall","src":"2452:12:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:22"},"nodeType":"YulFunctionCall","src":"2445:20:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:22"},"nodeType":"YulFunctionCall","src":"2435:31:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:22","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:22"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:22","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:22"},"nodeType":"YulFunctionCall","src":"2579:17:22"},"nodeType":"YulExpressionStatement","src":"2579:17:22"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:22"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:22"},"nodeType":"YulFunctionCall","src":"2524:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:22","statements":[{"nodeType":"YulAssignment","src":"2540:22:22","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:22"},"nodeType":"YulFunctionCall","src":"2549:13:22"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:22"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:22","statements":[]},"src":"2516:82:22"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:22","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:22"},"nodeType":"YulFunctionCall","src":"2163:11:22"},"nodeType":"YulIf","src":"2160:448:22"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:22","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:22","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:22","type":""}],"src":"2069:545:22"},{"body":{"nodeType":"YulBlock","src":"2704:81:22","statements":[{"nodeType":"YulAssignment","src":"2714:65:22","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:22"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:22","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:22"},"nodeType":"YulFunctionCall","src":"2743:11:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:22"},"nodeType":"YulFunctionCall","src":"2756:6:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:22"},"nodeType":"YulFunctionCall","src":"2739:24:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:22"},"nodeType":"YulFunctionCall","src":"2735:29:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:22"},"nodeType":"YulFunctionCall","src":"2725:40:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:22","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:22"},"nodeType":"YulFunctionCall","src":"2767:11:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:22"},"nodeType":"YulFunctionCall","src":"2722:57:22"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:22"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:22","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:22","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:22","type":""}],"src":"2619:166:22"},{"body":{"nodeType":"YulBlock","src":"2886:1256:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:22"},"nodeType":"YulFunctionCall","src":"2910:10:22"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:22"},"nodeType":"YulFunctionCall","src":"2965:18:22"},"nodeType":"YulExpressionStatement","src":"2965:18:22"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:22"},"nodeType":"YulFunctionCall","src":"2947:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:22"},"nodeType":"YulFunctionCall","src":"2943:18:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:22"},"nodeType":"YulFunctionCall","src":"2932:30:22"},"nodeType":"YulIf","src":"2929:56:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:22"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:22"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:22"},"nodeType":"YulFunctionCall","src":"3070:11:22"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:22"},"nodeType":"YulFunctionCall","src":"3044:38:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:22"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:22"},"nodeType":"YulFunctionCall","src":"2994:97:22"},"nodeType":"YulExpressionStatement","src":"2994:97:22"},{"nodeType":"YulVariableDeclaration","src":"3100:18:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:22","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:22","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:22","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:22","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:22"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:22"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:22","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:22","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:22"},"nodeType":"YulFunctionCall","src":"3270:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:22"},"nodeType":"YulFunctionCall","src":"3258:20:22"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:22","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:22"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:22"},"nodeType":"YulFunctionCall","src":"3305:35:22"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:22","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:22"},"nodeType":"YulFunctionCall","src":"3479:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:22"},"nodeType":"YulFunctionCall","src":"3473:26:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:22"},"nodeType":"YulFunctionCall","src":"3458:42:22"},"nodeType":"YulExpressionStatement","src":"3458:42:22"},{"nodeType":"YulAssignment","src":"3517:24:22","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:22"},"nodeType":"YulFunctionCall","src":"3527:14:22"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:22"}]},{"nodeType":"YulAssignment","src":"3558:40:22","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:22"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:22"},"nodeType":"YulFunctionCall","src":"3571:27:22"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:22"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:22"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:22"},"nodeType":"YulFunctionCall","src":"3384:14:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:22","statements":[{"nodeType":"YulAssignment","src":"3401:24:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:22"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:22"},"nodeType":"YulFunctionCall","src":"3406:19:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:22","statements":[]},"src":"3376:236:22"},{"body":{"nodeType":"YulBlock","src":"3660:166:22","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:22","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:22"},"nodeType":"YulFunctionCall","src":"3701:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:22"},"nodeType":"YulFunctionCall","src":"3695:26:22"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:22","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:22"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:22","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:22"},"nodeType":"YulFunctionCall","src":"3780:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:22","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:22"},"nodeType":"YulFunctionCall","src":"3776:24:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:22"},"nodeType":"YulFunctionCall","src":"3802:6:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:22"},"nodeType":"YulFunctionCall","src":"3772:37:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:22"},"nodeType":"YulFunctionCall","src":"3768:42:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:22"},"nodeType":"YulFunctionCall","src":"3753:58:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:22"},"nodeType":"YulFunctionCall","src":"3738:74:22"},"nodeType":"YulExpressionStatement","src":"3738:74:22"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:22"},"nodeType":"YulFunctionCall","src":"3628:19:22"},"nodeType":"YulIf","src":"3625:201:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:22","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:22"},"nodeType":"YulFunctionCall","src":"3856:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:22"},"nodeType":"YulFunctionCall","src":"3852:22:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:22"},"nodeType":"YulFunctionCall","src":"3839:36:22"},"nodeType":"YulExpressionStatement","src":"3839:36:22"}]},"nodeType":"YulCase","src":"3222:663:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:22","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:22","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:22","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:22","statements":[{"nodeType":"YulAssignment","src":"3983:35:22","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:22"},"nodeType":"YulFunctionCall","src":"3998:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:22"},"nodeType":"YulFunctionCall","src":"3992:26:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:22"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:22"},"nodeType":"YulIf","src":"3943:89:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:22"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:22"},"nodeType":"YulFunctionCall","src":"4058:67:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:22"},"nodeType":"YulFunctionCall","src":"4045:81:22"},"nodeType":"YulExpressionStatement","src":"4045:81:22"}]},"nodeType":"YulCase","src":"3894:242:22","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:22","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:22"},"nodeType":"YulFunctionCall","src":"3199:14:22"},"nodeType":"YulSwitch","src":"3192:944:22"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:22","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:22","type":""}],"src":"2790:1352:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1E85 CODESIZE SUB DUP1 PUSH3 0x1E85 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x2F7 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x5 PUSH3 0x44 DUP4 DUP3 PUSH3 0x3EF JUMP JUMPDEST POP PUSH1 0x6 PUSH3 0x53 DUP3 DUP3 PUSH3 0x3EF JUMP JUMPDEST POP POP PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH3 0x6D PUSH1 0x0 CALLER PUSH3 0xCD JUMP JUMPDEST PUSH3 0x99 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH3 0xCD JUMP JUMPDEST PUSH3 0xC5 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH3 0xCD JUMP JUMPDEST POP POP PUSH3 0x4BB JUMP JUMPDEST PUSH3 0xD9 DUP3 DUP3 PUSH3 0xDD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0xF4 DUP3 DUP3 PUSH3 0x120 PUSH1 0x20 SHL PUSH3 0x994 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH3 0x11B SWAP2 DUP4 SWAP1 PUSH3 0xA32 PUSH3 0x1C0 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0xD9 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x17C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D7 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x1E0 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x229 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x1DA JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x1DA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x277 JUMPI PUSH3 0x277 PUSH3 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2A2 JUMPI PUSH3 0x2A2 PUSH3 0x232 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x2E3 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x2C4 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x331 DUP7 DUP4 DUP8 ADD PUSH3 0x248 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x357 DUP6 DUP3 DUP7 ADD PUSH3 0x248 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x376 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x397 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x11B JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x3C6 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x3E7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3D2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x40B JUMPI PUSH3 0x40B PUSH3 0x232 JUMP JUMPDEST PUSH3 0x423 DUP2 PUSH3 0x41C DUP5 SLOAD PUSH3 0x361 JUMP JUMPDEST DUP5 PUSH3 0x39D JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x45B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x442 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x3E7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x48C JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x46B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x4AB JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x19BA DUP1 PUSH3 0x4CB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x3D3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x40D JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2B3 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x206 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x166E JUMP JUMPDEST PUSH2 0x46D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F9 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x16BC JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x542 JUMP JUMPDEST PUSH2 0x21D PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x1771 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x590 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x621 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x660 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x2C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x706 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0x7AC JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x21D PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x7B9 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x7CE JUMP JUMPDEST PUSH2 0x33B PUSH2 0x336 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D1 JUMP JUMPDEST PUSH2 0x872 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0x891 JUMP JUMPDEST PUSH2 0x21D PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x8A0 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x94A JUMP JUMPDEST PUSH2 0x21D PUSH2 0x3CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST PUSH2 0x21D PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x408 CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x21D PUSH2 0x41B CALLDATASIZE PUSH1 0x4 PUSH2 0x17F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x21D PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x492 JUMPI POP PUSH2 0x492 DUP3 PUSH2 0xA47 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x181D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4D3 SWAP1 PUSH2 0x181D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x520 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x520 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x503 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x538 DUP2 DUP6 DUP6 PUSH2 0xA7C JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x550 DUP6 DUP3 DUP6 PUSH2 0xBA0 JUMP JUMPDEST PUSH2 0x55B DUP6 DUP6 DUP6 PUSH2 0xC32 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x581 DUP2 PUSH2 0xE17 JUMP JUMPDEST PUSH2 0x58B DUP4 DUP4 PUSH2 0xE21 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x61D DUP3 DUP3 PUSH2 0xE43 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x538 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x65B SWAP1 DUP8 SWAP1 PUSH2 0x186D JUMP JUMPDEST PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x68A PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x361 JUMP JUMPDEST PUSH2 0x6FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F20756E706175736500000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x704 PUSH2 0xE65 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x730 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0x361 JUMP JUMPDEST PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7665206D696E74657220726F6C6520746F206D696E7400000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x61D DUP3 DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x7B6 CALLER DUP3 PUSH2 0xF84 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7C4 DUP3 CALLER DUP4 PUSH2 0xBA0 JUMP JUMPDEST PUSH2 0x61D DUP3 DUP3 PUSH2 0xF84 JUMP JUMPDEST PUSH2 0x7F8 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x361 JUMP JUMPDEST PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F207061757365000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x704 PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x88A SWAP1 DUP4 PUSH2 0x1101 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x181D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x55B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x538 DUP2 DUP6 DUP6 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x492 SWAP1 PUSH2 0x110D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x98A DUP2 PUSH2 0xE17 JUMP JUMPDEST PUSH2 0x58B DUP4 DUP4 PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x61D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x9EE CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x88A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1117 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x492 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x492 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC2C JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xC2C DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xA7C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD10 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xD1B DUP4 DUP4 DUP4 PUSH2 0x1166 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xE0A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0x7B6 DUP2 CALLER PUSH2 0x1171 JUMP JUMPDEST PUSH2 0xE2B DUP3 DUP3 PUSH2 0x994 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x58B SWAP1 DUP3 PUSH2 0xA32 JUMP JUMPDEST PUSH2 0xE4D DUP3 DUP3 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x58B SWAP1 DUP3 PUSH2 0x1263 JUMP JUMPDEST PUSH2 0xE6D PUSH2 0x1278 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xF19 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1166 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF2B SWAP2 SWAP1 PUSH2 0x186D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xFF0 DUP3 PUSH1 0x0 DUP4 PUSH2 0x1166 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1064 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xE9A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x88A DUP4 DUP4 PUSH2 0x131D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x492 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x115E JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x492 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x492 JUMP JUMPDEST PUSH2 0x58B DUP4 DUP4 DUP4 PUSH2 0x1347 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x61D JUMPI PUSH2 0x11A2 DUP2 PUSH2 0x13C0 JUMP JUMPDEST PUSH2 0x11AD DUP4 PUSH1 0x20 PUSH2 0x13D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11BE SWAP3 SWAP2 SWAP1 PUSH2 0x1880 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x60A SWAP2 PUSH1 0x4 ADD PUSH2 0x16BC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x61D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x88A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x157B JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1334 JUMPI PUSH2 0x1334 PUSH2 0x1901 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x58B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696C652070617573656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x492 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x13E1 DUP4 PUSH1 0x2 PUSH2 0x1917 JUMP JUMPDEST PUSH2 0x13EC SWAP1 PUSH1 0x2 PUSH2 0x186D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1404 JUMPI PUSH2 0x1404 PUSH2 0x192E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x142E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1449 JUMPI PUSH2 0x1449 PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1478 JUMPI PUSH2 0x1478 PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x149C DUP5 PUSH1 0x2 PUSH2 0x1917 JUMP JUMPDEST PUSH2 0x14A7 SWAP1 PUSH1 0x1 PUSH2 0x186D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x152C JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x14E8 JUMPI PUSH2 0x14E8 PUSH2 0x1901 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14FE JUMPI PUSH2 0x14FE PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1525 DUP2 PUSH2 0x1944 JUMP JUMPDEST SWAP1 POP PUSH2 0x14AA JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x88A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1664 JUMPI PUSH1 0x0 PUSH2 0x159F PUSH1 0x1 DUP4 PUSH2 0x195B JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x15B3 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x195B JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1618 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15D3 JUMPI PUSH2 0x15D3 PUSH2 0x1901 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x15F6 JUMPI PUSH2 0x15F6 PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1629 JUMPI PUSH2 0x1629 PUSH2 0x196E JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x169B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x16DB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1698 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1706 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x171E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1727 DUP4 PUSH2 0x16EF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1753 DUP5 PUSH2 0x16EF JUMP JUMPDEST SWAP3 POP PUSH2 0x1761 PUSH1 0x20 DUP6 ADD PUSH2 0x16EF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x17AD PUSH1 0x20 DUP5 ADD PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88A DUP3 PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x180F DUP4 PUSH2 0x16EF JUMP JUMPDEST SWAP2 POP PUSH2 0x17AD PUSH1 0x20 DUP5 ADD PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1831 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1851 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x492 JUMPI PUSH2 0x492 PUSH2 0x1857 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x18B8 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1698 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x18F5 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1698 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x492 JUMPI PUSH2 0x492 PUSH2 0x1857 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1953 JUMPI PUSH2 0x1953 PUSH2 0x1857 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x492 JUMPI PUSH2 0x492 PUSH2 0x1857 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT 0xD5 PUSH32 0x8E917BE3BD05C6831C22647FB2D99832831550E995669213868D5F5F0564736F PUSH13 0x63430008110033000000000000 ","sourceMap":"1005:2013:11:-:0;;;1424:230;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1484:4;1490:6;2042:5:6;:13;1484:4:11;2042:5:6;:13;:::i;:::-;-1:-1:-1;2065:7:6;:17;2075:7;2065;:17;:::i;:::-;-1:-1:-1;;996:7:5;:15;;-1:-1:-1;;996:15:5;;;-1:-1:-1;1508:44:11::1;-1:-1:-1::0;719:10:12;1508::11::1;:44::i;:::-;1563:37;1148:24;719:10:12::0;1508::11::1;:44::i;1563:37::-;1610;1216:24;719:10:12::0;1508::11::1;:44::i;1610:37::-;1424:230:::0;;1005:2013;;6811:110:0;6889:25;6900:4;6906:7;6889:10;:25::i;:::-;6811:110;;:::o;1978:166:1:-;2065:31;2082:4;2088:7;2065:16;;;;;:31;;:::i;:::-;2106:18;;;;:12;:18;;;;;;;;:31;;2129:7;;2106:22;;;;;:31;;:::i;:::-;;1978:166;;:::o;7461:233:0:-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7539:149;;7582:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:12;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;8297:150:17:-;8367:4;8390:50;8395:3;-1:-1:-1;;;;;8415:23:17;;8390:4;:50::i;:::-;8383:57;;8297:150;;;;;:::o;2206:404::-;2269:4;4343:19;;;:12;;;:19;;;;;;2285:319;;-1:-1:-1;2327:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;2507:18;;2485:19;;;:12;;;:19;;;;;;:40;;;;2539:11;;2285:319;-1:-1:-1;2588:5:17;2581:12;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:22;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:22;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:22:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:22;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:22;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:22;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:22;;;3992:26;3943:89;-1:-1:-1;;2747:1:22;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:22;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:22;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:22;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:22:o;:::-;1005:2013:11;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_27":{"entryPoint":null,"id":27,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_1551":{"entryPoint":null,"id":1551,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_1556":{"entryPoint":null,"id":1556,"parameterSlots":0,"returnSlots":0},"@_add_2817":{"entryPoint":4375,"id":2817,"parameterSlots":2,"returnSlots":1},"@_afterTokenTransfer_1345":{"entryPoint":null,"id":1345,"parameterSlots":3,"returnSlots":0},"@_approve_1280":{"entryPoint":2684,"id":1280,"parameterSlots":3,"returnSlots":0},"@_at_2951":{"entryPoint":4893,"id":2951,"parameterSlots":2,"returnSlots":1},"@_beforeTokenTransfer_1334":{"entryPoint":null,"id":1334,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1504":{"entryPoint":4935,"id":1504,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1665":{"entryPoint":4454,"id":1665,"parameterSlots":3,"returnSlots":0},"@_burn_1235":{"entryPoint":3972,"id":1235,"parameterSlots":2,"returnSlots":0},"@_checkRole_131":{"entryPoint":4465,"id":131,"parameterSlots":2,"returnSlots":0},"@_checkRole_92":{"entryPoint":3607,"id":92,"parameterSlots":1,"returnSlots":0},"@_contains_2920":{"entryPoint":null,"id":2920,"parameterSlots":2,"returnSlots":1},"@_grantRole_283":{"entryPoint":2452,"id":283,"parameterSlots":2,"returnSlots":0},"@_grantRole_415":{"entryPoint":3617,"id":415,"parameterSlots":2,"returnSlots":0},"@_length_2934":{"entryPoint":null,"id":2934,"parameterSlots":1,"returnSlots":1},"@_mint_1163":{"entryPoint":3767,"id":1163,"parameterSlots":2,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_pause_742":{"entryPoint":4292,"id":742,"parameterSlots":0,"returnSlots":0},"@_remove_2901":{"entryPoint":5499,"id":2901,"parameterSlots":2,"returnSlots":1},"@_requireNotPaused_715":{"entryPoint":4810,"id":715,"parameterSlots":0,"returnSlots":0},"@_requirePaused_726":{"entryPoint":4728,"id":726,"parameterSlots":0,"returnSlots":0},"@_revokeRole_314":{"entryPoint":4580,"id":314,"parameterSlots":2,"returnSlots":0},"@_revokeRole_439":{"entryPoint":3651,"id":439,"parameterSlots":2,"returnSlots":0},"@_spendAllowance_1323":{"entryPoint":2976,"id":1323,"parameterSlots":3,"returnSlots":0},"@_transfer_1106":{"entryPoint":3122,"id":1106,"parameterSlots":3,"returnSlots":0},"@_unpause_758":{"entryPoint":3685,"id":758,"parameterSlots":0,"returnSlots":0},"@add_3117":{"entryPoint":2610,"id":3117,"parameterSlots":2,"returnSlots":1},"@allowance_901":{"entryPoint":null,"id":901,"parameterSlots":2,"returnSlots":1},"@approve_926":{"entryPoint":1322,"id":926,"parameterSlots":2,"returnSlots":1},"@at_3213":{"entryPoint":4353,"id":3213,"parameterSlots":2,"returnSlots":1},"@balanceOf_858":{"entryPoint":null,"id":858,"parameterSlots":1,"returnSlots":1},"@burnFrom_1467":{"entryPoint":1977,"id":1467,"parameterSlots":2,"returnSlots":0},"@burn_1446":{"entryPoint":1964,"id":1446,"parameterSlots":1,"returnSlots":0},"@decimals_834":{"entryPoint":null,"id":834,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1029":{"entryPoint":2208,"id":1029,"parameterSlots":2,"returnSlots":1},"@getRoleAdmin_146":{"entryPoint":null,"id":146,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_391":{"entryPoint":2392,"id":391,"parameterSlots":1,"returnSlots":1},"@getRoleMember_375":{"entryPoint":2162,"id":375,"parameterSlots":2,"returnSlots":1},"@grantRole_166":{"entryPoint":1382,"id":166,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":null,"id":79,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_988":{"entryPoint":1569,"id":988,"parameterSlots":2,"returnSlots":1},"@length_3186":{"entryPoint":4365,"id":3186,"parameterSlots":1,"returnSlots":1},"@mint_1610":{"entryPoint":1798,"id":1610,"parameterSlots":2,"returnSlots":0},"@name_814":{"entryPoint":1176,"id":814,"parameterSlots":0,"returnSlots":1},"@pause_1627":{"entryPoint":1998,"id":1627,"parameterSlots":0,"returnSlots":0},"@paused_703":{"entryPoint":null,"id":703,"parameterSlots":0,"returnSlots":1},"@remove_3144":{"entryPoint":4707,"id":3144,"parameterSlots":2,"returnSlots":1},"@renounceRole_209":{"entryPoint":1424,"id":209,"parameterSlots":2,"returnSlots":0},"@revokeRole_186":{"entryPoint":2415,"id":186,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1886":{"entryPoint":null,"id":1886,"parameterSlots":1,"returnSlots":1},"@supportsInterface_356":{"entryPoint":1133,"id":356,"parameterSlots":1,"returnSlots":1},"@supportsInterface_60":{"entryPoint":2631,"id":60,"parameterSlots":1,"returnSlots":1},"@symbol_824":{"entryPoint":2193,"id":824,"parameterSlots":0,"returnSlots":1},"@toHexString_1842":{"entryPoint":5074,"id":1842,"parameterSlots":2,"returnSlots":1},"@toHexString_1862":{"entryPoint":5056,"id":1862,"parameterSlots":1,"returnSlots":1},"@totalSupply_844":{"entryPoint":null,"id":844,"parameterSlots":0,"returnSlots":1},"@transferFrom_959":{"entryPoint":1346,"id":959,"parameterSlots":3,"returnSlots":1},"@transfer_883":{"entryPoint":2378,"id":883,"parameterSlots":2,"returnSlots":1},"@unpause_1644":{"entryPoint":1632,"id":1644,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":5871,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6070,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6131,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5941,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5899,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":6001,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":6026,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":6097,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5742,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6272,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5820,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6253,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6423,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6491,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5784,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":6468,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":6173,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6231,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":6510,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6401,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6446,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13481:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:22","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:22"},"nodeType":"YulFunctionCall","src":"131:12:22"},"nodeType":"YulExpressionStatement","src":"131:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:22"},"nodeType":"YulFunctionCall","src":"100:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:22"},"nodeType":"YulFunctionCall","src":"96:32:22"},"nodeType":"YulIf","src":"93:52:22"},{"nodeType":"YulVariableDeclaration","src":"154:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:22"},"nodeType":"YulFunctionCall","src":"167:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:22"},"nodeType":"YulFunctionCall","src":"256:12:22"},"nodeType":"YulExpressionStatement","src":"256:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:22"},"nodeType":"YulFunctionCall","src":"219:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:22"},"nodeType":"YulFunctionCall","src":"209:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:22"},"nodeType":"YulFunctionCall","src":"202:51:22"},"nodeType":"YulIf","src":"199:71:22"},{"nodeType":"YulAssignment","src":"279:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:22","type":""}],"src":"14:286:22"},{"body":{"nodeType":"YulBlock","src":"400:92:22","statements":[{"nodeType":"YulAssignment","src":"410:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:22"},"nodeType":"YulFunctionCall","src":"418:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:22"},"nodeType":"YulFunctionCall","src":"470:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:22"},"nodeType":"YulFunctionCall","src":"463:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:22"},"nodeType":"YulFunctionCall","src":"445:41:22"},"nodeType":"YulExpressionStatement","src":"445:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:22","type":""}],"src":"305:187:22"},{"body":{"nodeType":"YulBlock","src":"563:184:22","statements":[{"nodeType":"YulVariableDeclaration","src":"573:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"582:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"577:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"642:63:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"667:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"672:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"663:3:22"},"nodeType":"YulFunctionCall","src":"663:11:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"686:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"691:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:22"},"nodeType":"YulFunctionCall","src":"682:11:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"676:5:22"},"nodeType":"YulFunctionCall","src":"676:18:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"656:6:22"},"nodeType":"YulFunctionCall","src":"656:39:22"},"nodeType":"YulExpressionStatement","src":"656:39:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"603:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"606:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"600:2:22"},"nodeType":"YulFunctionCall","src":"600:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"614:19:22","statements":[{"nodeType":"YulAssignment","src":"616:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"625:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"628:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"621:3:22"},"nodeType":"YulFunctionCall","src":"621:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"616:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"596:3:22","statements":[]},"src":"592:113:22"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"725:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"730:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"721:3:22"},"nodeType":"YulFunctionCall","src":"721:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"739:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"714:6:22"},"nodeType":"YulFunctionCall","src":"714:27:22"},"nodeType":"YulExpressionStatement","src":"714:27:22"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"541:3:22","type":""},{"name":"dst","nodeType":"YulTypedName","src":"546:3:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"551:6:22","type":""}],"src":"497:250:22"},{"body":{"nodeType":"YulBlock","src":"873:275:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"890:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"901:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"883:6:22"},"nodeType":"YulFunctionCall","src":"883:21:22"},"nodeType":"YulExpressionStatement","src":"883:21:22"},{"nodeType":"YulVariableDeclaration","src":"913:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"933:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"927:5:22"},"nodeType":"YulFunctionCall","src":"927:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"917:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"960:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"971:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"956:3:22"},"nodeType":"YulFunctionCall","src":"956:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"976:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"949:6:22"},"nodeType":"YulFunctionCall","src":"949:34:22"},"nodeType":"YulExpressionStatement","src":"949:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1031:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1039:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1027:3:22"},"nodeType":"YulFunctionCall","src":"1027:15:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1048:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1059:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1044:3:22"},"nodeType":"YulFunctionCall","src":"1044:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"1064:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"992:34:22"},"nodeType":"YulFunctionCall","src":"992:79:22"},"nodeType":"YulExpressionStatement","src":"992:79:22"},{"nodeType":"YulAssignment","src":"1080:62:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1096:9:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1115:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1123:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1111:3:22"},"nodeType":"YulFunctionCall","src":"1111:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1132:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1128:3:22"},"nodeType":"YulFunctionCall","src":"1128:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1107:3:22"},"nodeType":"YulFunctionCall","src":"1107:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1092:3:22"},"nodeType":"YulFunctionCall","src":"1092:45:22"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1088:3:22"},"nodeType":"YulFunctionCall","src":"1088:54:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1080:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"842:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"853:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"864:4:22","type":""}],"src":"752:396:22"},{"body":{"nodeType":"YulBlock","src":"1202:147:22","statements":[{"nodeType":"YulAssignment","src":"1212:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1234:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1221:12:22"},"nodeType":"YulFunctionCall","src":"1221:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1212:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1327:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1336:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1339:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1329:6:22"},"nodeType":"YulFunctionCall","src":"1329:12:22"},"nodeType":"YulExpressionStatement","src":"1329:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1263:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1274:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1281:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1270:3:22"},"nodeType":"YulFunctionCall","src":"1270:54:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1260:2:22"},"nodeType":"YulFunctionCall","src":"1260:65:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1253:6:22"},"nodeType":"YulFunctionCall","src":"1253:73:22"},"nodeType":"YulIf","src":"1250:93:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1181:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1192:5:22","type":""}],"src":"1153:196:22"},{"body":{"nodeType":"YulBlock","src":"1441:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"1487:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1496:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1499:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1489:6:22"},"nodeType":"YulFunctionCall","src":"1489:12:22"},"nodeType":"YulExpressionStatement","src":"1489:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1462:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1471:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1458:3:22"},"nodeType":"YulFunctionCall","src":"1458:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1483:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1454:3:22"},"nodeType":"YulFunctionCall","src":"1454:32:22"},"nodeType":"YulIf","src":"1451:52:22"},{"nodeType":"YulAssignment","src":"1512:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1541:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1522:18:22"},"nodeType":"YulFunctionCall","src":"1522:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1512:6:22"}]},{"nodeType":"YulAssignment","src":"1560:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1587:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1598:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1583:3:22"},"nodeType":"YulFunctionCall","src":"1583:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1570:12:22"},"nodeType":"YulFunctionCall","src":"1570:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1560:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1399:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1410:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1422:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1430:6:22","type":""}],"src":"1354:254:22"},{"body":{"nodeType":"YulBlock","src":"1714:76:22","statements":[{"nodeType":"YulAssignment","src":"1724:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1736:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1747:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1732:3:22"},"nodeType":"YulFunctionCall","src":"1732:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1724:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1766:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"1777:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1759:6:22"},"nodeType":"YulFunctionCall","src":"1759:25:22"},"nodeType":"YulExpressionStatement","src":"1759:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1683:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1694:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1705:4:22","type":""}],"src":"1613:177:22"},{"body":{"nodeType":"YulBlock","src":"1899:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"1945:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1954:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1957:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1947:6:22"},"nodeType":"YulFunctionCall","src":"1947:12:22"},"nodeType":"YulExpressionStatement","src":"1947:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1920:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1929:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1916:3:22"},"nodeType":"YulFunctionCall","src":"1916:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1941:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1912:3:22"},"nodeType":"YulFunctionCall","src":"1912:32:22"},"nodeType":"YulIf","src":"1909:52:22"},{"nodeType":"YulAssignment","src":"1970:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1999:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1980:18:22"},"nodeType":"YulFunctionCall","src":"1980:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1970:6:22"}]},{"nodeType":"YulAssignment","src":"2018:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2051:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2062:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2047:3:22"},"nodeType":"YulFunctionCall","src":"2047:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2028:18:22"},"nodeType":"YulFunctionCall","src":"2028:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2018:6:22"}]},{"nodeType":"YulAssignment","src":"2075:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2102:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2113:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2098:3:22"},"nodeType":"YulFunctionCall","src":"2098:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2085:12:22"},"nodeType":"YulFunctionCall","src":"2085:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2075:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1849:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1860:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1872:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1880:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1888:6:22","type":""}],"src":"1795:328:22"},{"body":{"nodeType":"YulBlock","src":"2198:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"2244:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2253:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2256:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2246:6:22"},"nodeType":"YulFunctionCall","src":"2246:12:22"},"nodeType":"YulExpressionStatement","src":"2246:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2219:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2228:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2215:3:22"},"nodeType":"YulFunctionCall","src":"2215:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2240:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2211:3:22"},"nodeType":"YulFunctionCall","src":"2211:32:22"},"nodeType":"YulIf","src":"2208:52:22"},{"nodeType":"YulAssignment","src":"2269:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2292:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2279:12:22"},"nodeType":"YulFunctionCall","src":"2279:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2269:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2164:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2175:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2187:6:22","type":""}],"src":"2128:180:22"},{"body":{"nodeType":"YulBlock","src":"2414:76:22","statements":[{"nodeType":"YulAssignment","src":"2424:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2436:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2447:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2432:3:22"},"nodeType":"YulFunctionCall","src":"2432:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2424:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2466:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2477:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:22"},"nodeType":"YulFunctionCall","src":"2459:25:22"},"nodeType":"YulExpressionStatement","src":"2459:25:22"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2383:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2394:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2405:4:22","type":""}],"src":"2313:177:22"},{"body":{"nodeType":"YulBlock","src":"2582:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"2628:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2637:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2640:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2630:6:22"},"nodeType":"YulFunctionCall","src":"2630:12:22"},"nodeType":"YulExpressionStatement","src":"2630:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2603:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2612:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2599:3:22"},"nodeType":"YulFunctionCall","src":"2599:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2624:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2595:3:22"},"nodeType":"YulFunctionCall","src":"2595:32:22"},"nodeType":"YulIf","src":"2592:52:22"},{"nodeType":"YulAssignment","src":"2653:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2676:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2663:12:22"},"nodeType":"YulFunctionCall","src":"2663:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2653:6:22"}]},{"nodeType":"YulAssignment","src":"2695:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2728:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2739:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:22"},"nodeType":"YulFunctionCall","src":"2724:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2705:18:22"},"nodeType":"YulFunctionCall","src":"2705:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2695:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2540:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2551:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2563:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2571:6:22","type":""}],"src":"2495:254:22"},{"body":{"nodeType":"YulBlock","src":"2851:87:22","statements":[{"nodeType":"YulAssignment","src":"2861:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2873:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2884:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2869:3:22"},"nodeType":"YulFunctionCall","src":"2869:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2861:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2903:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2918:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2926:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2914:3:22"},"nodeType":"YulFunctionCall","src":"2914:17:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2896:6:22"},"nodeType":"YulFunctionCall","src":"2896:36:22"},"nodeType":"YulExpressionStatement","src":"2896:36:22"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2820:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2831:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2842:4:22","type":""}],"src":"2754:184:22"},{"body":{"nodeType":"YulBlock","src":"3013:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"3059:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3068:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3071:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3061:6:22"},"nodeType":"YulFunctionCall","src":"3061:12:22"},"nodeType":"YulExpressionStatement","src":"3061:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3034:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3043:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3030:3:22"},"nodeType":"YulFunctionCall","src":"3030:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3055:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3026:3:22"},"nodeType":"YulFunctionCall","src":"3026:32:22"},"nodeType":"YulIf","src":"3023:52:22"},{"nodeType":"YulAssignment","src":"3084:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3107:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3094:12:22"},"nodeType":"YulFunctionCall","src":"3094:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3084:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2979:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2990:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3002:6:22","type":""}],"src":"2943:180:22"},{"body":{"nodeType":"YulBlock","src":"3198:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"3244:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3253:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3256:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3246:6:22"},"nodeType":"YulFunctionCall","src":"3246:12:22"},"nodeType":"YulExpressionStatement","src":"3246:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3219:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3228:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3215:3:22"},"nodeType":"YulFunctionCall","src":"3215:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3240:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3211:3:22"},"nodeType":"YulFunctionCall","src":"3211:32:22"},"nodeType":"YulIf","src":"3208:52:22"},{"nodeType":"YulAssignment","src":"3269:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3298:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3279:18:22"},"nodeType":"YulFunctionCall","src":"3279:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3269:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3164:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3175:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3187:6:22","type":""}],"src":"3128:186:22"},{"body":{"nodeType":"YulBlock","src":"3406:161:22","statements":[{"body":{"nodeType":"YulBlock","src":"3452:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3461:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3464:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3454:6:22"},"nodeType":"YulFunctionCall","src":"3454:12:22"},"nodeType":"YulExpressionStatement","src":"3454:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3427:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3436:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3423:3:22"},"nodeType":"YulFunctionCall","src":"3423:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3448:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3419:3:22"},"nodeType":"YulFunctionCall","src":"3419:32:22"},"nodeType":"YulIf","src":"3416:52:22"},{"nodeType":"YulAssignment","src":"3477:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3487:12:22"},"nodeType":"YulFunctionCall","src":"3487:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3477:6:22"}]},{"nodeType":"YulAssignment","src":"3519:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3546:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3557:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3542:3:22"},"nodeType":"YulFunctionCall","src":"3542:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3529:12:22"},"nodeType":"YulFunctionCall","src":"3529:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3519:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3364:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3375:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3387:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3395:6:22","type":""}],"src":"3319:248:22"},{"body":{"nodeType":"YulBlock","src":"3673:125:22","statements":[{"nodeType":"YulAssignment","src":"3683:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3695:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3706:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3691:3:22"},"nodeType":"YulFunctionCall","src":"3691:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3683:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3725:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3740:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3748:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3736:3:22"},"nodeType":"YulFunctionCall","src":"3736:55:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3718:6:22"},"nodeType":"YulFunctionCall","src":"3718:74:22"},"nodeType":"YulExpressionStatement","src":"3718:74:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3642:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3653:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3664:4:22","type":""}],"src":"3572:226:22"},{"body":{"nodeType":"YulBlock","src":"3890:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"3936:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3945:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3948:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3938:6:22"},"nodeType":"YulFunctionCall","src":"3938:12:22"},"nodeType":"YulExpressionStatement","src":"3938:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3911:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3920:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3907:3:22"},"nodeType":"YulFunctionCall","src":"3907:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3932:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3903:3:22"},"nodeType":"YulFunctionCall","src":"3903:32:22"},"nodeType":"YulIf","src":"3900:52:22"},{"nodeType":"YulAssignment","src":"3961:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3990:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3971:18:22"},"nodeType":"YulFunctionCall","src":"3971:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3961:6:22"}]},{"nodeType":"YulAssignment","src":"4009:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4042:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4053:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4038:3:22"},"nodeType":"YulFunctionCall","src":"4038:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4019:18:22"},"nodeType":"YulFunctionCall","src":"4019:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4009:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3848:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3859:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3871:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3879:6:22","type":""}],"src":"3803:260:22"},{"body":{"nodeType":"YulBlock","src":"4123:325:22","statements":[{"nodeType":"YulAssignment","src":"4133:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4147:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4150:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4143:3:22"},"nodeType":"YulFunctionCall","src":"4143:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4133:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4164:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4194:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4200:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4190:3:22"},"nodeType":"YulFunctionCall","src":"4190:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4168:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4241:31:22","statements":[{"nodeType":"YulAssignment","src":"4243:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4257:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4265:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4253:3:22"},"nodeType":"YulFunctionCall","src":"4253:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4243:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4221:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4214:6:22"},"nodeType":"YulFunctionCall","src":"4214:26:22"},"nodeType":"YulIf","src":"4211:61:22"},{"body":{"nodeType":"YulBlock","src":"4331:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4352:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4359:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4364:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4355:3:22"},"nodeType":"YulFunctionCall","src":"4355:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4345:6:22"},"nodeType":"YulFunctionCall","src":"4345:31:22"},"nodeType":"YulExpressionStatement","src":"4345:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4396:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4399:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4389:6:22"},"nodeType":"YulFunctionCall","src":"4389:15:22"},"nodeType":"YulExpressionStatement","src":"4389:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4424:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4427:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4417:6:22"},"nodeType":"YulFunctionCall","src":"4417:15:22"},"nodeType":"YulExpressionStatement","src":"4417:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4287:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4310:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4318:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4307:2:22"},"nodeType":"YulFunctionCall","src":"4307:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4284:2:22"},"nodeType":"YulFunctionCall","src":"4284:38:22"},"nodeType":"YulIf","src":"4281:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4103:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4112:6:22","type":""}],"src":"4068:380:22"},{"body":{"nodeType":"YulBlock","src":"4627:237:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4644:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4655:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4637:6:22"},"nodeType":"YulFunctionCall","src":"4637:21:22"},"nodeType":"YulExpressionStatement","src":"4637:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4678:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4689:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4674:3:22"},"nodeType":"YulFunctionCall","src":"4674:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4694:2:22","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4667:6:22"},"nodeType":"YulFunctionCall","src":"4667:30:22"},"nodeType":"YulExpressionStatement","src":"4667:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4717:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4728:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4713:3:22"},"nodeType":"YulFunctionCall","src":"4713:18:22"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4733:34:22","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4706:6:22"},"nodeType":"YulFunctionCall","src":"4706:62:22"},"nodeType":"YulExpressionStatement","src":"4706:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:22"},"nodeType":"YulFunctionCall","src":"4784:18:22"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4804:17:22","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4777:6:22"},"nodeType":"YulFunctionCall","src":"4777:45:22"},"nodeType":"YulExpressionStatement","src":"4777:45:22"},{"nodeType":"YulAssignment","src":"4831:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4843:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4854:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4839:3:22"},"nodeType":"YulFunctionCall","src":"4839:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4831:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4604:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4618:4:22","type":""}],"src":"4453:411:22"},{"body":{"nodeType":"YulBlock","src":"4901:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4918:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4925:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4930:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4921:3:22"},"nodeType":"YulFunctionCall","src":"4921:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4911:6:22"},"nodeType":"YulFunctionCall","src":"4911:31:22"},"nodeType":"YulExpressionStatement","src":"4911:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4958:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4961:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4951:6:22"},"nodeType":"YulFunctionCall","src":"4951:15:22"},"nodeType":"YulExpressionStatement","src":"4951:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4982:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4985:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4975:6:22"},"nodeType":"YulFunctionCall","src":"4975:15:22"},"nodeType":"YulExpressionStatement","src":"4975:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4869:127:22"},{"body":{"nodeType":"YulBlock","src":"5049:77:22","statements":[{"nodeType":"YulAssignment","src":"5059:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5070:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"5073:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5066:3:22"},"nodeType":"YulFunctionCall","src":"5066:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5059:3:22"}]},{"body":{"nodeType":"YulBlock","src":"5098:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5100:16:22"},"nodeType":"YulFunctionCall","src":"5100:18:22"},"nodeType":"YulExpressionStatement","src":"5100:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5090:1:22"},{"name":"sum","nodeType":"YulIdentifier","src":"5093:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5087:2:22"},"nodeType":"YulFunctionCall","src":"5087:10:22"},"nodeType":"YulIf","src":"5084:36:22"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5032:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"5035:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5041:3:22","type":""}],"src":"5001:125:22"},{"body":{"nodeType":"YulBlock","src":"5305:247:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5322:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5333:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5315:6:22"},"nodeType":"YulFunctionCall","src":"5315:21:22"},"nodeType":"YulExpressionStatement","src":"5315:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5356:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5367:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5352:3:22"},"nodeType":"YulFunctionCall","src":"5352:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5372:2:22","type":"","value":"57"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5345:6:22"},"nodeType":"YulFunctionCall","src":"5345:30:22"},"nodeType":"YulExpressionStatement","src":"5345:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5395:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5406:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5391:3:22"},"nodeType":"YulFunctionCall","src":"5391:18:22"},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d757374206861","kind":"string","nodeType":"YulLiteral","src":"5411:34:22","type":"","value":"ERC20PresetMinterPauser: must ha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5384:6:22"},"nodeType":"YulFunctionCall","src":"5384:62:22"},"nodeType":"YulExpressionStatement","src":"5384:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5466:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5477:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5462:3:22"},"nodeType":"YulFunctionCall","src":"5462:18:22"},{"hexValue":"76652070617573657220726f6c6520746f20756e7061757365","kind":"string","nodeType":"YulLiteral","src":"5482:27:22","type":"","value":"ve pauser role to unpause"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5455:6:22"},"nodeType":"YulFunctionCall","src":"5455:55:22"},"nodeType":"YulExpressionStatement","src":"5455:55:22"},{"nodeType":"YulAssignment","src":"5519:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5531:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5542:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5527:3:22"},"nodeType":"YulFunctionCall","src":"5527:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5519:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5282:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5296:4:22","type":""}],"src":"5131:421:22"},{"body":{"nodeType":"YulBlock","src":"5731:244:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5748:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5759:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5741:6:22"},"nodeType":"YulFunctionCall","src":"5741:21:22"},"nodeType":"YulExpressionStatement","src":"5741:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5782:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5793:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5778:3:22"},"nodeType":"YulFunctionCall","src":"5778:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5798:2:22","type":"","value":"54"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5771:6:22"},"nodeType":"YulFunctionCall","src":"5771:30:22"},"nodeType":"YulExpressionStatement","src":"5771:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5821:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5832:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5817:3:22"},"nodeType":"YulFunctionCall","src":"5817:18:22"},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d757374206861","kind":"string","nodeType":"YulLiteral","src":"5837:34:22","type":"","value":"ERC20PresetMinterPauser: must ha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5810:6:22"},"nodeType":"YulFunctionCall","src":"5810:62:22"},"nodeType":"YulExpressionStatement","src":"5810:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5892:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5903:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5888:3:22"},"nodeType":"YulFunctionCall","src":"5888:18:22"},{"hexValue":"7665206d696e74657220726f6c6520746f206d696e74","kind":"string","nodeType":"YulLiteral","src":"5908:24:22","type":"","value":"ve minter role to mint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5881:6:22"},"nodeType":"YulFunctionCall","src":"5881:52:22"},"nodeType":"YulExpressionStatement","src":"5881:52:22"},{"nodeType":"YulAssignment","src":"5942:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5954:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5965:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5950:3:22"},"nodeType":"YulFunctionCall","src":"5950:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5942:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5708:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5722:4:22","type":""}],"src":"5557:418:22"},{"body":{"nodeType":"YulBlock","src":"6154:245:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6171:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6182:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6164:6:22"},"nodeType":"YulFunctionCall","src":"6164:21:22"},"nodeType":"YulExpressionStatement","src":"6164:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6205:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6216:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6201:3:22"},"nodeType":"YulFunctionCall","src":"6201:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6221:2:22","type":"","value":"55"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6194:6:22"},"nodeType":"YulFunctionCall","src":"6194:30:22"},"nodeType":"YulExpressionStatement","src":"6194:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6244:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6255:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6240:3:22"},"nodeType":"YulFunctionCall","src":"6240:18:22"},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d757374206861","kind":"string","nodeType":"YulLiteral","src":"6260:34:22","type":"","value":"ERC20PresetMinterPauser: must ha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6233:6:22"},"nodeType":"YulFunctionCall","src":"6233:62:22"},"nodeType":"YulExpressionStatement","src":"6233:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6315:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6326:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6311:3:22"},"nodeType":"YulFunctionCall","src":"6311:18:22"},{"hexValue":"76652070617573657220726f6c6520746f207061757365","kind":"string","nodeType":"YulLiteral","src":"6331:25:22","type":"","value":"ve pauser role to pause"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6304:6:22"},"nodeType":"YulFunctionCall","src":"6304:53:22"},"nodeType":"YulExpressionStatement","src":"6304:53:22"},{"nodeType":"YulAssignment","src":"6366:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6378:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6389:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6374:3:22"},"nodeType":"YulFunctionCall","src":"6374:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6366:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6131:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6145:4:22","type":""}],"src":"5980:419:22"},{"body":{"nodeType":"YulBlock","src":"6578:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6595:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6606:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6588:6:22"},"nodeType":"YulFunctionCall","src":"6588:21:22"},"nodeType":"YulExpressionStatement","src":"6588:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6629:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6640:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6625:3:22"},"nodeType":"YulFunctionCall","src":"6625:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6645:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6618:6:22"},"nodeType":"YulFunctionCall","src":"6618:30:22"},"nodeType":"YulExpressionStatement","src":"6618:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6668:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6679:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6664:3:22"},"nodeType":"YulFunctionCall","src":"6664:18:22"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6684:34:22","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6657:6:22"},"nodeType":"YulFunctionCall","src":"6657:62:22"},"nodeType":"YulExpressionStatement","src":"6657:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6739:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6750:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6735:3:22"},"nodeType":"YulFunctionCall","src":"6735:18:22"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6755:7:22","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6728:6:22"},"nodeType":"YulFunctionCall","src":"6728:35:22"},"nodeType":"YulExpressionStatement","src":"6728:35:22"},{"nodeType":"YulAssignment","src":"6772:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6784:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6795:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6780:3:22"},"nodeType":"YulFunctionCall","src":"6780:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6772:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6555:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6569:4:22","type":""}],"src":"6404:401:22"},{"body":{"nodeType":"YulBlock","src":"6984:226:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7001:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7012:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6994:6:22"},"nodeType":"YulFunctionCall","src":"6994:21:22"},"nodeType":"YulExpressionStatement","src":"6994:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7035:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7046:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7031:3:22"},"nodeType":"YulFunctionCall","src":"7031:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7051:2:22","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7024:6:22"},"nodeType":"YulFunctionCall","src":"7024:30:22"},"nodeType":"YulExpressionStatement","src":"7024:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7074:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7085:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7070:3:22"},"nodeType":"YulFunctionCall","src":"7070:18:22"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7090:34:22","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7063:6:22"},"nodeType":"YulFunctionCall","src":"7063:62:22"},"nodeType":"YulExpressionStatement","src":"7063:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7145:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7156:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:22"},"nodeType":"YulFunctionCall","src":"7141:18:22"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7161:6:22","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7134:6:22"},"nodeType":"YulFunctionCall","src":"7134:34:22"},"nodeType":"YulExpressionStatement","src":"7134:34:22"},{"nodeType":"YulAssignment","src":"7177:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7189:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7200:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7185:3:22"},"nodeType":"YulFunctionCall","src":"7185:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7177:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6961:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6975:4:22","type":""}],"src":"6810:400:22"},{"body":{"nodeType":"YulBlock","src":"7389:224:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7406:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7417:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7399:6:22"},"nodeType":"YulFunctionCall","src":"7399:21:22"},"nodeType":"YulExpressionStatement","src":"7399:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7440:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7451:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7436:3:22"},"nodeType":"YulFunctionCall","src":"7436:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7456:2:22","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7429:6:22"},"nodeType":"YulFunctionCall","src":"7429:30:22"},"nodeType":"YulExpressionStatement","src":"7429:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7479:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7490:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7475:3:22"},"nodeType":"YulFunctionCall","src":"7475:18:22"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"7495:34:22","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7468:6:22"},"nodeType":"YulFunctionCall","src":"7468:62:22"},"nodeType":"YulExpressionStatement","src":"7468:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7550:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7561:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7546:3:22"},"nodeType":"YulFunctionCall","src":"7546:18:22"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"7566:4:22","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7539:6:22"},"nodeType":"YulFunctionCall","src":"7539:32:22"},"nodeType":"YulExpressionStatement","src":"7539:32:22"},{"nodeType":"YulAssignment","src":"7580:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7592:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7603:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7588:3:22"},"nodeType":"YulFunctionCall","src":"7588:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7580:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7366:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7380:4:22","type":""}],"src":"7215:398:22"},{"body":{"nodeType":"YulBlock","src":"7792:179:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7809:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7820:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7802:6:22"},"nodeType":"YulFunctionCall","src":"7802:21:22"},"nodeType":"YulExpressionStatement","src":"7802:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7843:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7854:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7839:3:22"},"nodeType":"YulFunctionCall","src":"7839:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7859:2:22","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7832:6:22"},"nodeType":"YulFunctionCall","src":"7832:30:22"},"nodeType":"YulExpressionStatement","src":"7832:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7882:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7893:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7878:3:22"},"nodeType":"YulFunctionCall","src":"7878:18:22"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"7898:31:22","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7871:6:22"},"nodeType":"YulFunctionCall","src":"7871:59:22"},"nodeType":"YulExpressionStatement","src":"7871:59:22"},{"nodeType":"YulAssignment","src":"7939:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7951:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7962:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7947:3:22"},"nodeType":"YulFunctionCall","src":"7947:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7939:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7769:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7783:4:22","type":""}],"src":"7618:353:22"},{"body":{"nodeType":"YulBlock","src":"8150:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8167:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8178:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8160:6:22"},"nodeType":"YulFunctionCall","src":"8160:21:22"},"nodeType":"YulExpressionStatement","src":"8160:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8201:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8212:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8197:3:22"},"nodeType":"YulFunctionCall","src":"8197:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8217:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8190:6:22"},"nodeType":"YulFunctionCall","src":"8190:30:22"},"nodeType":"YulExpressionStatement","src":"8190:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8240:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8251:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8236:3:22"},"nodeType":"YulFunctionCall","src":"8236:18:22"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"8256:34:22","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8229:6:22"},"nodeType":"YulFunctionCall","src":"8229:62:22"},"nodeType":"YulExpressionStatement","src":"8229:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8311:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8322:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8307:3:22"},"nodeType":"YulFunctionCall","src":"8307:18:22"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"8327:7:22","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8300:6:22"},"nodeType":"YulFunctionCall","src":"8300:35:22"},"nodeType":"YulExpressionStatement","src":"8300:35:22"},{"nodeType":"YulAssignment","src":"8344:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8356:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8367:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8352:3:22"},"nodeType":"YulFunctionCall","src":"8352:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8344:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8127:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8141:4:22","type":""}],"src":"7976:401:22"},{"body":{"nodeType":"YulBlock","src":"8556:225:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8573:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8584:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8566:6:22"},"nodeType":"YulFunctionCall","src":"8566:21:22"},"nodeType":"YulExpressionStatement","src":"8566:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8607:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8618:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8603:3:22"},"nodeType":"YulFunctionCall","src":"8603:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8623:2:22","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8596:6:22"},"nodeType":"YulFunctionCall","src":"8596:30:22"},"nodeType":"YulExpressionStatement","src":"8596:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8646:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8657:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8642:3:22"},"nodeType":"YulFunctionCall","src":"8642:18:22"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"8662:34:22","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8635:6:22"},"nodeType":"YulFunctionCall","src":"8635:62:22"},"nodeType":"YulExpressionStatement","src":"8635:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8717:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8728:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8713:3:22"},"nodeType":"YulFunctionCall","src":"8713:18:22"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"8733:5:22","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8706:6:22"},"nodeType":"YulFunctionCall","src":"8706:33:22"},"nodeType":"YulExpressionStatement","src":"8706:33:22"},{"nodeType":"YulAssignment","src":"8748:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8760:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8771:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8756:3:22"},"nodeType":"YulFunctionCall","src":"8756:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8748:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8533:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8547:4:22","type":""}],"src":"8382:399:22"},{"body":{"nodeType":"YulBlock","src":"8960:228:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8977:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8988:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8970:6:22"},"nodeType":"YulFunctionCall","src":"8970:21:22"},"nodeType":"YulExpressionStatement","src":"8970:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9011:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9022:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9007:3:22"},"nodeType":"YulFunctionCall","src":"9007:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9027:2:22","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9000:6:22"},"nodeType":"YulFunctionCall","src":"9000:30:22"},"nodeType":"YulExpressionStatement","src":"9000:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9050:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9061:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9046:3:22"},"nodeType":"YulFunctionCall","src":"9046:18:22"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"9066:34:22","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9039:6:22"},"nodeType":"YulFunctionCall","src":"9039:62:22"},"nodeType":"YulExpressionStatement","src":"9039:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9121:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9132:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9117:3:22"},"nodeType":"YulFunctionCall","src":"9117:18:22"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"9137:8:22","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9110:6:22"},"nodeType":"YulFunctionCall","src":"9110:36:22"},"nodeType":"YulExpressionStatement","src":"9110:36:22"},{"nodeType":"YulAssignment","src":"9155:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9167:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9178:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9163:3:22"},"nodeType":"YulFunctionCall","src":"9163:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9155:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8937:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8951:4:22","type":""}],"src":"8786:402:22"},{"body":{"nodeType":"YulBlock","src":"9367:181:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9384:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9395:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9377:6:22"},"nodeType":"YulFunctionCall","src":"9377:21:22"},"nodeType":"YulExpressionStatement","src":"9377:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9418:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9429:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9414:3:22"},"nodeType":"YulFunctionCall","src":"9414:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9434:2:22","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9407:6:22"},"nodeType":"YulFunctionCall","src":"9407:30:22"},"nodeType":"YulExpressionStatement","src":"9407:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9457:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9468:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9453:3:22"},"nodeType":"YulFunctionCall","src":"9453:18:22"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"9473:33:22","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9446:6:22"},"nodeType":"YulFunctionCall","src":"9446:61:22"},"nodeType":"YulExpressionStatement","src":"9446:61:22"},{"nodeType":"YulAssignment","src":"9516:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9528:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9539:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9524:3:22"},"nodeType":"YulFunctionCall","src":"9524:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9516:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9344:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9358:4:22","type":""}],"src":"9193:355:22"},{"body":{"nodeType":"YulBlock","src":"9727:223:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9744:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9755:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9737:6:22"},"nodeType":"YulFunctionCall","src":"9737:21:22"},"nodeType":"YulExpressionStatement","src":"9737:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9778:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9789:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9774:3:22"},"nodeType":"YulFunctionCall","src":"9774:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9794:2:22","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9767:6:22"},"nodeType":"YulFunctionCall","src":"9767:30:22"},"nodeType":"YulExpressionStatement","src":"9767:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9817:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9828:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9813:3:22"},"nodeType":"YulFunctionCall","src":"9813:18:22"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"9833:34:22","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9806:6:22"},"nodeType":"YulFunctionCall","src":"9806:62:22"},"nodeType":"YulExpressionStatement","src":"9806:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9888:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9899:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9884:3:22"},"nodeType":"YulFunctionCall","src":"9884:18:22"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"9904:3:22","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9877:6:22"},"nodeType":"YulFunctionCall","src":"9877:31:22"},"nodeType":"YulExpressionStatement","src":"9877:31:22"},{"nodeType":"YulAssignment","src":"9917:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9929:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9940:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9925:3:22"},"nodeType":"YulFunctionCall","src":"9925:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9917:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9704:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9718:4:22","type":""}],"src":"9553:397:22"},{"body":{"nodeType":"YulBlock","src":"10129:224:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10146:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10157:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10139:6:22"},"nodeType":"YulFunctionCall","src":"10139:21:22"},"nodeType":"YulExpressionStatement","src":"10139:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10180:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10191:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10176:3:22"},"nodeType":"YulFunctionCall","src":"10176:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"10196:2:22","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10169:6:22"},"nodeType":"YulFunctionCall","src":"10169:30:22"},"nodeType":"YulExpressionStatement","src":"10169:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10219:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10230:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10215:3:22"},"nodeType":"YulFunctionCall","src":"10215:18:22"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"10235:34:22","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10208:6:22"},"nodeType":"YulFunctionCall","src":"10208:62:22"},"nodeType":"YulExpressionStatement","src":"10208:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10290:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10301:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10286:3:22"},"nodeType":"YulFunctionCall","src":"10286:18:22"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"10306:4:22","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10279:6:22"},"nodeType":"YulFunctionCall","src":"10279:32:22"},"nodeType":"YulExpressionStatement","src":"10279:32:22"},{"nodeType":"YulAssignment","src":"10320:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10332:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10343:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10328:3:22"},"nodeType":"YulFunctionCall","src":"10328:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10320:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10106:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10120:4:22","type":""}],"src":"9955:398:22"},{"body":{"nodeType":"YulBlock","src":"10747:423:22","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10764:3:22"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"10769:25:22","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10757:6:22"},"nodeType":"YulFunctionCall","src":"10757:38:22"},"nodeType":"YulExpressionStatement","src":"10757:38:22"},{"nodeType":"YulVariableDeclaration","src":"10804:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10824:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10818:5:22"},"nodeType":"YulFunctionCall","src":"10818:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10808:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10879:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"10887:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10875:3:22"},"nodeType":"YulFunctionCall","src":"10875:17:22"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10898:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"10903:2:22","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10894:3:22"},"nodeType":"YulFunctionCall","src":"10894:12:22"},{"name":"length","nodeType":"YulIdentifier","src":"10908:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10840:34:22"},"nodeType":"YulFunctionCall","src":"10840:75:22"},"nodeType":"YulExpressionStatement","src":"10840:75:22"},{"nodeType":"YulVariableDeclaration","src":"10924:26:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10938:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"10943:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10934:3:22"},"nodeType":"YulFunctionCall","src":"10934:16:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10928:2:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10970:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"10974:2:22","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10966:3:22"},"nodeType":"YulFunctionCall","src":"10966:11:22"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"10979:19:22","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10959:6:22"},"nodeType":"YulFunctionCall","src":"10959:40:22"},"nodeType":"YulExpressionStatement","src":"10959:40:22"},{"nodeType":"YulVariableDeclaration","src":"11008:29:22","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11030:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11024:5:22"},"nodeType":"YulFunctionCall","src":"11024:13:22"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11012:8:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11085:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"11093:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11081:3:22"},"nodeType":"YulFunctionCall","src":"11081:17:22"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11104:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"11108:2:22","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11100:3:22"},"nodeType":"YulFunctionCall","src":"11100:11:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"11113:8:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11046:34:22"},"nodeType":"YulFunctionCall","src":"11046:76:22"},"nodeType":"YulExpressionStatement","src":"11046:76:22"},{"nodeType":"YulAssignment","src":"11131:33:22","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11146:2:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"11150:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11142:3:22"},"nodeType":"YulFunctionCall","src":"11142:17:22"},{"kind":"number","nodeType":"YulLiteral","src":"11161:2:22","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11138:3:22"},"nodeType":"YulFunctionCall","src":"11138:26:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11131:3:22"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10715:3:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10720:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10728:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10739:3:22","type":""}],"src":"10358:812:22"},{"body":{"nodeType":"YulBlock","src":"11349:170:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11366:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11377:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11359:6:22"},"nodeType":"YulFunctionCall","src":"11359:21:22"},"nodeType":"YulExpressionStatement","src":"11359:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11400:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11411:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11396:3:22"},"nodeType":"YulFunctionCall","src":"11396:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"11416:2:22","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11389:6:22"},"nodeType":"YulFunctionCall","src":"11389:30:22"},"nodeType":"YulExpressionStatement","src":"11389:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11439:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11450:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11435:3:22"},"nodeType":"YulFunctionCall","src":"11435:18:22"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"11455:22:22","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11428:6:22"},"nodeType":"YulFunctionCall","src":"11428:50:22"},"nodeType":"YulExpressionStatement","src":"11428:50:22"},{"nodeType":"YulAssignment","src":"11487:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11499:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11510:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11495:3:22"},"nodeType":"YulFunctionCall","src":"11495:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11487:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11326:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11340:4:22","type":""}],"src":"11175:344:22"},{"body":{"nodeType":"YulBlock","src":"11698:166:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11715:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11726:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11708:6:22"},"nodeType":"YulFunctionCall","src":"11708:21:22"},"nodeType":"YulExpressionStatement","src":"11708:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11749:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11760:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11745:3:22"},"nodeType":"YulFunctionCall","src":"11745:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"11765:2:22","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11738:6:22"},"nodeType":"YulFunctionCall","src":"11738:30:22"},"nodeType":"YulExpressionStatement","src":"11738:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11788:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11799:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11784:3:22"},"nodeType":"YulFunctionCall","src":"11784:18:22"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"11804:18:22","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11777:6:22"},"nodeType":"YulFunctionCall","src":"11777:46:22"},"nodeType":"YulExpressionStatement","src":"11777:46:22"},{"nodeType":"YulAssignment","src":"11832:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11844:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11855:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11840:3:22"},"nodeType":"YulFunctionCall","src":"11840:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11832:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11675:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11689:4:22","type":""}],"src":"11524:340:22"},{"body":{"nodeType":"YulBlock","src":"11901:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11918:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11925:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11930:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11921:3:22"},"nodeType":"YulFunctionCall","src":"11921:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11911:6:22"},"nodeType":"YulFunctionCall","src":"11911:31:22"},"nodeType":"YulExpressionStatement","src":"11911:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11958:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11961:4:22","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11951:6:22"},"nodeType":"YulFunctionCall","src":"11951:15:22"},"nodeType":"YulExpressionStatement","src":"11951:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11982:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11985:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11975:6:22"},"nodeType":"YulFunctionCall","src":"11975:15:22"},"nodeType":"YulExpressionStatement","src":"11975:15:22"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11869:127:22"},{"body":{"nodeType":"YulBlock","src":"12175:232:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12192:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12203:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12185:6:22"},"nodeType":"YulFunctionCall","src":"12185:21:22"},"nodeType":"YulExpressionStatement","src":"12185:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12226:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12237:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12222:3:22"},"nodeType":"YulFunctionCall","src":"12222:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"12242:2:22","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12215:6:22"},"nodeType":"YulFunctionCall","src":"12215:30:22"},"nodeType":"YulExpressionStatement","src":"12215:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12265:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12276:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12261:3:22"},"nodeType":"YulFunctionCall","src":"12261:18:22"},{"hexValue":"45524332305061757361626c653a20746f6b656e207472616e73666572207768","kind":"string","nodeType":"YulLiteral","src":"12281:34:22","type":"","value":"ERC20Pausable: token transfer wh"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12254:6:22"},"nodeType":"YulFunctionCall","src":"12254:62:22"},"nodeType":"YulExpressionStatement","src":"12254:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12336:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12347:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12332:3:22"},"nodeType":"YulFunctionCall","src":"12332:18:22"},{"hexValue":"696c6520706175736564","kind":"string","nodeType":"YulLiteral","src":"12352:12:22","type":"","value":"ile paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12325:6:22"},"nodeType":"YulFunctionCall","src":"12325:40:22"},"nodeType":"YulExpressionStatement","src":"12325:40:22"},{"nodeType":"YulAssignment","src":"12374:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12386:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12397:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12382:3:22"},"nodeType":"YulFunctionCall","src":"12382:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12374:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12152:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12166:4:22","type":""}],"src":"12001:406:22"},{"body":{"nodeType":"YulBlock","src":"12464:116:22","statements":[{"nodeType":"YulAssignment","src":"12474:20:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12489:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"12492:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12485:3:22"},"nodeType":"YulFunctionCall","src":"12485:9:22"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"12474:7:22"}]},{"body":{"nodeType":"YulBlock","src":"12552:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12554:16:22"},"nodeType":"YulFunctionCall","src":"12554:18:22"},"nodeType":"YulExpressionStatement","src":"12554:18:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12523:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12516:6:22"},"nodeType":"YulFunctionCall","src":"12516:9:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12530:1:22"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"12537:7:22"},{"name":"x","nodeType":"YulIdentifier","src":"12546:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12533:3:22"},"nodeType":"YulFunctionCall","src":"12533:15:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12527:2:22"},"nodeType":"YulFunctionCall","src":"12527:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12513:2:22"},"nodeType":"YulFunctionCall","src":"12513:37:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12506:6:22"},"nodeType":"YulFunctionCall","src":"12506:45:22"},"nodeType":"YulIf","src":"12503:71:22"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12443:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"12446:1:22","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"12452:7:22","type":""}],"src":"12412:168:22"},{"body":{"nodeType":"YulBlock","src":"12617:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12634:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12641:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12646:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12637:3:22"},"nodeType":"YulFunctionCall","src":"12637:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12627:6:22"},"nodeType":"YulFunctionCall","src":"12627:31:22"},"nodeType":"YulExpressionStatement","src":"12627:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12674:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12677:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12667:6:22"},"nodeType":"YulFunctionCall","src":"12667:15:22"},"nodeType":"YulExpressionStatement","src":"12667:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12698:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12701:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12691:6:22"},"nodeType":"YulFunctionCall","src":"12691:15:22"},"nodeType":"YulExpressionStatement","src":"12691:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"12585:127:22"},{"body":{"nodeType":"YulBlock","src":"12764:89:22","statements":[{"body":{"nodeType":"YulBlock","src":"12791:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12793:16:22"},"nodeType":"YulFunctionCall","src":"12793:18:22"},"nodeType":"YulExpressionStatement","src":"12793:18:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12784:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12777:6:22"},"nodeType":"YulFunctionCall","src":"12777:13:22"},"nodeType":"YulIf","src":"12774:39:22"},{"nodeType":"YulAssignment","src":"12822:25:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12833:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12844:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12840:3:22"},"nodeType":"YulFunctionCall","src":"12840:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12829:3:22"},"nodeType":"YulFunctionCall","src":"12829:18:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12822:3:22"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12746:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12756:3:22","type":""}],"src":"12717:136:22"},{"body":{"nodeType":"YulBlock","src":"13032:182:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13049:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13060:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13042:6:22"},"nodeType":"YulFunctionCall","src":"13042:21:22"},"nodeType":"YulExpressionStatement","src":"13042:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13083:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13094:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13079:3:22"},"nodeType":"YulFunctionCall","src":"13079:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"13099:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13072:6:22"},"nodeType":"YulFunctionCall","src":"13072:30:22"},"nodeType":"YulExpressionStatement","src":"13072:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13122:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13133:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13118:3:22"},"nodeType":"YulFunctionCall","src":"13118:18:22"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"13138:34:22","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13111:6:22"},"nodeType":"YulFunctionCall","src":"13111:62:22"},"nodeType":"YulExpressionStatement","src":"13111:62:22"},{"nodeType":"YulAssignment","src":"13182:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13194:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13205:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13190:3:22"},"nodeType":"YulFunctionCall","src":"13190:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13182:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13009:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13023:4:22","type":""}],"src":"12858:356:22"},{"body":{"nodeType":"YulBlock","src":"13268:79:22","statements":[{"nodeType":"YulAssignment","src":"13278:17:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13290:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"13293:1:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13286:3:22"},"nodeType":"YulFunctionCall","src":"13286:9:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"13278:4:22"}]},{"body":{"nodeType":"YulBlock","src":"13319:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13321:16:22"},"nodeType":"YulFunctionCall","src":"13321:18:22"},"nodeType":"YulExpressionStatement","src":"13321:18:22"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"13310:4:22"},{"name":"x","nodeType":"YulIdentifier","src":"13316:1:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13307:2:22"},"nodeType":"YulFunctionCall","src":"13307:11:22"},"nodeType":"YulIf","src":"13304:37:22"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13250:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"13253:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"13259:4:22","type":""}],"src":"13219:128:22"},{"body":{"nodeType":"YulBlock","src":"13384:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13401:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13408:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13413:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13404:3:22"},"nodeType":"YulFunctionCall","src":"13404:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13394:6:22"},"nodeType":"YulFunctionCall","src":"13394:31:22"},"nodeType":"YulExpressionStatement","src":"13394:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13441:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13444:4:22","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13434:6:22"},"nodeType":"YulFunctionCall","src":"13434:15:22"},"nodeType":"YulExpressionStatement","src":"13434:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13465:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13468:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13458:6:22"},"nodeType":"YulFunctionCall","src":"13458:15:22"},"nodeType":"YulExpressionStatement","src":"13458:15:22"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"13352:127:22"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"ERC20PresetMinterPauser: must ha\")\n        mstore(add(headStart, 96), \"ve pauser role to unpause\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"ERC20PresetMinterPauser: must ha\")\n        mstore(add(headStart, 96), \"ve minter role to mint\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 55)\n        mstore(add(headStart, 64), \"ERC20PresetMinterPauser: must ha\")\n        mstore(add(headStart, 96), \"ve pauser role to pause\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC20Pausable: token transfer wh\")\n        mstore(add(headStart, 96), \"ile paused\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x3D3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x40D JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2B3 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x206 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x166E JUMP JUMPDEST PUSH2 0x46D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F9 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x16BC JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x542 JUMP JUMPDEST PUSH2 0x21D PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x1771 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x590 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x621 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x660 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x2C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x706 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0x7AC JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x21D PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x7B9 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x7CE JUMP JUMPDEST PUSH2 0x33B PUSH2 0x336 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D1 JUMP JUMPDEST PUSH2 0x872 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0x891 JUMP JUMPDEST PUSH2 0x21D PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x8A0 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x94A JUMP JUMPDEST PUSH2 0x21D PUSH2 0x3CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST PUSH2 0x21D PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x274 PUSH2 0x408 CALLDATASIZE PUSH1 0x4 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x21D PUSH2 0x41B CALLDATASIZE PUSH1 0x4 PUSH2 0x17F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x21D PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x492 JUMPI POP PUSH2 0x492 DUP3 PUSH2 0xA47 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x181D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4D3 SWAP1 PUSH2 0x181D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x520 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4F5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x520 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x503 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x538 DUP2 DUP6 DUP6 PUSH2 0xA7C JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x550 DUP6 DUP3 DUP6 PUSH2 0xBA0 JUMP JUMPDEST PUSH2 0x55B DUP6 DUP6 DUP6 PUSH2 0xC32 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x581 DUP2 PUSH2 0xE17 JUMP JUMPDEST PUSH2 0x58B DUP4 DUP4 PUSH2 0xE21 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x61D DUP3 DUP3 PUSH2 0xE43 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x538 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x65B SWAP1 DUP8 SWAP1 PUSH2 0x186D JUMP JUMPDEST PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x68A PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x361 JUMP JUMPDEST PUSH2 0x6FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F20756E706175736500000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x704 PUSH2 0xE65 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x730 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0x361 JUMP JUMPDEST PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7665206D696E74657220726F6C6520746F206D696E7400000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x61D DUP3 DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x7B6 CALLER DUP3 PUSH2 0xF84 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7C4 DUP3 CALLER DUP4 PUSH2 0xBA0 JUMP JUMPDEST PUSH2 0x61D DUP3 DUP3 PUSH2 0xF84 JUMP JUMPDEST PUSH2 0x7F8 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x361 JUMP JUMPDEST PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F207061757365000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x704 PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x88A SWAP1 DUP4 PUSH2 0x1101 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x181D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x93D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0x55B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x538 DUP2 DUP6 DUP6 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x492 SWAP1 PUSH2 0x110D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x98A DUP2 PUSH2 0xE17 JUMP JUMPDEST PUSH2 0x58B DUP4 DUP4 PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x61D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x9EE CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x88A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1117 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x492 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x492 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC2C JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xC2C DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xA7C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD10 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xD1B DUP4 DUP4 DUP4 PUSH2 0x1166 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xE0A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0x7B6 DUP2 CALLER PUSH2 0x1171 JUMP JUMPDEST PUSH2 0xE2B DUP3 DUP3 PUSH2 0x994 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x58B SWAP1 DUP3 PUSH2 0xA32 JUMP JUMPDEST PUSH2 0xE4D DUP3 DUP3 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x58B SWAP1 DUP3 PUSH2 0x1263 JUMP JUMPDEST PUSH2 0xE6D PUSH2 0x1278 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xF19 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1166 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF2B SWAP2 SWAP1 PUSH2 0x186D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH2 0xFF0 DUP3 PUSH1 0x0 DUP4 PUSH2 0x1166 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1064 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xE9A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x88A DUP4 DUP4 PUSH2 0x131D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x492 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x115E JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x492 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x492 JUMP JUMPDEST PUSH2 0x58B DUP4 DUP4 DUP4 PUSH2 0x1347 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x61D JUMPI PUSH2 0x11A2 DUP2 PUSH2 0x13C0 JUMP JUMPDEST PUSH2 0x11AD DUP4 PUSH1 0x20 PUSH2 0x13D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11BE SWAP3 SWAP2 SWAP1 PUSH2 0x1880 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x60A SWAP2 PUSH1 0x4 ADD PUSH2 0x16BC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x61D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x88A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x157B JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1334 JUMPI PUSH2 0x1334 PUSH2 0x1901 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x58B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696C652070617573656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x492 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x13E1 DUP4 PUSH1 0x2 PUSH2 0x1917 JUMP JUMPDEST PUSH2 0x13EC SWAP1 PUSH1 0x2 PUSH2 0x186D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1404 JUMPI PUSH2 0x1404 PUSH2 0x192E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x142E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1449 JUMPI PUSH2 0x1449 PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1478 JUMPI PUSH2 0x1478 PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x149C DUP5 PUSH1 0x2 PUSH2 0x1917 JUMP JUMPDEST PUSH2 0x14A7 SWAP1 PUSH1 0x1 PUSH2 0x186D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x152C JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x14E8 JUMPI PUSH2 0x14E8 PUSH2 0x1901 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14FE JUMPI PUSH2 0x14FE PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1525 DUP2 PUSH2 0x1944 JUMP JUMPDEST SWAP1 POP PUSH2 0x14AA JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x88A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x60A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1664 JUMPI PUSH1 0x0 PUSH2 0x159F PUSH1 0x1 DUP4 PUSH2 0x195B JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x15B3 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x195B JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1618 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15D3 JUMPI PUSH2 0x15D3 PUSH2 0x1901 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x15F6 JUMPI PUSH2 0x15F6 PUSH2 0x1901 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1629 JUMPI PUSH2 0x1629 PUSH2 0x196E JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x169B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x16DB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1698 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1706 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x171E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1727 DUP4 PUSH2 0x16EF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1753 DUP5 PUSH2 0x16EF JUMP JUMPDEST SWAP3 POP PUSH2 0x1761 PUSH1 0x20 DUP6 ADD PUSH2 0x16EF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x17AD PUSH1 0x20 DUP5 ADD PUSH2 0x16EF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88A DUP3 PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x180F DUP4 PUSH2 0x16EF JUMP JUMPDEST SWAP2 POP PUSH2 0x17AD PUSH1 0x20 DUP5 ADD PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1831 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1851 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x492 JUMPI PUSH2 0x492 PUSH2 0x1857 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x18B8 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1698 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x18F5 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1698 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x492 JUMPI PUSH2 0x492 PUSH2 0x1857 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1953 JUMPI PUSH2 0x1953 PUSH2 0x1857 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x492 JUMPI PUSH2 0x492 PUSH2 0x1857 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT 0xD5 PUSH32 0x8E917BE3BD05C6831C22647FB2D99832831550E995669213868D5F5F0564736F PUSH13 0x63430008110033000000000000 ","sourceMap":"1005:2013:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;634:212:1;;;;;;:::i;:::-;;:::i;:::-;;;470:14:22;;463:22;445:41;;433:2;418:18;634:212:1;;;;;;;;2154:98:6;;;:::i;:::-;;;;;;;:::i;4431:197::-;;;;;;:::i;:::-;;:::i;3242:106::-;3329:12;;3242:106;;;1759:25:22;;;1747:2;1732:18;3242:106:6;1613:177:22;5190:286:6;;;;;;:::i;:::-;;:::i;4378:129:0:-;;;;;;:::i;:::-;4452:7;4478:12;;;;;;;;;;:22;;;;4378:129;4803:145;;;;;;:::i;:::-;;:::i;:::-;;3091:91:6;;;3173:2;2896:36:22;;2884:2;2869:18;3091:91:6;2754:184:22;5912:214:0;;;;;;:::i;:::-;;:::i;5871:234:6:-;;;;;;:::i;:::-;;:::i;2624:175:11:-;;;:::i;1843:202::-;;;;;;:::i;:::-;;:::i;578:89:8:-;;;;;;:::i;:::-;;:::i;1615:84:5:-;1685:7;;;;1615:84;;3406:125:6;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:6;3480:7;3506:18;;;:9;:18;;;;;;;3406:125;973:161:8;;;;;;:::i;:::-;;:::i;2248:169:11:-;;;:::i;1431:151:1:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3736:55:22;;;3718:74;;3706:2;3691:18;1431:151:1;3572:226:22;2895:145:0;;;;;;:::i;:::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145;2365:102:6;;;:::i;2027:49:0:-;;2072:4;2027:49;;6592:427:6;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;1750:140:1:-;;;;;;:::i;:::-;;:::i;1110:62:11:-;;1148:24;1110:62;;5228:147:0;;;;;;:::i;:::-;;:::i;3974:149:6:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4089:18:6;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149;1178:62:11;;1216:24;1178:62;;634:212:1;719:4;-1:-1:-1;;;;;;742:57:1;;-1:-1:-1;;;742:57:1;;:97;;;803:36;827:11;803:23;:36::i;:::-;735:104;634:212;-1:-1:-1;;634:212:1:o;2154:98:6:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:12;4568:32:6;719:10:12;4584:7:6;4593:6;4568:8;:32::i;:::-;-1:-1:-1;4617:4:6;;4431:197;-1:-1:-1;;;4431:197:6:o;5190:286::-;5317:4;719:10:12;5373:38:6;5389:4;719:10:12;5404:6:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:6;;5190:286;-1:-1:-1;;;;5190:286:6:o;4803:145:0:-;4452:7;4478:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4916:25:::1;4927:4;4933:7;4916:10;:25::i;:::-;4803:145:::0;;;:::o;5912:214::-;-1:-1:-1;;;;;6007:23:0;;719:10:12;6007:23:0;5999:83;;;;-1:-1:-1;;;5999:83:0;;4655:2:22;5999:83:0;;;4637:21:22;4694:2;4674:18;;;4667:30;4733:34;4713:18;;;4706:62;4804:17;4784:18;;;4777:45;4839:19;;5999:83:0;;;;;;;;;6093:26;6105:4;6111:7;6093:11;:26::i;:::-;5912:214;;:::o;5871:234:6:-;719:10:12;5959:4:6;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:6;;;;;;;;;;5959:4;;719:10:12;6013:64:6;;719:10:12;;4089:27:6;;6038:38;;6066:10;;6038:38;:::i;:::-;6013:8;:64::i;2624:175:11:-;2676:34;1216:24;719:10:12;2895:145:0;:::i;2676:34:11:-;2668:104;;;;-1:-1:-1;;;2668:104:11;;5333:2:22;2668:104:11;;;5315:21:22;5372:2;5352:18;;;5345:30;5411:34;5391:18;;;5384:62;5482:27;5462:18;;;5455:55;5527:19;;2668:104:11;5131:421:22;2668:104:11;2782:10;:8;:10::i;:::-;2624:175::o;1843:202::-;1918:34;1148:24;719:10:12;2895:145:0;:::i;1918:34:11:-;1910:101;;;;-1:-1:-1;;;1910:101:11;;5759:2:22;1910:101:11;;;5741:21:22;5798:2;5778:18;;;5771:30;5837:34;5817:18;;;5810:62;5908:24;5888:18;;;5881:52;5950:19;;1910:101:11;5557:418:22;1910:101:11;2021:17;2027:2;2031:6;2021:5;:17::i;578:89:8:-;633:27;719:10:12;653:6:8;633:5;:27::i;:::-;578:89;:::o;973:161::-;1049:46;1065:7;719:10:12;1088:6:8;1049:15;:46::i;:::-;1105:22;1111:7;1120:6;1105:5;:22::i;2248:169:11:-;2298:34;1216:24;719:10:12;2895:145:0;:::i;2298:34:11:-;2290:102;;;;-1:-1:-1;;;2290:102:11;;6182:2:22;2290:102:11;;;6164:21:22;6221:2;6201:18;;;6194:30;6260:34;6240:18;;;6233:62;6331:25;6311:18;;;6304:53;6374:19;;2290:102:11;5980:419:22;2290:102:11;2402:8;:6;:8::i;1431:151:1:-;1521:7;1547:18;;;:12;:18;;;;;:28;;1569:5;1547:21;:28::i;:::-;1540:35;1431:151;-1:-1:-1;;;1431:151:1:o;2365:102:6:-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;719:10:12;6685:4:6;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:6;;;;;;;;;;6685:4;;719:10:12;6829:15:6;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:6;;6606:2:22;6801:85:6;;;6588:21:22;6645:2;6625:18;;;6618:30;6684:34;6664:18;;;6657:62;6755:7;6735:18;;;6728:35;6780:19;;6801:85:6;6404:401:22;6801:85:6;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:12;3860:28:6;719:10:12;3877:2:6;3881:6;3860:9;:28::i;1750:140:1:-;1830:7;1856:18;;;:12;:18;;;;;:27;;:25;:27::i;5228:147:0:-;4452:7;4478:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5342:26:::1;5354:4;5360:7;5342:11;:26::i;7461:233::-:0;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7539:149;;7582:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:12;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;8297:150:17:-;8367:4;8390:50;8395:3;-1:-1:-1;;;;;8415:23:17;;8390:4;:50::i;2606:202:0:-;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:14;;;2765:36:0;829:155:14;10504:370:6;-1:-1:-1;;;;;10635:19:6;;10627:68;;;;-1:-1:-1;;;10627:68:6;;7012:2:22;10627:68:6;;;6994:21:22;7051:2;7031:18;;;7024:30;7090:34;7070:18;;;7063:62;-1:-1:-1;;;7141:18:22;;;7134:34;7185:19;;10627:68:6;6810:400:22;10627:68:6;-1:-1:-1;;;;;10713:21:6;;10705:68;;;;-1:-1:-1;;;10705:68:6;;7417:2:22;10705:68:6;;;7399:21:22;7456:2;7436:18;;;7429:30;7495:34;7475:18;;;7468:62;-1:-1:-1;;;7546:18:22;;;7539:32;7588:19;;10705:68:6;7215:398:22;10705:68:6;-1:-1:-1;;;;;10784:18:6;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1759:25:22;;;10835:32:6;;1732:18:22;10835:32:6;;;;;;;10504:370;;;:::o;11155:441::-;-1:-1:-1;;;;;4089:18:6;;;11285:24;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11351:37:6;;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:6;;7820:2:22;11404:68:6;;;7802:21:22;7859:2;7839:18;;;7832:30;7898:31;7878:18;;;7871:59;7947:18;;11404:68:6;7618:353:22;11404:68:6;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:6;;7591:68;;;;-1:-1:-1;;;7591:68:6;;8178:2:22;7591:68:6;;;8160:21:22;8217:2;8197:18;;;8190:30;8256:34;8236:18;;;8229:62;8327:7;8307:18;;;8300:35;8352:19;;7591:68:6;7976:401:22;7591:68:6;-1:-1:-1;;;;;7677:16:6;;7669:64;;;;-1:-1:-1;;;7669:64:6;;8584:2:22;7669:64:6;;;8566:21:22;8623:2;8603:18;;;8596:30;8662:34;8642:18;;;8635:62;-1:-1:-1;;;8713:18:22;;;8706:33;8756:19;;7669:64:6;8382:399:22;7669:64:6;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;-1:-1:-1;;;;;7815:15:6;;7793:19;7815:15;;;:9;:15;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:6;;8988:2:22;7840:72:6;;;8970:21:22;9027:2;9007:18;;;9000:30;9066:34;9046:18;;;9039:62;9137:8;9117:18;;;9110:36;9163:19;;7840:72:6;8786:402:22;7840:72:6;-1:-1:-1;;;;;7946:15:6;;;;;;;:9;:15;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;;;;;7978:6;1759:25:22;;1747:2;1732:18;;1613:177;8210:26:6;;;;;;;;8247:37;4803:145:0;3334:103;3400:30;3411:4;719:10:12;3400::0;:30::i;1978:166:1:-;2065:31;2082:4;2088:7;2065:16;:31::i;:::-;2106:18;;;;:12;:18;;;;;:31;;2129:7;2106:22;:31::i;2233:171::-;2321:32;2339:4;2345:7;2321:17;:32::i;:::-;2363:18;;;;:12;:18;;;;;:34;;2389:7;2363:25;:34::i;2433:117:5:-;1486:16;:14;:16::i;:::-;2491:7:::1;:15:::0;;-1:-1:-1;;2491:15:5::1;::::0;;2521:22:::1;719:10:12::0;2530:12:5::1;2521:22;::::0;-1:-1:-1;;;;;3736:55:22;;;3718:74;;3706:2;3691:18;2521:22:5::1;;;;;;;2433:117::o:0;8567:535:6:-;-1:-1:-1;;;;;8650:21:6;;8642:65;;;;-1:-1:-1;;;8642:65:6;;9395:2:22;8642:65:6;;;9377:21:22;9434:2;9414:18;;;9407:30;9473:33;9453:18;;;9446:61;9524:18;;8642:65:6;9193:355:22;8642:65:6;8718:49;8747:1;8751:7;8760:6;8718:20;:49::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:6;;;;;;:9;:18;;;;;;;;:28;;;;;;8999:37;1759:25:22;;;8999:37:6;;1732:18:22;8999:37:6;;;;;;;5912:214:0;;:::o;9422:659:6:-;-1:-1:-1;;;;;9505:21:6;;9497:67;;;;-1:-1:-1;;;9497:67:6;;9755:2:22;9497:67:6;;;9737:21:22;9794:2;9774:18;;;9767:30;9833:34;9813:18;;;9806:62;-1:-1:-1;;;9884:18:22;;;9877:31;9925:19;;9497:67:6;9553:397:22;9497:67:6;9575:49;9596:7;9613:1;9617:6;9575:20;:49::i;:::-;-1:-1:-1;;;;;9660:18:6;;9635:22;9660:18;;;:9;:18;;;;;;9696:24;;;;9688:71;;;;-1:-1:-1;;;9688:71:6;;10157:2:22;9688:71:6;;;10139:21:22;10196:2;10176:18;;;10169:30;10235:34;10215:18;;;10208:62;-1:-1:-1;;;10286:18:22;;;10279:32;10328:19;;9688:71:6;9955:398:22;9688:71:6;-1:-1:-1;;;;;9793:18:6;;;;;;:9;:18;;;;;;;;9814:23;;;9793:44;;9930:12;:22;;;;;;;9978:37;1759:25:22;;;9793:18:6;;;9978:37;;1732:18:22;9978:37:6;;;;;;;4803:145:0;;;:::o;2186:115:5:-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;2245:14:5::1;2255:4;2245:14;::::0;;2274:20:::1;2281:12;719:10:12::0;;640:96;9555:156:17;9629:7;9679:22;9683:3;9695:5;9679:3;:22::i;9098:115::-;9161:7;9187:19;9195:3;4537:18;;4455:107;2206:404;2269:4;4343:19;;;:12;;;:19;;;;;;2285:319;;-1:-1:-1;2327:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;2507:18;;2485:19;;;:12;;;:19;;;;;;:40;;;;2539:11;;2285:319;-1:-1:-1;2588:5:17;2581:12;;2805:211:11;2965:44;2992:4;2998:2;3002:6;2965:26;:44::i;3718:479:0:-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;3801:390;;3989:28;4009:7;3989:19;:28::i;:::-;4088:38;4116:4;4123:2;4088:19;:38::i;:::-;3896:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:252:0;;;;;;;;;;-1:-1:-1;;;3844:336:0;;;;;;;:::i;7865:234::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7944:149;;;8018:5;7986:12;;;;;;;;;;;-1:-1:-1;;;;;7986:29:0;;;;;;;;;;:37;;-1:-1:-1;;7986:37:0;;;8042:40;719:10:12;;7986:12:0;;8042:40;;8018:5;8042:40;7865:234;;:::o;8615:156:17:-;8688:4;8711:53;8719:3;-1:-1:-1;;;;;8739:23:17;;8711:7;:53::i;1945:106:5:-;1685:7;;;;2003:41;;;;-1:-1:-1;;;2003:41:5;;11377:2:22;2003:41:5;;;11359:21:22;11416:2;11396:18;;;11389:30;11455:22;11435:18;;;11428:50;11495:18;;2003:41:5;11175:344:22;1767:106:5;1685:7;;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:5;;11726:2:22;1828:38:5;;;11708:21:22;11765:2;11745:18;;;11738:30;11804:18;11784;;;11777:46;11840:18;;1828:38:5;11524:340:22;4904:118:17;4971:7;4997:3;:11;;5009:5;4997:18;;;;;;;;:::i;:::-;;;;;;;;;4990:25;;4904:118;;;;:::o;665:264:9:-;1685:7:5;;;;866:9:9;858:64;;;;-1:-1:-1;;;858:64:9;;12203:2:22;858:64:9;;;12185:21:22;12242:2;12222:18;;;12215:30;12281:34;12261:18;;;12254:62;12352:12;12332:18;;;12325:40;12382:19;;858:64:9;12001:406:22;2102:149:13;2160:13;2192:52;-1:-1:-1;;;;;2204:22:13;;311:2;1513:437;1588:13;1613:19;1645:10;1649:6;1645:1;:10;:::i;:::-;:14;;1658:1;1645:14;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:25:13;;1613:47;;-1:-1:-1;;;1670:6:13;1677:1;1670:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1670:15:13;;;;;;;;;-1:-1:-1;;;1695:6:13;1702:1;1695:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1695:15:13;;;;;;;;-1:-1:-1;1725:9:13;1737:10;1741:6;1737:1;:10;:::i;:::-;:14;;1750:1;1737:14;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;1791:8;1800:5;1808:3;1800:11;1791:21;;;;;;;:::i;:::-;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1779:33:13;;;;;;;;-1:-1:-1;1836:1:13;1826:11;;;;;1760:3;;;:::i;:::-;;;1720:128;;;-1:-1:-1;1865:10:13;;1857:55;;;;-1:-1:-1;;;1857:55:13;;13060:2:22;1857:55:13;;;13042:21:22;;;13079:18;;;13072:30;13138:34;13118:18;;;13111:62;13190:18;;1857:55:13;12858:356:22;2778:1388:17;2844:4;2981:19;;;:12;;;:19;;;;;;3015:15;;3011:1149;;3384:21;3408:14;3421:1;3408:10;:14;:::i;:::-;3456:18;;3384:38;;-1:-1:-1;3436:17:17;;3456:22;;3477:1;;3456:22;:::i;:::-;3436:42;;3510:13;3497:9;:26;3493:398;;3543:17;3563:3;:11;;3575:9;3563:22;;;;;;;;:::i;:::-;;;;;;;;;3543:42;;3714:9;3685:3;:11;;3697:13;3685:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3797:23;;;:12;;;:23;;;;;:36;;;3493:398;3969:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4061:3;:12;;:19;4074:5;4061:19;;;;;;;;;;;4054:26;;;4102:4;4095:11;;;;;;;3011:1149;4144:5;4137:12;;;;;14:286:22;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:22;;209:43;;199:71;;266:1;263;256:12;497:250;582:1;592:113;606:6;603:1;600:13;592:113;;;682:11;;;676:18;663:11;;;656:39;628:2;621:10;592:113;;;-1:-1:-1;;739:1:22;721:16;;714:27;497:250::o;752:396::-;901:2;890:9;883:21;864:4;933:6;927:13;976:6;971:2;960:9;956:18;949:34;992:79;1064:6;1059:2;1048:9;1044:18;1039:2;1031:6;1027:15;992:79;:::i;:::-;1132:2;1111:15;-1:-1:-1;;1107:29:22;1092:45;;;;1139:2;1088:54;;752:396;-1:-1:-1;;752:396:22:o;1153:196::-;1221:20;;-1:-1:-1;;;;;1270:54:22;;1260:65;;1250:93;;1339:1;1336;1329:12;1250:93;1153:196;;;:::o;1354:254::-;1422:6;1430;1483:2;1471:9;1462:7;1458:23;1454:32;1451:52;;;1499:1;1496;1489:12;1451:52;1522:29;1541:9;1522:29;:::i;:::-;1512:39;1598:2;1583:18;;;;1570:32;;-1:-1:-1;;;1354:254:22:o;1795:328::-;1872:6;1880;1888;1941:2;1929:9;1920:7;1916:23;1912:32;1909:52;;;1957:1;1954;1947:12;1909:52;1980:29;1999:9;1980:29;:::i;:::-;1970:39;;2028:38;2062:2;2051:9;2047:18;2028:38;:::i;:::-;2018:48;;2113:2;2102:9;2098:18;2085:32;2075:42;;1795:328;;;;;:::o;2128:180::-;2187:6;2240:2;2228:9;2219:7;2215:23;2211:32;2208:52;;;2256:1;2253;2246:12;2208:52;-1:-1:-1;2279:23:22;;2128:180;-1:-1:-1;2128:180:22:o;2495:254::-;2563:6;2571;2624:2;2612:9;2603:7;2599:23;2595:32;2592:52;;;2640:1;2637;2630:12;2592:52;2676:9;2663:23;2653:33;;2705:38;2739:2;2728:9;2724:18;2705:38;:::i;:::-;2695:48;;2495:254;;;;;:::o;3128:186::-;3187:6;3240:2;3228:9;3219:7;3215:23;3211:32;3208:52;;;3256:1;3253;3246:12;3208:52;3279:29;3298:9;3279:29;:::i;3319:248::-;3387:6;3395;3448:2;3436:9;3427:7;3423:23;3419:32;3416:52;;;3464:1;3461;3454:12;3416:52;-1:-1:-1;;3487:23:22;;;3557:2;3542:18;;;3529:32;;-1:-1:-1;3319:248:22:o;3803:260::-;3871:6;3879;3932:2;3920:9;3911:7;3907:23;3903:32;3900:52;;;3948:1;3945;3938:12;3900:52;3971:29;3990:9;3971:29;:::i;:::-;3961:39;;4019:38;4053:2;4042:9;4038:18;4019:38;:::i;4068:380::-;4147:1;4143:12;;;;4190;;;4211:61;;4265:4;4257:6;4253:17;4243:27;;4211:61;4318:2;4310:6;4307:14;4287:18;4284:38;4281:161;;4364:10;4359:3;4355:20;4352:1;4345:31;4399:4;4396:1;4389:15;4427:4;4424:1;4417:15;4281:161;;4068:380;;;:::o;4869:127::-;4930:10;4925:3;4921:20;4918:1;4911:31;4961:4;4958:1;4951:15;4985:4;4982:1;4975:15;5001:125;5066:9;;;5087:10;;;5084:36;;;5100:18;;:::i;10358:812::-;10769:25;10764:3;10757:38;10739:3;10824:6;10818:13;10840:75;10908:6;10903:2;10898:3;10894:12;10887:4;10879:6;10875:17;10840:75;:::i;:::-;10979:19;10974:2;10934:16;;;10966:11;;;10959:40;11024:13;;11046:76;11024:13;11108:2;11100:11;;11093:4;11081:17;;11046:76;:::i;:::-;11142:17;11161:2;11138:26;;10358:812;-1:-1:-1;;;;10358:812:22:o;11869:127::-;11930:10;11925:3;11921:20;11918:1;11911:31;11961:4;11958:1;11951:15;11985:4;11982:1;11975:15;12412:168;12485:9;;;12516;;12533:15;;;12527:22;;12513:37;12503:71;;12554:18;;:::i;12585:127::-;12646:10;12641:3;12637:20;12634:1;12627:31;12677:4;12674:1;12667:15;12701:4;12698:1;12691:15;12717:136;12756:3;12784:5;12774:39;;12793:18;;:::i;:::-;-1:-1:-1;;;12829:18:22;;12717:136::o;13219:128::-;13286:9;;;13307:11;;;13304:37;;;13321:18;;:::i;13352:127::-;13413:10;13408:3;13404:20;13401:1;13394:31;13444:4;13441:1;13434:15;13468:4;13465:1;13458:15"},"gasEstimates":{"creation":{"codeDepositCost":"1317200","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"306","MINTER_ROLE()":"239","PAUSER_ROLE()":"305","allowance(address,address)":"infinite","approve(address,uint256)":"24681","balanceOf(address)":"2583","burn(uint256)":"infinite","burnFrom(address,uint256)":"infinite","decimals()":"223","decreaseAllowance(address,uint256)":"26934","getRoleAdmin(bytes32)":"2537","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2706","increaseAllowance(address,uint256)":"27029","mint(address,uint256)":"infinite","name()":"infinite","pause()":"infinite","paused()":"2404","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","totalSupply()":"2327","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","unpause()":"infinite"},"internal":{"_beforeTokenTransfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","PAUSER_ROLE()":"e63ab1e9","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","increaseAllowance(address,uint256)":"39509351","mint(address,uint256)":"40c10f19","name()":"06fdde03","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"{ERC20} token, including:  - ability for holders to burn (destroy) their tokens  - a minter role that allows for token minting (creation)  - a pauser role that allows to stop all token transfers This contract uses {AccessControl} to lock permissioned functions using the different roles - head to its documentation for details. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role, which will let it grant both minter and pauser roles to other accounts. _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"details\":\"Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract. See {ERC20-constructor}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":\"ERC20PresetMinterPauser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":334,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)3090_storage)"},{"astId":775,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_balances","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":781,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_allowances","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":783,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_totalSupply","offset":0,"slot":"4","type":"t_uint256"},{"astId":785,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_name","offset":0,"slot":"5","type":"t_string_storage"},{"astId":787,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_symbol","offset":0,"slot":"6","type":"t_string_storage"},{"astId":669,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_paused","offset":0,"slot":"7","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(AddressSet)3090_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3090_storage"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AddressSet)3090_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3089,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2775_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2775_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2770,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2774,"contract":"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol:ERC20PresetMinterPauser","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b9a4fb6051c47c933917e50b3ef08e45c04c9a433940e3c18ed5fee64bbf31bf64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 LOG4 0xFB PUSH1 0x51 0xC4 PUSH29 0x933917E50B3EF08E45C04C9A433940E3C18ED5FEE64BBF31BF64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b9a4fb6051c47c933917e50b3ef08e45c04c9a433940e3c18ed5fee64bbf31bf64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 LOG4 0xFB PUSH1 0x51 0xC4 PUSH29 0x933917E50B3EF08E45C04C9A433940E3C18ED5FEE64BBF31BF64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"188:2065:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201259dae2fc477784145333c239e421b63f4a952bf2415ff498f8b86dbc484ea464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT MSIZE 0xDA 0xE2 0xFC SELFBALANCE PUSH24 0x84145333C239E421B63F4A952BF2415FF498F8B86DBC484E LOG4 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201259dae2fc477784145333c239e421b63f4a952bf2415ff498f8b86dbc484ea464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT MSIZE 0xDA 0xE2 0xFC SELFBALANCE PUSH24 0x84145333C239E421B63F4A952BF2415FF498F8B86DBC484E LOG4 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206db66e4e650b92f78207719bdfdb7fa653222edecfe0475dc512375ef69c9bcc64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xB66E4E650B92F78207719BDFDB7F 0xA6 MSTORE8 0x22 0x2E 0xDE 0xCF 0xE0 SELFBALANCE 0x5D 0xC5 SLT CALLDATACOPY 0x5E 0xF6 SWAP13 SWAP12 0xCC PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1321:11630:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1321:11630:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206db66e4e650b92f78207719bdfdb7fa653222edecfe0475dc512375ef69c9bcc64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xB66E4E650B92F78207719BDFDB7F 0xA6 MSTORE8 0x22 0x2E 0xDE 0xCF 0xE0 SELFBALANCE 0x5D 0xC5 SLT CALLDATACOPY 0x5E 0xF6 SWAP13 SWAP12 0xCC PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1321:11630:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BatchTransfer.sol":{"BatchTransfer":{"abi":[{"inputs":[{"internalType":"address","name":"deployedTokenAddress","type":"address"},{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"name":"sendTokens","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610559806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e83f967b14610030575b600080fd5b61004361003e3660046103d2565b610045565b005b80518251146100c15760405162461bcd60e51b815260206004820152602b60248201527f5468652074776f20617272617973206d7573742062652077697468207468652060448201527f73616d65206c656e67746800000000000000000000000000000000000000000060648201526084015b60405180910390fd5b8260005b83518110156102d9576040516370a0823160e01b81523360048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013691906104a4565b838281518110610148576101486104bd565b6020026020010151111561019e5760405162461bcd60e51b815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000060448201526064016100b8565b6000826001600160a01b03166323b872dd338785815181106101c2576101c26104bd565b60200260200101518786815181106101dc576101dc6104bd565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027791906104d3565b9050806102c65760405162461bcd60e51b815260206004820152601f60248201527f546865207472616e7366657220776173206e6f74207375636365737366756c0060448201526064016100b8565b50806102d1816104fc565b9150506100c5565b5050505050565b80356001600160a01b03811681146102f757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561033b5761033b6102fc565b604052919050565b600067ffffffffffffffff82111561035d5761035d6102fc565b5060051b60200190565b600082601f83011261037857600080fd5b8135602061038d61038883610343565b610312565b82815260059290921b840181019181810190868411156103ac57600080fd5b8286015b848110156103c757803583529183019183016103b0565b509695505050505050565b6000806000606084860312156103e757600080fd5b6103f0846102e0565b925060208085013567ffffffffffffffff8082111561040e57600080fd5b818701915087601f83011261042257600080fd5b813561043061038882610343565b81815260059190911b8301840190848101908a83111561044f57600080fd5b938501935b8285101561047457610465856102e0565b82529385019390850190610454565b96505050604087013592508083111561048c57600080fd5b505061049a86828701610367565b9150509250925092565b6000602082840312156104b657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156104e557600080fd5b815180151581146104f557600080fd5b9392505050565b60006001820161051c57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122003506031595208ba74956a3450f4ceb7ca17ce67bd007e4613fb2a5e8b71579c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x559 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE83F967B EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x3D2 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652074776F20617272617973206D75737420626520776974682074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73616D65206C656E677468000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x112 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136 SWAP2 SWAP1 PUSH2 0x4A4 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x148 JUMPI PUSH2 0x148 PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682062616C616E63650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C2 JUMPI PUSH2 0x1C2 PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1DC JUMPI PUSH2 0x1DC PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x253 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x277 SWAP2 SWAP1 PUSH2 0x4D3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865207472616E7366657220776173206E6F74207375636365737366756C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB8 JUMP JUMPDEST POP DUP1 PUSH2 0x2D1 DUP2 PUSH2 0x4FC JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x33B JUMPI PUSH2 0x33B PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x35D JUMPI PUSH2 0x35D PUSH2 0x2FC JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x38D PUSH2 0x388 DUP4 PUSH2 0x343 JUMP JUMPDEST PUSH2 0x312 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3C7 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3B0 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F0 DUP5 PUSH2 0x2E0 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x430 PUSH2 0x388 DUP3 PUSH2 0x343 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x474 JUMPI PUSH2 0x465 DUP6 PUSH2 0x2E0 JUMP JUMPDEST DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x454 JUMP JUMPDEST SWAP7 POP POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x49A DUP7 DUP3 DUP8 ADD PUSH2 0x367 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x51C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB POP PUSH1 0x31 MSIZE MSTORE ADDMOD 0xBA PUSH21 0x956A3450F4CEB7CA17CE67BD007E4613FB2A5E8B71 JUMPI SWAP13 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"115:633:18:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@sendTokens_3453":{"entryPoint":69,"id":3453,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":736,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":871,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":978,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1235,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":1188,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2225ea8d97c8ea827454fbff29514059117fe59eb54cd0567a2b5a813d93e6fb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_37896778bbb81189824e785c20327687387efdfe35b977a04a70260992c96119__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":786,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":835,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":1276,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":1213,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":764,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5295:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:22","statements":[{"nodeType":"YulAssignment","src":"73:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:22"},"nodeType":"YulFunctionCall","src":"82:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:22"}]},{"body":{"nodeType":"YulBlock","src":"188:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:22"},"nodeType":"YulFunctionCall","src":"190:12:22"},"nodeType":"YulExpressionStatement","src":"190:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:22"},"nodeType":"YulFunctionCall","src":"131:54:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:22"},"nodeType":"YulFunctionCall","src":"121:65:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:22"},"nodeType":"YulFunctionCall","src":"114:73:22"},"nodeType":"YulIf","src":"111:93:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:22","type":""}],"src":"14:196:22"},{"body":{"nodeType":"YulBlock","src":"247:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"264:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"271:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"276:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"267:3:22"},"nodeType":"YulFunctionCall","src":"267:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"257:6:22"},"nodeType":"YulFunctionCall","src":"257:31:22"},"nodeType":"YulExpressionStatement","src":"257:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"304:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"307:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"297:6:22"},"nodeType":"YulFunctionCall","src":"297:15:22"},"nodeType":"YulExpressionStatement","src":"297:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"328:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"331:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"321:6:22"},"nodeType":"YulFunctionCall","src":"321:15:22"},"nodeType":"YulExpressionStatement","src":"321:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"215:127:22"},{"body":{"nodeType":"YulBlock","src":"392:230:22","statements":[{"nodeType":"YulAssignment","src":"402:19:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"418:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"412:5:22"},"nodeType":"YulFunctionCall","src":"412:9:22"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"402:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"430:58:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"452:6:22"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"468:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"474:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:22"},"nodeType":"YulFunctionCall","src":"464:13:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"483:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"479:3:22"},"nodeType":"YulFunctionCall","src":"479:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"460:3:22"},"nodeType":"YulFunctionCall","src":"460:27:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"448:3:22"},"nodeType":"YulFunctionCall","src":"448:40:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"434:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"563:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"565:16:22"},"nodeType":"YulFunctionCall","src":"565:18:22"},"nodeType":"YulExpressionStatement","src":"565:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"506:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"518:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"503:2:22"},"nodeType":"YulFunctionCall","src":"503:34:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"542:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"554:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"539:2:22"},"nodeType":"YulFunctionCall","src":"539:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"500:2:22"},"nodeType":"YulFunctionCall","src":"500:62:22"},"nodeType":"YulIf","src":"497:88:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"601:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"605:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"594:6:22"},"nodeType":"YulFunctionCall","src":"594:22:22"},"nodeType":"YulExpressionStatement","src":"594:22:22"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"372:4:22","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"381:6:22","type":""}],"src":"347:275:22"},{"body":{"nodeType":"YulBlock","src":"696:114:22","statements":[{"body":{"nodeType":"YulBlock","src":"740:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"742:16:22"},"nodeType":"YulFunctionCall","src":"742:18:22"},"nodeType":"YulExpressionStatement","src":"742:18:22"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"712:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"720:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"709:2:22"},"nodeType":"YulFunctionCall","src":"709:30:22"},"nodeType":"YulIf","src":"706:56:22"},{"nodeType":"YulAssignment","src":"771:33:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"787:1:22","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"790:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"783:3:22"},"nodeType":"YulFunctionCall","src":"783:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"799:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"779:3:22"},"nodeType":"YulFunctionCall","src":"779:25:22"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"771:4:22"}]}]},"name":"array_allocation_size_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"676:6:22","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"687:4:22","type":""}],"src":"627:183:22"},{"body":{"nodeType":"YulBlock","src":"879:598:22","statements":[{"body":{"nodeType":"YulBlock","src":"928:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"937:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"940:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"930:6:22"},"nodeType":"YulFunctionCall","src":"930:12:22"},"nodeType":"YulExpressionStatement","src":"930:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"907:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"915:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"903:3:22"},"nodeType":"YulFunctionCall","src":"903:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"922:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"899:3:22"},"nodeType":"YulFunctionCall","src":"899:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"892:6:22"},"nodeType":"YulFunctionCall","src":"892:35:22"},"nodeType":"YulIf","src":"889:55:22"},{"nodeType":"YulVariableDeclaration","src":"953:30:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"976:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"963:12:22"},"nodeType":"YulFunctionCall","src":"963:20:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"957:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"992:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1002:4:22","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"996:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1015:71:22","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1082:2:22"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"1042:39:22"},"nodeType":"YulFunctionCall","src":"1042:43:22"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1026:15:22"},"nodeType":"YulFunctionCall","src":"1026:60:22"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1019:3:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1095:16:22","value":{"name":"dst","nodeType":"YulIdentifier","src":"1108:3:22"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1099:5:22","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1127:3:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1132:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1120:6:22"},"nodeType":"YulFunctionCall","src":"1120:15:22"},"nodeType":"YulExpressionStatement","src":"1120:15:22"},{"nodeType":"YulAssignment","src":"1144:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1155:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1160:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1151:3:22"},"nodeType":"YulFunctionCall","src":"1151:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1144:3:22"}]},{"nodeType":"YulVariableDeclaration","src":"1172:46:22","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1194:6:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1206:1:22","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"1209:2:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1202:3:22"},"nodeType":"YulFunctionCall","src":"1202:10:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1190:3:22"},"nodeType":"YulFunctionCall","src":"1190:23:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1215:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:22"},"nodeType":"YulFunctionCall","src":"1186:32:22"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1176:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1246:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1255:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1258:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1248:6:22"},"nodeType":"YulFunctionCall","src":"1248:12:22"},"nodeType":"YulExpressionStatement","src":"1248:12:22"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1233:6:22"},{"name":"end","nodeType":"YulIdentifier","src":"1241:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1230:2:22"},"nodeType":"YulFunctionCall","src":"1230:15:22"},"nodeType":"YulIf","src":"1227:35:22"},{"nodeType":"YulVariableDeclaration","src":"1271:26:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1286:6:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1294:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1282:3:22"},"nodeType":"YulFunctionCall","src":"1282:15:22"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1275:3:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1362:86:22","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1383:3:22"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1401:3:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1388:12:22"},"nodeType":"YulFunctionCall","src":"1388:17:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1376:6:22"},"nodeType":"YulFunctionCall","src":"1376:30:22"},"nodeType":"YulExpressionStatement","src":"1376:30:22"},{"nodeType":"YulAssignment","src":"1419:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1430:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1435:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1426:3:22"},"nodeType":"YulFunctionCall","src":"1426:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1419:3:22"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1317:3:22"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1322:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1314:2:22"},"nodeType":"YulFunctionCall","src":"1314:15:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1330:23:22","statements":[{"nodeType":"YulAssignment","src":"1332:19:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1343:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1348:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1339:3:22"},"nodeType":"YulFunctionCall","src":"1339:12:22"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1332:3:22"}]}]},"pre":{"nodeType":"YulBlock","src":"1310:3:22","statements":[]},"src":"1306:142:22"},{"nodeType":"YulAssignment","src":"1457:14:22","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"1466:5:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1457:5:22"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"853:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"861:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"869:5:22","type":""}],"src":"815:662:22"},{"body":{"nodeType":"YulBlock","src":"1636:1064:22","statements":[{"body":{"nodeType":"YulBlock","src":"1682:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1691:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1694:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1684:6:22"},"nodeType":"YulFunctionCall","src":"1684:12:22"},"nodeType":"YulExpressionStatement","src":"1684:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1657:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1666:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1653:3:22"},"nodeType":"YulFunctionCall","src":"1653:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1678:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1649:3:22"},"nodeType":"YulFunctionCall","src":"1649:32:22"},"nodeType":"YulIf","src":"1646:52:22"},{"nodeType":"YulAssignment","src":"1707:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1736:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1717:18:22"},"nodeType":"YulFunctionCall","src":"1717:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1707:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"1755:12:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1765:2:22","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1759:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1776:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1807:9:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1818:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1803:3:22"},"nodeType":"YulFunctionCall","src":"1803:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1790:12:22"},"nodeType":"YulFunctionCall","src":"1790:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1780:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1831:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1841:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1835:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1886:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1895:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1898:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1888:6:22"},"nodeType":"YulFunctionCall","src":"1888:12:22"},"nodeType":"YulExpressionStatement","src":"1888:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1874:6:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1882:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1871:2:22"},"nodeType":"YulFunctionCall","src":"1871:14:22"},"nodeType":"YulIf","src":"1868:34:22"},{"nodeType":"YulVariableDeclaration","src":"1911:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1925:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1936:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1921:3:22"},"nodeType":"YulFunctionCall","src":"1921:22:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1915:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1991:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2000:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2003:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1993:6:22"},"nodeType":"YulFunctionCall","src":"1993:12:22"},"nodeType":"YulExpressionStatement","src":"1993:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1970:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"1974:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:22"},"nodeType":"YulFunctionCall","src":"1966:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1981:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1962:3:22"},"nodeType":"YulFunctionCall","src":"1962:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1955:6:22"},"nodeType":"YulFunctionCall","src":"1955:35:22"},"nodeType":"YulIf","src":"1952:55:22"},{"nodeType":"YulVariableDeclaration","src":"2016:26:22","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2039:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2026:12:22"},"nodeType":"YulFunctionCall","src":"2026:16:22"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2020:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2051:71:22","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"2118:2:22"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"2078:39:22"},"nodeType":"YulFunctionCall","src":"2078:43:22"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2062:15:22"},"nodeType":"YulFunctionCall","src":"2062:60:22"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2055:3:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2131:16:22","value":{"name":"dst","nodeType":"YulIdentifier","src":"2144:3:22"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2135:5:22","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2163:3:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2168:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2156:6:22"},"nodeType":"YulFunctionCall","src":"2156:15:22"},"nodeType":"YulExpressionStatement","src":"2156:15:22"},{"nodeType":"YulAssignment","src":"2180:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2191:3:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2196:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2187:3:22"},"nodeType":"YulFunctionCall","src":"2187:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2180:3:22"}]},{"nodeType":"YulVariableDeclaration","src":"2208:42:22","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2230:2:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2238:1:22","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"2241:2:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2234:3:22"},"nodeType":"YulFunctionCall","src":"2234:10:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2226:3:22"},"nodeType":"YulFunctionCall","src":"2226:19:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2247:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2222:3:22"},"nodeType":"YulFunctionCall","src":"2222:28:22"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2212:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2282:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2294:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2284:6:22"},"nodeType":"YulFunctionCall","src":"2284:12:22"},"nodeType":"YulExpressionStatement","src":"2284:12:22"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2265:6:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2273:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2262:2:22"},"nodeType":"YulFunctionCall","src":"2262:19:22"},"nodeType":"YulIf","src":"2259:39:22"},{"nodeType":"YulVariableDeclaration","src":"2307:22:22","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2322:2:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2326:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2318:3:22"},"nodeType":"YulFunctionCall","src":"2318:11:22"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2311:3:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2394:92:22","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2415:3:22"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2439:3:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2420:18:22"},"nodeType":"YulFunctionCall","src":"2420:23:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2408:6:22"},"nodeType":"YulFunctionCall","src":"2408:36:22"},"nodeType":"YulExpressionStatement","src":"2408:36:22"},{"nodeType":"YulAssignment","src":"2457:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2468:3:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2473:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2464:3:22"},"nodeType":"YulFunctionCall","src":"2464:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2457:3:22"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2349:3:22"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2354:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2346:2:22"},"nodeType":"YulFunctionCall","src":"2346:15:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2362:23:22","statements":[{"nodeType":"YulAssignment","src":"2364:19:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2375:3:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2380:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2371:3:22"},"nodeType":"YulFunctionCall","src":"2371:12:22"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2364:3:22"}]}]},"pre":{"nodeType":"YulBlock","src":"2342:3:22","statements":[]},"src":"2338:148:22"},{"nodeType":"YulAssignment","src":"2495:15:22","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2505:5:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2495:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"2519:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2552:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2563:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2548:3:22"},"nodeType":"YulFunctionCall","src":"2548:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2535:12:22"},"nodeType":"YulFunctionCall","src":"2535:32:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2523:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2596:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2605:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2608:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2598:6:22"},"nodeType":"YulFunctionCall","src":"2598:12:22"},"nodeType":"YulExpressionStatement","src":"2598:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2582:8:22"},{"name":"_2","nodeType":"YulIdentifier","src":"2592:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2579:2:22"},"nodeType":"YulFunctionCall","src":"2579:16:22"},"nodeType":"YulIf","src":"2576:36:22"},{"nodeType":"YulAssignment","src":"2621:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2664:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2675:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2660:3:22"},"nodeType":"YulFunctionCall","src":"2660:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2686:7:22"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"2631:28:22"},"nodeType":"YulFunctionCall","src":"2631:63:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2621:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1586:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1597:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1609:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1617:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1625:6:22","type":""}],"src":"1482:1218:22"},{"body":{"nodeType":"YulBlock","src":"2879:233:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2896:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2907:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2889:6:22"},"nodeType":"YulFunctionCall","src":"2889:21:22"},"nodeType":"YulExpressionStatement","src":"2889:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2930:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2941:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2926:3:22"},"nodeType":"YulFunctionCall","src":"2926:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"2946:2:22","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2919:6:22"},"nodeType":"YulFunctionCall","src":"2919:30:22"},"nodeType":"YulExpressionStatement","src":"2919:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2969:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2980:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2965:3:22"},"nodeType":"YulFunctionCall","src":"2965:18:22"},{"hexValue":"5468652074776f20617272617973206d75737420626520776974682074686520","kind":"string","nodeType":"YulLiteral","src":"2985:34:22","type":"","value":"The two arrays must be with the "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2958:6:22"},"nodeType":"YulFunctionCall","src":"2958:62:22"},"nodeType":"YulExpressionStatement","src":"2958:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3040:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3051:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3036:3:22"},"nodeType":"YulFunctionCall","src":"3036:18:22"},{"hexValue":"73616d65206c656e677468","kind":"string","nodeType":"YulLiteral","src":"3056:13:22","type":"","value":"same length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3029:6:22"},"nodeType":"YulFunctionCall","src":"3029:41:22"},"nodeType":"YulExpressionStatement","src":"3029:41:22"},{"nodeType":"YulAssignment","src":"3079:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3091:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3102:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3087:3:22"},"nodeType":"YulFunctionCall","src":"3087:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3079:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_2225ea8d97c8ea827454fbff29514059117fe59eb54cd0567a2b5a813d93e6fb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2856:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2870:4:22","type":""}],"src":"2705:407:22"},{"body":{"nodeType":"YulBlock","src":"3218:125:22","statements":[{"nodeType":"YulAssignment","src":"3228:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3240:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3251:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3236:3:22"},"nodeType":"YulFunctionCall","src":"3236:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3228:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3270:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3285:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3293:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3281:3:22"},"nodeType":"YulFunctionCall","src":"3281:55:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3263:6:22"},"nodeType":"YulFunctionCall","src":"3263:74:22"},"nodeType":"YulExpressionStatement","src":"3263:74:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3187:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3198:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3209:4:22","type":""}],"src":"3117:226:22"},{"body":{"nodeType":"YulBlock","src":"3429:103:22","statements":[{"body":{"nodeType":"YulBlock","src":"3475:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3487:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3477:6:22"},"nodeType":"YulFunctionCall","src":"3477:12:22"},"nodeType":"YulExpressionStatement","src":"3477:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3450:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3459:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3446:3:22"},"nodeType":"YulFunctionCall","src":"3446:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3471:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3442:3:22"},"nodeType":"YulFunctionCall","src":"3442:32:22"},"nodeType":"YulIf","src":"3439:52:22"},{"nodeType":"YulAssignment","src":"3500:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3516:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3510:5:22"},"nodeType":"YulFunctionCall","src":"3510:16:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3500:6:22"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3395:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3406:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3418:6:22","type":""}],"src":"3348:184:22"},{"body":{"nodeType":"YulBlock","src":"3569:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3586:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3593:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3598:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3589:3:22"},"nodeType":"YulFunctionCall","src":"3589:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3579:6:22"},"nodeType":"YulFunctionCall","src":"3579:31:22"},"nodeType":"YulExpressionStatement","src":"3579:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3626:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3629:4:22","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3619:6:22"},"nodeType":"YulFunctionCall","src":"3619:15:22"},"nodeType":"YulExpressionStatement","src":"3619:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3650:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3653:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3643:6:22"},"nodeType":"YulFunctionCall","src":"3643:15:22"},"nodeType":"YulExpressionStatement","src":"3643:15:22"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3537:127:22"},{"body":{"nodeType":"YulBlock","src":"3843:168:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3860:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3871:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3853:6:22"},"nodeType":"YulFunctionCall","src":"3853:21:22"},"nodeType":"YulExpressionStatement","src":"3853:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3894:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3905:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3890:3:22"},"nodeType":"YulFunctionCall","src":"3890:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"3910:2:22","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3883:6:22"},"nodeType":"YulFunctionCall","src":"3883:30:22"},"nodeType":"YulExpressionStatement","src":"3883:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3933:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3944:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3929:3:22"},"nodeType":"YulFunctionCall","src":"3929:18:22"},{"hexValue":"4e6f7420656e6f7567682062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"3949:20:22","type":"","value":"Not enough balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3922:6:22"},"nodeType":"YulFunctionCall","src":"3922:48:22"},"nodeType":"YulExpressionStatement","src":"3922:48:22"},{"nodeType":"YulAssignment","src":"3979:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3991:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4002:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3987:3:22"},"nodeType":"YulFunctionCall","src":"3987:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3979:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3820:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3834:4:22","type":""}],"src":"3669:342:22"},{"body":{"nodeType":"YulBlock","src":"4173:241:22","statements":[{"nodeType":"YulAssignment","src":"4183:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4195:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4206:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4191:3:22"},"nodeType":"YulFunctionCall","src":"4191:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4183:4:22"}]},{"nodeType":"YulVariableDeclaration","src":"4218:52:22","value":{"kind":"number","nodeType":"YulLiteral","src":"4228:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4222:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4286:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4301:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4309:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4297:3:22"},"nodeType":"YulFunctionCall","src":"4297:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4279:6:22"},"nodeType":"YulFunctionCall","src":"4279:34:22"},"nodeType":"YulExpressionStatement","src":"4279:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4333:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4344:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:22"},"nodeType":"YulFunctionCall","src":"4329:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4353:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4361:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4349:3:22"},"nodeType":"YulFunctionCall","src":"4349:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4322:6:22"},"nodeType":"YulFunctionCall","src":"4322:43:22"},"nodeType":"YulExpressionStatement","src":"4322:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4385:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4396:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4381:3:22"},"nodeType":"YulFunctionCall","src":"4381:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"4401:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4374:6:22"},"nodeType":"YulFunctionCall","src":"4374:34:22"},"nodeType":"YulExpressionStatement","src":"4374:34:22"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4126:9:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4137:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4145:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4153:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4164:4:22","type":""}],"src":"4016:398:22"},{"body":{"nodeType":"YulBlock","src":"4497:199:22","statements":[{"body":{"nodeType":"YulBlock","src":"4543:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4552:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4555:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4545:6:22"},"nodeType":"YulFunctionCall","src":"4545:12:22"},"nodeType":"YulExpressionStatement","src":"4545:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4518:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4527:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4514:3:22"},"nodeType":"YulFunctionCall","src":"4514:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4539:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4510:3:22"},"nodeType":"YulFunctionCall","src":"4510:32:22"},"nodeType":"YulIf","src":"4507:52:22"},{"nodeType":"YulVariableDeclaration","src":"4568:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4587:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4581:5:22"},"nodeType":"YulFunctionCall","src":"4581:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4572:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4650:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4659:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4662:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4652:6:22"},"nodeType":"YulFunctionCall","src":"4652:12:22"},"nodeType":"YulExpressionStatement","src":"4652:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4619:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4640:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4633:6:22"},"nodeType":"YulFunctionCall","src":"4633:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4626:6:22"},"nodeType":"YulFunctionCall","src":"4626:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4616:2:22"},"nodeType":"YulFunctionCall","src":"4616:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4609:6:22"},"nodeType":"YulFunctionCall","src":"4609:40:22"},"nodeType":"YulIf","src":"4606:60:22"},{"nodeType":"YulAssignment","src":"4675:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"4685:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4675:6:22"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4463:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4474:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4486:6:22","type":""}],"src":"4419:277:22"},{"body":{"nodeType":"YulBlock","src":"4875:181:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4892:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4903:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4885:6:22"},"nodeType":"YulFunctionCall","src":"4885:21:22"},"nodeType":"YulExpressionStatement","src":"4885:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4926:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4937:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4922:3:22"},"nodeType":"YulFunctionCall","src":"4922:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4942:2:22","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4915:6:22"},"nodeType":"YulFunctionCall","src":"4915:30:22"},"nodeType":"YulExpressionStatement","src":"4915:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4965:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4976:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4961:3:22"},"nodeType":"YulFunctionCall","src":"4961:18:22"},{"hexValue":"546865207472616e7366657220776173206e6f74207375636365737366756c","kind":"string","nodeType":"YulLiteral","src":"4981:33:22","type":"","value":"The transfer was not successful"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4954:6:22"},"nodeType":"YulFunctionCall","src":"4954:61:22"},"nodeType":"YulExpressionStatement","src":"4954:61:22"},{"nodeType":"YulAssignment","src":"5024:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5036:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5047:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5032:3:22"},"nodeType":"YulFunctionCall","src":"5032:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5024:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_37896778bbb81189824e785c20327687387efdfe35b977a04a70260992c96119__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4852:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4866:4:22","type":""}],"src":"4701:355:22"},{"body":{"nodeType":"YulBlock","src":"5108:185:22","statements":[{"body":{"nodeType":"YulBlock","src":"5147:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5168:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5175:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5180:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5171:3:22"},"nodeType":"YulFunctionCall","src":"5171:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5161:6:22"},"nodeType":"YulFunctionCall","src":"5161:31:22"},"nodeType":"YulExpressionStatement","src":"5161:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5212:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5215:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5205:6:22"},"nodeType":"YulFunctionCall","src":"5205:15:22"},"nodeType":"YulExpressionStatement","src":"5205:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5240:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5243:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5233:6:22"},"nodeType":"YulFunctionCall","src":"5233:15:22"},"nodeType":"YulExpressionStatement","src":"5233:15:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5124:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5135:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5131:3:22"},"nodeType":"YulFunctionCall","src":"5131:6:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5121:2:22"},"nodeType":"YulFunctionCall","src":"5121:17:22"},"nodeType":"YulIf","src":"5118:140:22"},{"nodeType":"YulAssignment","src":"5267:20:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5278:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"5285:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5274:3:22"},"nodeType":"YulFunctionCall","src":"5274:13:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5267:3:22"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5090:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5100:3:22","type":""}],"src":"5061:232:22"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _1)\n        }\n        value1 := dst_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_2225ea8d97c8ea827454fbff29514059117fe59eb54cd0567a2b5a813d93e6fb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"The two arrays must be with the \")\n        mstore(add(headStart, 96), \"same length\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Not enough balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_37896778bbb81189824e785c20327687387efdfe35b977a04a70260992c96119__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"The transfer was not successful\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e83f967b14610030575b600080fd5b61004361003e3660046103d2565b610045565b005b80518251146100c15760405162461bcd60e51b815260206004820152602b60248201527f5468652074776f20617272617973206d7573742062652077697468207468652060448201527f73616d65206c656e67746800000000000000000000000000000000000000000060648201526084015b60405180910390fd5b8260005b83518110156102d9576040516370a0823160e01b81523360048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013691906104a4565b838281518110610148576101486104bd565b6020026020010151111561019e5760405162461bcd60e51b815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000060448201526064016100b8565b6000826001600160a01b03166323b872dd338785815181106101c2576101c26104bd565b60200260200101518786815181106101dc576101dc6104bd565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027791906104d3565b9050806102c65760405162461bcd60e51b815260206004820152601f60248201527f546865207472616e7366657220776173206e6f74207375636365737366756c0060448201526064016100b8565b50806102d1816104fc565b9150506100c5565b5050505050565b80356001600160a01b03811681146102f757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561033b5761033b6102fc565b604052919050565b600067ffffffffffffffff82111561035d5761035d6102fc565b5060051b60200190565b600082601f83011261037857600080fd5b8135602061038d61038883610343565b610312565b82815260059290921b840181019181810190868411156103ac57600080fd5b8286015b848110156103c757803583529183019183016103b0565b509695505050505050565b6000806000606084860312156103e757600080fd5b6103f0846102e0565b925060208085013567ffffffffffffffff8082111561040e57600080fd5b818701915087601f83011261042257600080fd5b813561043061038882610343565b81815260059190911b8301840190848101908a83111561044f57600080fd5b938501935b8285101561047457610465856102e0565b82529385019390850190610454565b96505050604087013592508083111561048c57600080fd5b505061049a86828701610367565b9150509250925092565b6000602082840312156104b657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156104e557600080fd5b815180151581146104f557600080fd5b9392505050565b60006001820161051c57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122003506031595208ba74956a3450f4ceb7ca17ce67bd007e4613fb2a5e8b71579c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE83F967B EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x3D2 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652074776F20617272617973206D75737420626520776974682074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73616D65206C656E677468000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x112 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136 SWAP2 SWAP1 PUSH2 0x4A4 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x148 JUMPI PUSH2 0x148 PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682062616C616E63650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C2 JUMPI PUSH2 0x1C2 PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1DC JUMPI PUSH2 0x1DC PUSH2 0x4BD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x253 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x277 SWAP2 SWAP1 PUSH2 0x4D3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865207472616E7366657220776173206E6F74207375636365737366756C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB8 JUMP JUMPDEST POP DUP1 PUSH2 0x2D1 DUP2 PUSH2 0x4FC JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x33B JUMPI PUSH2 0x33B PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x35D JUMPI PUSH2 0x35D PUSH2 0x2FC JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x38D PUSH2 0x388 DUP4 PUSH2 0x343 JUMP JUMPDEST PUSH2 0x312 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3C7 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3B0 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F0 DUP5 PUSH2 0x2E0 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x430 PUSH2 0x388 DUP3 PUSH2 0x343 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x474 JUMPI PUSH2 0x465 DUP6 PUSH2 0x2E0 JUMP JUMPDEST DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x454 JUMP JUMPDEST SWAP7 POP POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x49A DUP7 DUP3 DUP8 ADD PUSH2 0x367 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x51C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB POP PUSH1 0x31 MSIZE MSTORE ADDMOD 0xBA PUSH21 0x956A3450F4CEB7CA17CE67BD007E4613FB2A5E8B71 JUMPI SWAP13 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"115:633:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;146:600;;;;;;:::i;:::-;;:::i;:::-;;;300:8;:15;280:9;:16;:35;272:91;;;;-1:-1:-1;;;272:91:18;;2907:2:22;272:91:18;;;2889:21:22;2946:2;2926:18;;;2919:30;2985:34;2965:18;;;2958:62;3056:13;3036:18;;;3029:41;3087:19;;272:91:18;;;;;;;;;399:20;377:12;434:306;454:9;:16;450:1;:20;434:306;;;518:27;;-1:-1:-1;;;518:27:18;;534:10;518:27;;;3263:74:22;-1:-1:-1;;;;;518:15:18;;;;;3236:18:22;;518:27:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;503:8;512:1;503:11;;;;;;;;:::i;:::-;;;;;;;:42;;495:73;;;;-1:-1:-1;;;495:73:18;;3871:2:22;495:73:18;;;3853:21:22;3910:2;3890:18;;;3883:30;3949:20;3929:18;;;3922:48;3987:18;;495:73:18;3669:342:22;495:73:18;586:11;600:5;-1:-1:-1;;;;;600:18:18;;619:10;631:9;641:1;631:12;;;;;;;;:::i;:::-;;;;;;;645:8;654:1;645:11;;;;;;;;:::i;:::-;;;;;;;;;;;600:57;;;;;;;;;;-1:-1:-1;;;;;4297:15:22;;;600:57:18;;;4279:34:22;4349:15;;;;4329:18;;;4322:43;4381:18;;;4374:34;4191:18;;600:57:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;586:71;;683:6;675:50;;;;-1:-1:-1;;;675:50:18;;4903:2:22;675:50:18;;;4885:21:22;4942:2;4922:18;;;4915:30;4981:33;4961:18;;;4954:61;5032:18;;675:50:18;4701:355:22;675:50:18;-1:-1:-1;472:3:18;;;;:::i;:::-;;;;434:306;;;;258:488;146:600;;;:::o;14:196:22:-;82:20;;-1:-1:-1;;;;;131:54:22;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:127::-;276:10;271:3;267:20;264:1;257:31;307:4;304:1;297:15;331:4;328:1;321:15;347:275;418:2;412:9;483:2;464:13;;-1:-1:-1;;460:27:22;448:40;;518:18;503:34;;539:22;;;500:62;497:88;;;565:18;;:::i;:::-;601:2;594:22;347:275;;-1:-1:-1;347:275:22:o;627:183::-;687:4;720:18;712:6;709:30;706:56;;;742:18;;:::i;:::-;-1:-1:-1;787:1:22;783:14;799:4;779:25;;627:183::o;815:662::-;869:5;922:3;915:4;907:6;903:17;899:27;889:55;;940:1;937;930:12;889:55;976:6;963:20;1002:4;1026:60;1042:43;1082:2;1042:43;:::i;:::-;1026:60;:::i;:::-;1120:15;;;1206:1;1202:10;;;;1190:23;;1186:32;;;1151:12;;;;1230:15;;;1227:35;;;1258:1;1255;1248:12;1227:35;1294:2;1286:6;1282:15;1306:142;1322:6;1317:3;1314:15;1306:142;;;1388:17;;1376:30;;1426:12;;;;1339;;1306:142;;;-1:-1:-1;1466:5:22;815:662;-1:-1:-1;;;;;;815:662:22:o;1482:1218::-;1609:6;1617;1625;1678:2;1666:9;1657:7;1653:23;1649:32;1646:52;;;1694:1;1691;1684:12;1646:52;1717:29;1736:9;1717:29;:::i;:::-;1707:39;;1765:2;1818;1807:9;1803:18;1790:32;1841:18;1882:2;1874:6;1871:14;1868:34;;;1898:1;1895;1888:12;1868:34;1936:6;1925:9;1921:22;1911:32;;1981:7;1974:4;1970:2;1966:13;1962:27;1952:55;;2003:1;2000;1993:12;1952:55;2039:2;2026:16;2062:60;2078:43;2118:2;2078:43;:::i;2062:60::-;2156:15;;;2238:1;2234:10;;;;2226:19;;2222:28;;;2187:12;;;;2262:19;;;2259:39;;;2294:1;2291;2284:12;2259:39;2318:11;;;;2338:148;2354:6;2349:3;2346:15;2338:148;;;2420:23;2439:3;2420:23;:::i;:::-;2408:36;;2371:12;;;;2464;;;;2338:148;;;2505:5;-1:-1:-1;;;2563:2:22;2548:18;;2535:32;;-1:-1:-1;2579:16:22;;;2576:36;;;2608:1;2605;2598:12;2576:36;;;2631:63;2686:7;2675:8;2664:9;2660:24;2631:63;:::i;:::-;2621:73;;;1482:1218;;;;;:::o;3348:184::-;3418:6;3471:2;3459:9;3450:7;3446:23;3442:32;3439:52;;;3487:1;3484;3477:12;3439:52;-1:-1:-1;3510:16:22;;3348:184;-1:-1:-1;3348:184:22:o;3537:127::-;3598:10;3593:3;3589:20;3586:1;3579:31;3629:4;3626:1;3619:15;3653:4;3650:1;3643:15;4419:277;4486:6;4539:2;4527:9;4518:7;4514:23;4510:32;4507:52;;;4555:1;4552;4545:12;4507:52;4587:9;4581:16;4640:5;4633:13;4626:21;4619:5;4616:32;4606:60;;4662:1;4659;4652:12;4606:60;4685:5;4419:277;-1:-1:-1;;;4419:277:22:o;5061:232::-;5100:3;5121:17;;;5118:140;;5180:10;5175:3;5171:20;5168:1;5161:31;5215:4;5212:1;5205:15;5243:4;5240:1;5233:15;5118:140;-1:-1:-1;5285:1:22;5274:13;;5061:232::o"},"gasEstimates":{"creation":{"codeDepositCost":"273800","executionCost":"312","totalCost":"274112"},"external":{"sendTokens(address,address[],uint256[])":"infinite"}},"methodIdentifiers":{"sendTokens(address,address[],uint256[])":"e83f967b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployedTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BatchTransfer.sol\":\"BatchTransfer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BatchTransfer {\\n\\n     function sendTokens(address deployedTokenAddress, address[] memory addresses, uint256[] memory balances) public {\\n            require(addresses.length == balances.length, \\\"The two arrays must be with the same length\\\");\\n            IERC20 token = IERC20(deployedTokenAddress);\\n            for(uint i = 0; i < addresses.length; i++) {\\n                require(balances[i] <= token.balanceOf(msg.sender), \\\"Not enough balance\\\");\\n                bool result = token.transferFrom(msg.sender, addresses[i], balances[i]);\\n                require(result, \\\"The transfer was not successful\\\");\\n            }\\n    }\\n}\\n\",\"keccak256\":\"0xc2ff9d2472308a14a531a651d36f142575fd3434903bdad96ad345b5dff34744\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PercentageCalculator.sol":{"PercentageCalculator":{"abi":[{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_percentage","type":"uint256"}],"name":"div","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"61011461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063a391c15b146038575b600080fd5b604760433660046078565b6059565b60405190815260200160405180910390f35b6000620186a0606783856099565b606f919060bd565b90505b92915050565b60008060408385031215608a57600080fd5b50508035926020909101359150565b8082028115828204841417607257634e487b7160e01b600052601160045260246000fd5b60008260d957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bdcd80262a78b7eae33897853c4d9387b60577652186cc9417ff0b7471dd86fd64736f6c63430008110033","opcodes":"PUSH2 0x114 PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA391C15B EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x47 PUSH1 0x43 CALLDATASIZE PUSH1 0x4 PUSH1 0x78 JUMP JUMPDEST PUSH1 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH3 0x186A0 PUSH1 0x67 DUP4 DUP6 PUSH1 0x99 JUMP JUMPDEST PUSH1 0x6F SWAP2 SWAP1 PUSH1 0xBD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH1 0x72 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xD9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xCD DUP1 0x26 0x2A PUSH25 0xB7EAE33897853C4D9387B60577652186CC9417FF0B7471DD86 REVERT PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"57:296:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;57:296:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@div_3472":{"entryPoint":89,"id":3472,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":120,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":189,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":153,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:946:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"101:161:22","statements":[{"body":{"nodeType":"YulBlock","src":"147:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"149:6:22"},"nodeType":"YulFunctionCall","src":"149:12:22"},"nodeType":"YulExpressionStatement","src":"149:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"122:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"131:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:22"},"nodeType":"YulFunctionCall","src":"118:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"143:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"114:3:22"},"nodeType":"YulFunctionCall","src":"114:32:22"},"nodeType":"YulIf","src":"111:52:22"},{"nodeType":"YulAssignment","src":"172:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"195:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"182:12:22"},"nodeType":"YulFunctionCall","src":"182:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"172:6:22"}]},{"nodeType":"YulAssignment","src":"214:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"241:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"252:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"237:3:22"},"nodeType":"YulFunctionCall","src":"237:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"224:12:22"},"nodeType":"YulFunctionCall","src":"224:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"214:6:22"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"59:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"70:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"82:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"90:6:22","type":""}],"src":"14:248:22"},{"body":{"nodeType":"YulBlock","src":"376:76:22","statements":[{"nodeType":"YulAssignment","src":"386:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"398:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"409:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"394:3:22"},"nodeType":"YulFunctionCall","src":"394:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"386:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"428:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"439:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"421:6:22"},"nodeType":"YulFunctionCall","src":"421:25:22"},"nodeType":"YulExpressionStatement","src":"421:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"345:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"356:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"367:4:22","type":""}],"src":"267:185:22"},{"body":{"nodeType":"YulBlock","src":"509:213:22","statements":[{"nodeType":"YulAssignment","src":"519:20:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"534:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"537:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"530:3:22"},"nodeType":"YulFunctionCall","src":"530:9:22"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"519:7:22"}]},{"body":{"nodeType":"YulBlock","src":"605:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"626:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"633:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"638:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"629:3:22"},"nodeType":"YulFunctionCall","src":"629:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"619:6:22"},"nodeType":"YulFunctionCall","src":"619:31:22"},"nodeType":"YulExpressionStatement","src":"619:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"670:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"673:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"663:6:22"},"nodeType":"YulFunctionCall","src":"663:15:22"},"nodeType":"YulExpressionStatement","src":"663:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"698:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"701:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"691:6:22"},"nodeType":"YulFunctionCall","src":"691:15:22"},"nodeType":"YulExpressionStatement","src":"691:15:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"568:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"561:6:22"},"nodeType":"YulFunctionCall","src":"561:9:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"575:1:22"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"582:7:22"},{"name":"x","nodeType":"YulIdentifier","src":"591:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"578:3:22"},"nodeType":"YulFunctionCall","src":"578:15:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"572:2:22"},"nodeType":"YulFunctionCall","src":"572:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"558:2:22"},"nodeType":"YulFunctionCall","src":"558:37:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"551:6:22"},"nodeType":"YulFunctionCall","src":"551:45:22"},"nodeType":"YulIf","src":"548:168:22"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"488:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"491:1:22","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"497:7:22","type":""}],"src":"457:265:22"},{"body":{"nodeType":"YulBlock","src":"773:171:22","statements":[{"body":{"nodeType":"YulBlock","src":"804:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"832:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"837:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"828:3:22"},"nodeType":"YulFunctionCall","src":"828:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"818:6:22"},"nodeType":"YulFunctionCall","src":"818:31:22"},"nodeType":"YulExpressionStatement","src":"818:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"869:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"872:4:22","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"862:6:22"},"nodeType":"YulFunctionCall","src":"862:15:22"},"nodeType":"YulExpressionStatement","src":"862:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"897:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"900:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"890:6:22"},"nodeType":"YulFunctionCall","src":"890:15:22"},"nodeType":"YulExpressionStatement","src":"890:15:22"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"793:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"786:6:22"},"nodeType":"YulFunctionCall","src":"786:9:22"},"nodeType":"YulIf","src":"783:132:22"},{"nodeType":"YulAssignment","src":"924:14:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"933:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"936:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"929:3:22"},"nodeType":"YulFunctionCall","src":"929:9:22"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"924:1:22"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"758:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"761:1:22","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"767:1:22","type":""}],"src":"727:217:22"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x))))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063a391c15b146038575b600080fd5b604760433660046078565b6059565b60405190815260200160405180910390f35b6000620186a0606783856099565b606f919060bd565b90505b92915050565b60008060408385031215608a57600080fd5b50508035926020909101359150565b8082028115828204841417607257634e487b7160e01b600052601160045260246000fd5b60008260d957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bdcd80262a78b7eae33897853c4d9387b60577652186cc9417ff0b7471dd86fd64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA391C15B EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x47 PUSH1 0x43 CALLDATASIZE PUSH1 0x4 PUSH1 0x78 JUMP JUMPDEST PUSH1 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH3 0x186A0 PUSH1 0x67 DUP4 DUP6 PUSH1 0x99 JUMP JUMPDEST PUSH1 0x6F SWAP2 SWAP1 PUSH1 0xBD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH1 0x72 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xD9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xCD DUP1 0x26 0x2A PUSH25 0xB7EAE33897853C4D9387B60577652186CC9417FF0B7471DD86 REVERT PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"57:296:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;226:125;;;;;;:::i;:::-;;:::i;:::-;;;421:25:22;;;409:2;394:18;226:125:19;;;;;;;;297:7;341:6;317:21;327:11;317:7;:21;:::i;:::-;:30;;;;:::i;:::-;310:37;;226:125;;;;;:::o;14:248:22:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:22;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:22:o;457:265::-;530:9;;;561;;578:15;;;572:22;;558:37;548:168;;638:10;633:3;629:20;626:1;619:31;673:4;670:1;663:15;701:4;698:1;691:15;727:217;767:1;793;783:132;;837:10;832:3;828:20;825:1;818:31;872:4;869:1;862:15;900:4;897:1;890:15;783:132;-1:-1:-1;929:9:22;;727:217::o"},"gasEstimates":{"creation":{"codeDepositCost":"55200","executionCost":"136","totalCost":"55336"},"external":{"div(uint256,uint256)":"infinite"}},"methodIdentifiers":{"div(uint256,uint256)":"a391c15b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"div\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PercentageCalculator.sol\":\"PercentageCalculator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/PercentageCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary PercentageCalculator {\\n\\n\\t/*\\n\\tNote: Percentages will be provided in thousands to represent 3 digits after the decimal point.\\n\\tThe division is made by 100000\\n\\t*/\\n\\tfunction div(uint256 _amount, uint256 _percentage) public pure returns(uint256) {\\n\\t\\treturn _amount * _percentage / 100000;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf993270a256306ddcbd5cd17b510353f52c5c8bb761a72f9c86281b977fdb9d5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Vesting.sol":{"Vesting":{"abi":[{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256[35]","name":"_cumulativeAmountsToVest","type":"uint256[35]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawPercentage","type":"uint256"}],"name":"LogRecipientAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"setter","type":"address"},{"indexed":false,"internalType":"uint256","name":"startDate","type":"uint256"}],"name":"LogStartDateSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LogTokensClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address[]","name":"_recipients","type":"address[]"},{"internalType":"uint256[]","name":"_withdrawPercentages","type":"uint256[]"}],"name":"addMultipleRecipients","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipientAddress","type":"address"},{"internalType":"uint256","name":"_withdrawPercentage","type":"uint256"}],"name":"addRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"cumulativeAmountsToVest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hasClaim","outputs":[{"internalType":"uint256","name":"_owedAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"recipients","outputs":[{"internalType":"uint256","name":"withdrawnAmount","type":"uint256"},{"internalType":"uint256","name":"withdrawPercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startDate","type":"uint256"}],"name":"setStartDate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalPercentages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalRecipients","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addMultipleRecipients(address[],uint256[])":{"details":"Function add  multiple recipients to the vesting contract","params":{"_recipients":"Array of recipient addresses. The arrya length should be less than 230, otherwise it will overflow the gas limit","_withdrawPercentages":"Corresponding percentages of the recipients"}},"addRecipient(address,uint256)":{"details":"Function add recipient to the vesting contract","params":{"_recipientAddress":"The address of the recipient","_withdrawPercentage":"The percentage that the recipient should receive in each vesting period"}},"claim()":{"details":"Function that withdraws all available tokens for the current period"},"constructor":{"params":{"_cumulativeAmountsToVest":"The cumulative amounts for each vesting period","_tokenAddress":"The address of the ALBT token"}},"hasClaim()":{"details":"Function that returns the amount that the user can withdraw at the current period.","returns":{"_owedAmount":"The amount that the user can withdraw at the current period."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setStartDate(uint256)":{"details":"Function that sets the start date of the Vesting","params":{"_startDate":"The start date of the veseting presented as a timestamp"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3575":{"entryPoint":null,"id":3575,"parameterSlots":2,"returnSlots":0},"@_562":{"entryPoint":null,"id":562,"parameterSlots":0,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_650":{"entryPoint":217,"id":650,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_addresst_array$_t_uint256_$35_memory_ptr_fromMemory":{"entryPoint":409,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_stringliteral_c3c3dc87836a060f3a41237e2e2cfadd040e33ba60ca9386fd36cb278e380260__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":387,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1522:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"268:848:22","statements":[{"nodeType":"YulVariableDeclaration","src":"278:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"288:4:22","type":"","value":"1152"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"282:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"337:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"346:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"349:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"339:6:22"},"nodeType":"YulFunctionCall","src":"339:12:22"},"nodeType":"YulExpressionStatement","src":"339:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"312:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"321:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"308:3:22"},"nodeType":"YulFunctionCall","src":"308:23:22"},{"name":"_1","nodeType":"YulIdentifier","src":"333:2:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"304:3:22"},"nodeType":"YulFunctionCall","src":"304:32:22"},"nodeType":"YulIf","src":"301:52:22"},{"nodeType":"YulVariableDeclaration","src":"362:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"381:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"375:5:22"},"nodeType":"YulFunctionCall","src":"375:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"366:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"454:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"463:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"466:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"456:6:22"},"nodeType":"YulFunctionCall","src":"456:12:22"},"nodeType":"YulExpressionStatement","src":"456:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"413:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"424:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"439:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"444:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"435:3:22"},"nodeType":"YulFunctionCall","src":"435:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"448:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"431:3:22"},"nodeType":"YulFunctionCall","src":"431:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"420:3:22"},"nodeType":"YulFunctionCall","src":"420:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"410:2:22"},"nodeType":"YulFunctionCall","src":"410:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"403:6:22"},"nodeType":"YulFunctionCall","src":"403:50:22"},"nodeType":"YulIf","src":"400:70:22"},{"nodeType":"YulAssignment","src":"479:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"489:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"479:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"503:12:22","value":{"kind":"number","nodeType":"YulLiteral","src":"513:2:22","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"507:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"568:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"577:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"580:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"570:6:22"},"nodeType":"YulFunctionCall","src":"570:12:22"},"nodeType":"YulExpressionStatement","src":"570:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"542:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"553:2:22","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"538:3:22"},"nodeType":"YulFunctionCall","src":"538:18:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"558:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"534:3:22"},"nodeType":"YulFunctionCall","src":"534:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"527:6:22"},"nodeType":"YulFunctionCall","src":"527:40:22"},"nodeType":"YulIf","src":"524:60:22"},{"nodeType":"YulVariableDeclaration","src":"593:23:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"613:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"607:5:22"},"nodeType":"YulFunctionCall","src":"607:9:22"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"597:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"625:35:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"647:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"655:4:22","type":"","value":"1120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"643:3:22"},"nodeType":"YulFunctionCall","src":"643:17:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"629:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"737:16:22"},"nodeType":"YulFunctionCall","src":"737:18:22"},"nodeType":"YulExpressionStatement","src":"737:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"678:10:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"698:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"702:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"694:3:22"},"nodeType":"YulFunctionCall","src":"694:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"706:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"690:3:22"},"nodeType":"YulFunctionCall","src":"690:18:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"675:2:22"},"nodeType":"YulFunctionCall","src":"675:34:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"714:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"726:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"711:2:22"},"nodeType":"YulFunctionCall","src":"711:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"672:2:22"},"nodeType":"YulFunctionCall","src":"672:62:22"},"nodeType":"YulIf","src":"669:88:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"773:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"777:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:22"},"nodeType":"YulFunctionCall","src":"766:22:22"},"nodeType":"YulExpressionStatement","src":"766:22:22"},{"nodeType":"YulVariableDeclaration","src":"797:17:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"808:6:22"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"801:3:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"823:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"841:9:22"},{"name":"_1","nodeType":"YulIdentifier","src":"852:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"837:3:22"},"nodeType":"YulFunctionCall","src":"837:18:22"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"827:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"887:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"896:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"899:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"889:6:22"},"nodeType":"YulFunctionCall","src":"889:12:22"},"nodeType":"YulExpressionStatement","src":"889:12:22"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"870:6:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"878:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"867:2:22"},"nodeType":"YulFunctionCall","src":"867:19:22"},"nodeType":"YulIf","src":"864:39:22"},{"nodeType":"YulVariableDeclaration","src":"912:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"927:9:22"},{"name":"_2","nodeType":"YulIdentifier","src":"938:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"923:3:22"},"nodeType":"YulFunctionCall","src":"923:18:22"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"916:3:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1006:79:22","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1027:3:22"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1038:3:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1032:5:22"},"nodeType":"YulFunctionCall","src":"1032:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1020:6:22"},"nodeType":"YulFunctionCall","src":"1020:23:22"},"nodeType":"YulExpressionStatement","src":"1020:23:22"},{"nodeType":"YulAssignment","src":"1056:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1067:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1072:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1063:3:22"},"nodeType":"YulFunctionCall","src":"1063:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1056:3:22"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"961:3:22"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"966:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"958:2:22"},"nodeType":"YulFunctionCall","src":"958:15:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"974:23:22","statements":[{"nodeType":"YulAssignment","src":"976:19:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"987:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"992:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"983:3:22"},"nodeType":"YulFunctionCall","src":"983:12:22"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"976:3:22"}]}]},"pre":{"nodeType":"YulBlock","src":"954:3:22","statements":[]},"src":"950:135:22"},{"nodeType":"YulAssignment","src":"1094:16:22","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1104:6:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1094:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$35_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"226:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"237:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"249:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"257:6:22","type":""}],"src":"146:970:22"},{"body":{"nodeType":"YulBlock","src":"1295:225:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1312:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1323:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1305:6:22"},"nodeType":"YulFunctionCall","src":"1305:21:22"},"nodeType":"YulExpressionStatement","src":"1305:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1346:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1357:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1342:3:22"},"nodeType":"YulFunctionCall","src":"1342:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"1362:2:22","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1335:6:22"},"nodeType":"YulFunctionCall","src":"1335:30:22"},"nodeType":"YulExpressionStatement","src":"1335:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1385:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1396:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1381:3:22"},"nodeType":"YulFunctionCall","src":"1381:18:22"},{"hexValue":"546f6b656e20416464726573732063616e2774206265207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"1401:34:22","type":"","value":"Token Address can't be zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:22"},"nodeType":"YulFunctionCall","src":"1374:62:22"},"nodeType":"YulExpressionStatement","src":"1374:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1456:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1467:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1452:3:22"},"nodeType":"YulFunctionCall","src":"1452:18:22"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"1472:5:22","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1445:6:22"},"nodeType":"YulFunctionCall","src":"1445:33:22"},"nodeType":"YulExpressionStatement","src":"1445:33:22"},{"nodeType":"YulAssignment","src":"1487:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1499:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1510:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1495:3:22"},"nodeType":"YulFunctionCall","src":"1495:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1487:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_c3c3dc87836a060f3a41237e2e2cfadd040e33ba60ca9386fd36cb278e380260__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1272:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1286:4:22","type":""}],"src":"1121:399:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$35_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        let _1 := 1152\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let _2 := 32\n        if iszero(slt(add(headStart, 63), dataEnd)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 1120)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(headStart, _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(headStart, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _2)\n        }\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_stringliteral_c3c3dc87836a060f3a41237e2e2cfadd040e33ba60ca9386fd36cb278e380260__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Token Address can't be zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{"contracts/PercentageCalculator.sol":{"PercentageCalculator":[{"length":20,"start":3009}]}},"object":"60806040523480156200001157600080fd5b506040516200102b3803806200102b833981016040819052620000349162000199565b6200003f33620000d9565b6001600160a01b038216620000a65760405162461bcd60e51b815260206004820152602360248201527f546f6b656e20416464726573732063616e2774206265207a65726f206164647260448201526265737360e81b606482015260840160405180910390fd5b602680546001600160a01b0319166001600160a01b038416179055620000d0600282602362000129565b50505062000242565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82602381019282156200015a579160200282015b828111156200015a5782518255916020019190600101906200013d565b50620001689291506200016c565b5090565b5b808211156200016857600081556001016200016d565b634e487b7160e01b600052604160045260246000fd5b600080610480808486031215620001af57600080fd5b83516001600160a01b0381168114620001c757600080fd5b92506020603f85018613620001db57600080fd5b60405161046081016001600160401b038111828210171562000201576200020162000183565b6040529185019180878411156200021757600080fd5b8287015b848110156200023457805182529083019083016200021b565b509497909650945050505050565b610dd980620002526000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806382d95df51161008c578063eb82031211610066578063eb82031214610177578063f2fde38b146101b3578063f4f8495b146101c6578063f7982243146101cf57600080fd5b806382d95df5146101365780638da5cb5b14610149578063e3eb15991461016457600080fd5b80634e71d92d116100bd5780634e71d92d1461011d57806356fcdae314610125578063715018a61461012e57600080fd5b80630b97bc86146100e4578063114a76a1146101005780633e2c3a5a14610115575b600080fd5b6100ed60015481565b6040519081526020015b60405180910390f35b61011361010e366004610bb0565b6101e2565b005b6100ed61033c565b61011361035e565b6100ed60255481565b61011361052a565b610113610144366004610c70565b61053e565b6000546040516001600160a01b0390911681526020016100f7565b6100ed610172366004610c70565b6105d7565b61019e610185366004610c89565b6028602052600090815260409020805460019091015482565b604080519283526020830191909152016100f7565b6101136101c1366004610c89565b6105ee565b6100ed60275481565b6101136101dd366004610cab565b61067e565b6101ea6108d7565b60e68251106102665760405162461bcd60e51b815260206004820152602860248201527f54686520726563697069656e7473206d757374206265206e6f74206d6f72652060448201527f7468616e2032333000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80518251146102dd5760405162461bcd60e51b815260206004820152602860248201527f5468652074776f2061727279617320617265207769746820646966666572656e60448201527f74206c656e677468000000000000000000000000000000000000000000000000606482015260840161025d565b60005b8251811015610337576103258382815181106102fe576102fe610cd5565b602002602001015183838151811061031857610318610cd5565b602002602001015161067e565b8061032f81610d01565b9150506102e0565b505050565b6000600154421161034d5750600090565b6000610357610931565b5092915050565b6001546000036103b05760405162461bcd60e51b815260206004820152601a60248201527f5468652076657374696e67206861736e27742073746172746564000000000000604482015260640161025d565b6001544210156104025760405162461bcd60e51b815260206004820152601a60248201527f5468652076657374696e67206861736e27742073746172746564000000000000604482015260640161025d565b60008061040d610931565b33600081815260286020526040808220849055602654905163a9059cbb60e01b815260048101939093526024830185905293955091935090916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c9190610d1a565b9050806104eb5760405162461bcd60e51b815260206004820152601c60248201527f54686520636c61696d20776173206e6f74207375636365737366756c00000000604482015260640161025d565b60408051338152602081018590527fcb3b287df62322e81cc5b4c1ba9d9f5a449e34069d403b00eb061faed581737b91015b60405180910390a1505050565b6105326108d7565b61053c6000610a56565b565b6105466108d7565b428110156105965760405162461bcd60e51b815260206004820152601f60248201527f537461727420446174652063616e277420626520696e20746865207061737400604482015260640161025d565b600181905560408051338152602081018390527fe5461405d7121c89a6fa291896d72f0514ac8957d0839feae0b904b5065e51a8910160405180910390a150565b600281602381106105e757600080fd5b0154905081565b6105f66108d7565b6001600160a01b0381166106725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161025d565b61067b81610a56565b50565b6106866108d7565b80620186a081106106ff5760405162461bcd60e51b815260206004820152602c60248201527f50726f76696465642070657263656e746167652073686f756c64206265206c6560448201527f7373207468616e20313030250000000000000000000000000000000000000000606482015260840161025d565b600081116107755760405162461bcd60e51b815260206004820152602c60248201527f50726f76696465642070657263656e746167652073686f756c6420626520677260448201527f6561746572207468616e20300000000000000000000000000000000000000000606482015260840161025d565b6001600160a01b0383166107f15760405162461bcd60e51b815260206004820152602760248201527f526563657069656e7420416464726573732063616e2774206265207a65726f2060448201527f6164647265737300000000000000000000000000000000000000000000000000606482015260840161025d565b816025546107ff9190610d3c565b6025819055620186a010156108565760405162461bcd60e51b815260206004820152601e60248201527f546f74616c2070657263656e7461676573206578636565647320313030250000604482015260640161025d565b6027805490600061086683610d01565b9091555050604080518082018252600080825260208083018681526001600160a01b0388168084526028835292859020935184555160019093019290925582519081529081018490527f595c5a9418c2ea607b802dfdeac0ce122b959c5eb469f9c0bf86c1e262e7c72f910161051d565b6000546001600160a01b0316331461053c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161025d565b600080600062278d00600154426109489190610d55565b6109529190610d68565b90506023811061096b5761096860016023610d55565b90505b600073__$542b321ac4500581434ba7ee99683f852f$__63a391c15b6002846023811061099a5761099a610cd5565b0154336000908152602860205260409081902060010154905160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526024820152604401602060405180830381865af4158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610d8a565b3360009081526028602052604081205491925090610a4b9083610d55565b959194509092505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610afd57610afd610abe565b604052919050565b600067ffffffffffffffff821115610b1f57610b1f610abe565b5060051b60200190565b80356001600160a01b0381168114610b4057600080fd5b919050565b600082601f830112610b5657600080fd5b81356020610b6b610b6683610b05565b610ad4565b82815260059290921b84018101918181019086841115610b8a57600080fd5b8286015b84811015610ba55780358352918301918301610b8e565b509695505050505050565b60008060408385031215610bc357600080fd5b823567ffffffffffffffff80821115610bdb57600080fd5b818501915085601f830112610bef57600080fd5b81356020610bff610b6683610b05565b82815260059290921b84018101918181019089841115610c1e57600080fd5b948201945b83861015610c4357610c3486610b29565b82529482019490820190610c23565b96505086013592505080821115610c5957600080fd5b50610c6685828601610b45565b9150509250929050565b600060208284031215610c8257600080fd5b5035919050565b600060208284031215610c9b57600080fd5b610ca482610b29565b9392505050565b60008060408385031215610cbe57600080fd5b610cc783610b29565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610d1357610d13610ceb565b5060010190565b600060208284031215610d2c57600080fd5b81518015158114610ca457600080fd5b80820180821115610d4f57610d4f610ceb565b92915050565b81810381811115610d4f57610d4f610ceb565b600082610d8557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d9c57600080fd5b505191905056fea2646970667358221220f2fd00a3445248570d5e27053fbfd7eb929c3d3e5aa07988918acc29a47b25d164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x102B CODESIZE SUB DUP1 PUSH3 0x102B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x199 JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0xD9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0xA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20416464726573732063616E2774206265207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x26 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH3 0xD0 PUSH1 0x2 DUP3 PUSH1 0x23 PUSH3 0x129 JUMP JUMPDEST POP POP POP PUSH3 0x242 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 PUSH1 0x23 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x15A JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x15A JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x13D JUMP JUMPDEST POP PUSH3 0x168 SWAP3 SWAP2 POP PUSH3 0x16C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x168 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x16D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x480 DUP1 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP PUSH1 0x20 PUSH1 0x3F DUP6 ADD DUP7 SGT PUSH3 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x460 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x201 JUMPI PUSH3 0x201 PUSH3 0x183 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP6 ADD SWAP2 DUP1 DUP8 DUP5 GT ISZERO PUSH3 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP8 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x234 JUMPI DUP1 MLOAD DUP3 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH3 0x21B JUMP JUMPDEST POP SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDD9 DUP1 PUSH3 0x252 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x82D95DF5 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEB820312 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEB820312 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xF4F8495B EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xF7982243 EQ PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x82D95DF5 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0xE3EB1599 EQ PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E71D92D GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x56FCDAE3 EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB97BC86 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x114A76A1 EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x3E2C3A5A EQ PUSH2 0x115 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x113 PUSH2 0x10E CALLDATASIZE PUSH1 0x4 PUSH2 0xBB0 JUMP JUMPDEST PUSH2 0x1E2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xED PUSH2 0x33C JUMP JUMPDEST PUSH2 0x113 PUSH2 0x35E JUMP JUMPDEST PUSH2 0xED PUSH1 0x25 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x52A JUMP JUMPDEST PUSH2 0x113 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0x53E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xED PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xC89 JUMP JUMPDEST PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xC89 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST PUSH2 0xED PUSH1 0x27 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0xE6 DUP3 MLOAD LT PUSH2 0x266 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520726563697069656E7473206D757374206265206E6F74206D6F726520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7468616E20323330000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x2DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652074776F2061727279617320617265207769746820646966666572656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206C656E677468000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH2 0x325 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FE JUMPI PUSH2 0x2FE PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x318 JUMPI PUSH2 0x318 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x67E JUMP JUMPDEST DUP1 PUSH2 0x32F DUP2 PUSH2 0xD01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD TIMESTAMP GT PUSH2 0x34D JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x357 PUSH2 0x931 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652076657374696E67206861736E27742073746172746564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x1 SLOAD TIMESTAMP LT ISZERO PUSH2 0x402 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652076657374696E67206861736E27742073746172746564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40D PUSH2 0x931 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x26 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP4 SWAP6 POP SWAP2 SWAP4 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x478 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49C SWAP2 SWAP1 PUSH2 0xD1A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520636C61696D20776173206E6F74207375636365737366756C00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xCB3B287DF62322E81CC5B4C1BA9D9F5A449E34069D403B00EB061FAED581737B SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x532 PUSH2 0x8D7 JUMP JUMPDEST PUSH2 0x53C PUSH1 0x0 PUSH2 0xA56 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x546 PUSH2 0x8D7 JUMP JUMPDEST TIMESTAMP DUP2 LT ISZERO PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537461727420446174652063616E277420626520696E20746865207061737400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xE5461405D7121C89A6FA291896D72F0514AC8957D0839FEAE0B904B5065E51A8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x23 DUP2 LT PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x672 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH2 0x67B DUP2 PUSH2 0xA56 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x686 PUSH2 0x8D7 JUMP JUMPDEST DUP1 PUSH3 0x186A0 DUP2 LT PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F76696465642070657263656E746167652073686F756C64206265206C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373207468616E20313030250000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F76696465642070657263656E746167652073686F756C64206265206772 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6561746572207468616E20300000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563657069656E7420416464726573732063616E2774206265207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6164647265737300000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST DUP2 PUSH1 0x25 SLOAD PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0xD3C JUMP JUMPDEST PUSH1 0x25 DUP2 SWAP1 SSTORE PUSH3 0x186A0 LT ISZERO PUSH2 0x856 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2070657263656E7461676573206578636565647320313030250000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x27 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x866 DUP4 PUSH2 0xD01 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP1 DUP5 MSTORE PUSH1 0x28 DUP4 MSTORE SWAP3 DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x595C5A9418C2EA607B802DFDEAC0CE122B959C5EB469F9C0BF86C1E262E7C72F SWAP2 ADD PUSH2 0x51D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x53C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x278D00 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x948 SWAP2 SWAP1 PUSH2 0xD55 JUMP JUMPDEST PUSH2 0x952 SWAP2 SWAP1 PUSH2 0xD68 JUMP JUMPDEST SWAP1 POP PUSH1 0x23 DUP2 LT PUSH2 0x96B JUMPI PUSH2 0x968 PUSH1 0x1 PUSH1 0x23 PUSH2 0xD55 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0xA391C15B PUSH1 0x2 DUP5 PUSH1 0x23 DUP2 LT PUSH2 0x99A JUMPI PUSH2 0x99A PUSH2 0xCD5 JUMP JUMPDEST ADD SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA2D SWAP2 SWAP1 PUSH2 0xD8A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xA4B SWAP1 DUP4 PUSH2 0xD55 JUMP JUMPDEST SWAP6 SWAP2 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xAFD JUMPI PUSH2 0xAFD PUSH2 0xABE JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0xABE JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xB6B PUSH2 0xB66 DUP4 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0xAD4 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBA5 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xB8E JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xBFF PUSH2 0xB66 DUP4 PUSH2 0xB05 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xC43 JUMPI PUSH2 0xC34 DUP7 PUSH2 0xB29 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xC23 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xC59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC66 DUP6 DUP3 DUP7 ADD PUSH2 0xB45 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCA4 DUP3 PUSH2 0xB29 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC7 DUP4 PUSH2 0xB29 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xD13 JUMPI PUSH2 0xD13 PUSH2 0xCEB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xD4F JUMPI PUSH2 0xD4F PUSH2 0xCEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xD4F JUMPI PUSH2 0xD4F PUSH2 0xCEB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xD85 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE REVERT STOP LOG3 DIFFICULTY MSTORE BASEFEE JUMPI 0xD 0x5E 0x27 SDIV EXTCODEHASH 0xBF 0xD7 0xEB SWAP3 SWAP13 RETURNDATASIZE RETURNDATACOPY GAS LOG0 PUSH26 0x88918ACC29A47B25D164736F6C63430008110033000000000000 ","sourceMap":"205:5367:20:-:0;;;1439:327;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:4;719:10:12;936:18:4;:32::i;:::-;-1:-1:-1;;;;;1572:27:20;;1551:109;;;;-1:-1:-1;;;1551:109:20;;1323:2:22;1551:109:20;;;1305:21:22;1362:2;1342:18;;;1335:30;1401:34;1381:18;;;1374:62;-1:-1:-1;;;1452:18:22;;;1445:33;1495:19;;1551:109:20;;;;;;;;1670:5;:29;;-1:-1:-1;;;;;;1670:29:20;-1:-1:-1;;;;;1670:29:20;;;;;1709:50;:23;1735:24;1709:50;;:::i;:::-;;1439:327;;205:5367;;2433:187:4;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:4;;;-1:-1:-1;;;;;;2541:17:4;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;205:5367:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;205:5367:20;;;-1:-1:-1;205:5367:20;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:970;249:6;257;288:4;333:2;321:9;312:7;308:23;304:32;301:52;;;349:1;346;339:12;301:52;375:16;;-1:-1:-1;;;;;420:31:22;;410:42;;400:70;;466:1;463;456:12;400:70;489:5;-1:-1:-1;513:2:22;553;538:18;;534:32;-1:-1:-1;524:60:22;;580:1;577;570:12;524:60;613:2;607:9;655:4;643:17;;-1:-1:-1;;;;;675:34:22;;711:22;;;672:62;669:88;;;737:18;;:::i;:::-;773:2;766:22;837:18;;;;808:6;867:19;;;864:39;;;899:1;896;889:12;864:39;938:2;927:9;923:18;950:135;966:6;961:3;958:15;950:135;;;1032:10;;1020:23;;1063:12;;;;983;;950:135;;;-1:-1:-1;146:970:22;;1104:6;;-1:-1:-1;146:970:22;-1:-1:-1;;;;;146:970:22:o;1121:399::-;205:5367:20;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_593":{"entryPoint":2263,"id":593,"parameterSlots":0,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_650":{"entryPoint":2646,"id":650,"parameterSlots":1,"returnSlots":0},"@addMultipleRecipients_3710":{"entryPoint":482,"id":3710,"parameterSlots":2,"returnSlots":0},"@addRecipient_3659":{"entryPoint":1662,"id":3659,"parameterSlots":2,"returnSlots":0},"@calculateAmounts_3847":{"entryPoint":2353,"id":3847,"parameterSlots":0,"returnSlots":2},"@claim_3765":{"entryPoint":862,"id":3765,"parameterSlots":0,"returnSlots":0},"@cumulativeAmountsToVest_3489":{"entryPoint":1495,"id":3489,"parameterSlots":0,"returnSlots":0},"@hasClaim_3787":{"entryPoint":828,"id":3787,"parameterSlots":0,"returnSlots":1},"@owner_579":{"entryPoint":null,"id":579,"parameterSlots":0,"returnSlots":1},"@recipients_3506":{"entryPoint":null,"id":3506,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_607":{"entryPoint":1322,"id":607,"parameterSlots":0,"returnSlots":0},"@setStartDate_3605":{"entryPoint":1342,"id":3605,"parameterSlots":1,"returnSlots":0},"@startDate_3482":{"entryPoint":null,"id":3482,"parameterSlots":0,"returnSlots":0},"@totalPercentages_3491":{"entryPoint":null,"id":3491,"parameterSlots":0,"returnSlots":0},"@totalRecipients_3501":{"entryPoint":null,"id":3501,"parameterSlots":0,"returnSlots":0},"@transferOwnership_630":{"entryPoint":1518,"id":630,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":2857,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":2885,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3209,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3243,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2992,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3354,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3184,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3a055115b009b714ca33e578386dd7f5a5668f8ed33b12c52cde00b077fafb96__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_537da7c3b78175a72d3f42782eac4174e950854483e90c646831b9f2c09d3884__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_65ba7a7d860d762b28ea32f05970f7d2e943744e6b464d4ae4e27814b8a89ea5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_75a3f70dcc23c85fee4f71cdcc974a138fa461b9b47d61814a5d7524c38d8cbc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b6fe237ee8a03b5d3ca491aefa2d319ec5d5db991e59ca31b919f4be143b1660__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bd176167be579d89cf76ec20076406e30f1dc0059decd24a0591769873a8c6b1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d32a6d0555b0c150d4eeedf802d45631f413c7ba0ebe0c68468421cf2c0b62b7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d56eadba0ca761df006afb92a146f359ec36f6b7ae4f099854a096c095b1080b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":2772,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":2821,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3388,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3432,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3413,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3329,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3307,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3285,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2750,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10105:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:22","statements":[{"nodeType":"YulAssignment","src":"125:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:22"},"nodeType":"YulFunctionCall","src":"133:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:22"},"nodeType":"YulFunctionCall","src":"160:25:22"},"nodeType":"YulExpressionStatement","src":"160:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:22","type":""}],"src":"14:177:22"},{"body":{"nodeType":"YulBlock","src":"228:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"245:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"252:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"257:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"248:3:22"},"nodeType":"YulFunctionCall","src":"248:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"238:6:22"},"nodeType":"YulFunctionCall","src":"238:31:22"},"nodeType":"YulExpressionStatement","src":"238:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"285:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"288:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"278:6:22"},"nodeType":"YulFunctionCall","src":"278:15:22"},"nodeType":"YulExpressionStatement","src":"278:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:22"},"nodeType":"YulFunctionCall","src":"302:15:22"},"nodeType":"YulExpressionStatement","src":"302:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"196:127:22"},{"body":{"nodeType":"YulBlock","src":"373:230:22","statements":[{"nodeType":"YulAssignment","src":"383:19:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"399:2:22","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:22"},"nodeType":"YulFunctionCall","src":"393:9:22"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"383:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"411:58:22","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"433:6:22"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"449:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"445:3:22"},"nodeType":"YulFunctionCall","src":"445:13:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"460:3:22"},"nodeType":"YulFunctionCall","src":"460:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"441:3:22"},"nodeType":"YulFunctionCall","src":"441:27:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"429:3:22"},"nodeType":"YulFunctionCall","src":"429:40:22"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"415:10:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"544:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"546:16:22"},"nodeType":"YulFunctionCall","src":"546:18:22"},"nodeType":"YulExpressionStatement","src":"546:18:22"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"487:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"499:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"484:2:22"},"nodeType":"YulFunctionCall","src":"484:34:22"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"523:10:22"},{"name":"memPtr","nodeType":"YulIdentifier","src":"535:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"520:2:22"},"nodeType":"YulFunctionCall","src":"520:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"481:2:22"},"nodeType":"YulFunctionCall","src":"481:62:22"},"nodeType":"YulIf","src":"478:88:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"582:2:22","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"586:10:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"575:6:22"},"nodeType":"YulFunctionCall","src":"575:22:22"},"nodeType":"YulExpressionStatement","src":"575:22:22"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"353:4:22","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"362:6:22","type":""}],"src":"328:275:22"},{"body":{"nodeType":"YulBlock","src":"677:114:22","statements":[{"body":{"nodeType":"YulBlock","src":"721:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"723:16:22"},"nodeType":"YulFunctionCall","src":"723:18:22"},"nodeType":"YulExpressionStatement","src":"723:18:22"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"693:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"701:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"690:2:22"},"nodeType":"YulFunctionCall","src":"690:30:22"},"nodeType":"YulIf","src":"687:56:22"},{"nodeType":"YulAssignment","src":"752:33:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"768:1:22","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"771:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"764:3:22"},"nodeType":"YulFunctionCall","src":"764:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"780:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"760:3:22"},"nodeType":"YulFunctionCall","src":"760:25:22"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"752:4:22"}]}]},"name":"array_allocation_size_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"657:6:22","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"668:4:22","type":""}],"src":"608:183:22"},{"body":{"nodeType":"YulBlock","src":"845:147:22","statements":[{"nodeType":"YulAssignment","src":"855:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"877:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"864:12:22"},"nodeType":"YulFunctionCall","src":"864:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"855:5:22"}]},{"body":{"nodeType":"YulBlock","src":"970:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"979:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"982:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"972:6:22"},"nodeType":"YulFunctionCall","src":"972:12:22"},"nodeType":"YulExpressionStatement","src":"972:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"906:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"917:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"924:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"913:3:22"},"nodeType":"YulFunctionCall","src":"913:54:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"903:2:22"},"nodeType":"YulFunctionCall","src":"903:65:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"896:6:22"},"nodeType":"YulFunctionCall","src":"896:73:22"},"nodeType":"YulIf","src":"893:93:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"824:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"835:5:22","type":""}],"src":"796:196:22"},{"body":{"nodeType":"YulBlock","src":"1061:598:22","statements":[{"body":{"nodeType":"YulBlock","src":"1110:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1119:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1122:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1112:6:22"},"nodeType":"YulFunctionCall","src":"1112:12:22"},"nodeType":"YulExpressionStatement","src":"1112:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1089:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1097:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:22"},"nodeType":"YulFunctionCall","src":"1085:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"1104:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1081:3:22"},"nodeType":"YulFunctionCall","src":"1081:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1074:6:22"},"nodeType":"YulFunctionCall","src":"1074:35:22"},"nodeType":"YulIf","src":"1071:55:22"},{"nodeType":"YulVariableDeclaration","src":"1135:30:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1158:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1145:12:22"},"nodeType":"YulFunctionCall","src":"1145:20:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1139:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1174:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1184:4:22","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1178:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1197:71:22","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1264:2:22"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"1224:39:22"},"nodeType":"YulFunctionCall","src":"1224:43:22"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1208:15:22"},"nodeType":"YulFunctionCall","src":"1208:60:22"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1201:3:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1277:16:22","value":{"name":"dst","nodeType":"YulIdentifier","src":"1290:3:22"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1281:5:22","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1309:3:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1314:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1302:6:22"},"nodeType":"YulFunctionCall","src":"1302:15:22"},"nodeType":"YulExpressionStatement","src":"1302:15:22"},{"nodeType":"YulAssignment","src":"1326:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1337:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1342:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1333:3:22"},"nodeType":"YulFunctionCall","src":"1333:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1326:3:22"}]},{"nodeType":"YulVariableDeclaration","src":"1354:46:22","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1376:6:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1388:1:22","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"1391:2:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1384:3:22"},"nodeType":"YulFunctionCall","src":"1384:10:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1372:3:22"},"nodeType":"YulFunctionCall","src":"1372:23:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1397:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1368:3:22"},"nodeType":"YulFunctionCall","src":"1368:32:22"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1358:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1428:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1437:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1440:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1430:6:22"},"nodeType":"YulFunctionCall","src":"1430:12:22"},"nodeType":"YulExpressionStatement","src":"1430:12:22"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1415:6:22"},{"name":"end","nodeType":"YulIdentifier","src":"1423:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1412:2:22"},"nodeType":"YulFunctionCall","src":"1412:15:22"},"nodeType":"YulIf","src":"1409:35:22"},{"nodeType":"YulVariableDeclaration","src":"1453:26:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1468:6:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1476:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1464:3:22"},"nodeType":"YulFunctionCall","src":"1464:15:22"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1457:3:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1544:86:22","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1565:3:22"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1583:3:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1570:12:22"},"nodeType":"YulFunctionCall","src":"1570:17:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1558:6:22"},"nodeType":"YulFunctionCall","src":"1558:30:22"},"nodeType":"YulExpressionStatement","src":"1558:30:22"},{"nodeType":"YulAssignment","src":"1601:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1612:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1617:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1608:3:22"},"nodeType":"YulFunctionCall","src":"1608:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1601:3:22"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1499:3:22"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1504:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1496:2:22"},"nodeType":"YulFunctionCall","src":"1496:15:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1512:23:22","statements":[{"nodeType":"YulAssignment","src":"1514:19:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1525:3:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1530:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1521:3:22"},"nodeType":"YulFunctionCall","src":"1521:12:22"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1514:3:22"}]}]},"pre":{"nodeType":"YulBlock","src":"1492:3:22","statements":[]},"src":"1488:142:22"},{"nodeType":"YulAssignment","src":"1639:14:22","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"1648:5:22"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1639:5:22"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1035:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"1043:3:22","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1051:5:22","type":""}],"src":"997:662:22"},{"body":{"nodeType":"YulBlock","src":"1801:1009:22","statements":[{"body":{"nodeType":"YulBlock","src":"1847:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1856:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1859:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1849:6:22"},"nodeType":"YulFunctionCall","src":"1849:12:22"},"nodeType":"YulExpressionStatement","src":"1849:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1822:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1831:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1818:3:22"},"nodeType":"YulFunctionCall","src":"1818:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1843:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1814:3:22"},"nodeType":"YulFunctionCall","src":"1814:32:22"},"nodeType":"YulIf","src":"1811:52:22"},{"nodeType":"YulVariableDeclaration","src":"1872:37:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1899:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1886:12:22"},"nodeType":"YulFunctionCall","src":"1886:23:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1876:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1918:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1928:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1922:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1973:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1982:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1985:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1975:6:22"},"nodeType":"YulFunctionCall","src":"1975:12:22"},"nodeType":"YulExpressionStatement","src":"1975:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1961:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1969:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1958:2:22"},"nodeType":"YulFunctionCall","src":"1958:14:22"},"nodeType":"YulIf","src":"1955:34:22"},{"nodeType":"YulVariableDeclaration","src":"1998:32:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2012:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"2023:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2008:3:22"},"nodeType":"YulFunctionCall","src":"2008:22:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2002:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2078:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2087:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2090:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2080:6:22"},"nodeType":"YulFunctionCall","src":"2080:12:22"},"nodeType":"YulExpressionStatement","src":"2080:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2057:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"2061:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2053:3:22"},"nodeType":"YulFunctionCall","src":"2053:13:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2068:7:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2049:3:22"},"nodeType":"YulFunctionCall","src":"2049:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2042:6:22"},"nodeType":"YulFunctionCall","src":"2042:35:22"},"nodeType":"YulIf","src":"2039:55:22"},{"nodeType":"YulVariableDeclaration","src":"2103:26:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2126:2:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2113:12:22"},"nodeType":"YulFunctionCall","src":"2113:16:22"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2107:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2138:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2148:4:22","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2142:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2161:71:22","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2228:2:22"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"2188:39:22"},"nodeType":"YulFunctionCall","src":"2188:43:22"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2172:15:22"},"nodeType":"YulFunctionCall","src":"2172:60:22"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2165:3:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2241:16:22","value":{"name":"dst","nodeType":"YulIdentifier","src":"2254:3:22"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2245:5:22","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2273:3:22"},{"name":"_3","nodeType":"YulIdentifier","src":"2278:2:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2266:6:22"},"nodeType":"YulFunctionCall","src":"2266:15:22"},"nodeType":"YulExpressionStatement","src":"2266:15:22"},{"nodeType":"YulAssignment","src":"2290:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2301:3:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2306:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2297:3:22"},"nodeType":"YulFunctionCall","src":"2297:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2290:3:22"}]},{"nodeType":"YulVariableDeclaration","src":"2318:42:22","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2340:2:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2348:1:22","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"2351:2:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2344:3:22"},"nodeType":"YulFunctionCall","src":"2344:10:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2336:3:22"},"nodeType":"YulFunctionCall","src":"2336:19:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2357:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2332:3:22"},"nodeType":"YulFunctionCall","src":"2332:28:22"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2322:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2392:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2401:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2404:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2394:6:22"},"nodeType":"YulFunctionCall","src":"2394:12:22"},"nodeType":"YulExpressionStatement","src":"2394:12:22"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2375:6:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2383:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2372:2:22"},"nodeType":"YulFunctionCall","src":"2372:19:22"},"nodeType":"YulIf","src":"2369:39:22"},{"nodeType":"YulVariableDeclaration","src":"2417:22:22","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2432:2:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2436:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2428:3:22"},"nodeType":"YulFunctionCall","src":"2428:11:22"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2421:3:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2504:92:22","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2525:3:22"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2549:3:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2530:18:22"},"nodeType":"YulFunctionCall","src":"2530:23:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2518:6:22"},"nodeType":"YulFunctionCall","src":"2518:36:22"},"nodeType":"YulExpressionStatement","src":"2518:36:22"},{"nodeType":"YulAssignment","src":"2567:19:22","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2578:3:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2583:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2574:3:22"},"nodeType":"YulFunctionCall","src":"2574:12:22"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2567:3:22"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2459:3:22"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2464:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2456:2:22"},"nodeType":"YulFunctionCall","src":"2456:15:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2472:23:22","statements":[{"nodeType":"YulAssignment","src":"2474:19:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2485:3:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2490:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:22"},"nodeType":"YulFunctionCall","src":"2481:12:22"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2474:3:22"}]}]},"pre":{"nodeType":"YulBlock","src":"2452:3:22","statements":[]},"src":"2448:148:22"},{"nodeType":"YulAssignment","src":"2605:15:22","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2615:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2605:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"2629:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2662:9:22"},{"name":"_4","nodeType":"YulIdentifier","src":"2673:2:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2658:3:22"},"nodeType":"YulFunctionCall","src":"2658:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2645:12:22"},"nodeType":"YulFunctionCall","src":"2645:32:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2633:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2706:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2715:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2718:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2708:6:22"},"nodeType":"YulFunctionCall","src":"2708:12:22"},"nodeType":"YulExpressionStatement","src":"2708:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2692:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"2702:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2689:2:22"},"nodeType":"YulFunctionCall","src":"2689:16:22"},"nodeType":"YulIf","src":"2686:36:22"},{"nodeType":"YulAssignment","src":"2731:73:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2774:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2785:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2770:3:22"},"nodeType":"YulFunctionCall","src":"2770:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2796:7:22"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"2741:28:22"},"nodeType":"YulFunctionCall","src":"2741:63:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2731:6:22"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1759:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1770:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1782:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1790:6:22","type":""}],"src":"1664:1146:22"},{"body":{"nodeType":"YulBlock","src":"2885:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"2931:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2940:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2943:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2933:6:22"},"nodeType":"YulFunctionCall","src":"2933:12:22"},"nodeType":"YulExpressionStatement","src":"2933:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2906:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2915:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2902:3:22"},"nodeType":"YulFunctionCall","src":"2902:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2927:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2898:3:22"},"nodeType":"YulFunctionCall","src":"2898:32:22"},"nodeType":"YulIf","src":"2895:52:22"},{"nodeType":"YulAssignment","src":"2956:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2979:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2966:12:22"},"nodeType":"YulFunctionCall","src":"2966:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2956:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2851:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2862:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2874:6:22","type":""}],"src":"2815:180:22"},{"body":{"nodeType":"YulBlock","src":"3101:125:22","statements":[{"nodeType":"YulAssignment","src":"3111:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3123:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3134:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3119:3:22"},"nodeType":"YulFunctionCall","src":"3119:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3111:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3153:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3168:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3176:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3164:3:22"},"nodeType":"YulFunctionCall","src":"3164:55:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3146:6:22"},"nodeType":"YulFunctionCall","src":"3146:74:22"},"nodeType":"YulExpressionStatement","src":"3146:74:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3070:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3081:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3092:4:22","type":""}],"src":"3000:226:22"},{"body":{"nodeType":"YulBlock","src":"3301:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"3347:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3356:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3359:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3349:6:22"},"nodeType":"YulFunctionCall","src":"3349:12:22"},"nodeType":"YulExpressionStatement","src":"3349:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3322:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3318:3:22"},"nodeType":"YulFunctionCall","src":"3318:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3343:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3314:3:22"},"nodeType":"YulFunctionCall","src":"3314:32:22"},"nodeType":"YulIf","src":"3311:52:22"},{"nodeType":"YulAssignment","src":"3372:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3401:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3382:18:22"},"nodeType":"YulFunctionCall","src":"3382:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3372:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3267:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3278:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3290:6:22","type":""}],"src":"3231:186:22"},{"body":{"nodeType":"YulBlock","src":"3551:119:22","statements":[{"nodeType":"YulAssignment","src":"3561:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3573:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3584:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3569:3:22"},"nodeType":"YulFunctionCall","src":"3569:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3561:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3603:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"3614:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3596:6:22"},"nodeType":"YulFunctionCall","src":"3596:25:22"},"nodeType":"YulExpressionStatement","src":"3596:25:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3641:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3652:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3637:3:22"},"nodeType":"YulFunctionCall","src":"3637:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"3657:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3630:6:22"},"nodeType":"YulFunctionCall","src":"3630:34:22"},"nodeType":"YulExpressionStatement","src":"3630:34:22"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3512:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3523:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3531:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3542:4:22","type":""}],"src":"3422:248:22"},{"body":{"nodeType":"YulBlock","src":"3762:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"3808:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3817:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3820:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3810:6:22"},"nodeType":"YulFunctionCall","src":"3810:12:22"},"nodeType":"YulExpressionStatement","src":"3810:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3783:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3792:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3779:3:22"},"nodeType":"YulFunctionCall","src":"3779:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3804:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3775:3:22"},"nodeType":"YulFunctionCall","src":"3775:32:22"},"nodeType":"YulIf","src":"3772:52:22"},{"nodeType":"YulAssignment","src":"3833:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3862:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3843:18:22"},"nodeType":"YulFunctionCall","src":"3843:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3833:6:22"}]},{"nodeType":"YulAssignment","src":"3881:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3908:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3919:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3904:3:22"},"nodeType":"YulFunctionCall","src":"3904:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3891:12:22"},"nodeType":"YulFunctionCall","src":"3891:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3881:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3720:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3731:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3743:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3751:6:22","type":""}],"src":"3675:254:22"},{"body":{"nodeType":"YulBlock","src":"4108:230:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4125:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4136:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4118:6:22"},"nodeType":"YulFunctionCall","src":"4118:21:22"},"nodeType":"YulExpressionStatement","src":"4118:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4159:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4170:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4155:3:22"},"nodeType":"YulFunctionCall","src":"4155:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4175:2:22","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4148:6:22"},"nodeType":"YulFunctionCall","src":"4148:30:22"},"nodeType":"YulExpressionStatement","src":"4148:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4198:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4209:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4194:3:22"},"nodeType":"YulFunctionCall","src":"4194:18:22"},{"hexValue":"54686520726563697069656e7473206d757374206265206e6f74206d6f726520","kind":"string","nodeType":"YulLiteral","src":"4214:34:22","type":"","value":"The recipients must be not more "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4187:6:22"},"nodeType":"YulFunctionCall","src":"4187:62:22"},"nodeType":"YulExpressionStatement","src":"4187:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4269:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4280:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4265:3:22"},"nodeType":"YulFunctionCall","src":"4265:18:22"},{"hexValue":"7468616e20323330","kind":"string","nodeType":"YulLiteral","src":"4285:10:22","type":"","value":"than 230"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4258:6:22"},"nodeType":"YulFunctionCall","src":"4258:38:22"},"nodeType":"YulExpressionStatement","src":"4258:38:22"},{"nodeType":"YulAssignment","src":"4305:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4317:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4328:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4313:3:22"},"nodeType":"YulFunctionCall","src":"4313:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4305:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_75a3f70dcc23c85fee4f71cdcc974a138fa461b9b47d61814a5d7524c38d8cbc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4085:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4099:4:22","type":""}],"src":"3934:404:22"},{"body":{"nodeType":"YulBlock","src":"4517:230:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4534:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4545:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4527:6:22"},"nodeType":"YulFunctionCall","src":"4527:21:22"},"nodeType":"YulExpressionStatement","src":"4527:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4568:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4579:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4564:3:22"},"nodeType":"YulFunctionCall","src":"4564:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4584:2:22","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4557:6:22"},"nodeType":"YulFunctionCall","src":"4557:30:22"},"nodeType":"YulExpressionStatement","src":"4557:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4607:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4618:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4603:3:22"},"nodeType":"YulFunctionCall","src":"4603:18:22"},{"hexValue":"5468652074776f2061727279617320617265207769746820646966666572656e","kind":"string","nodeType":"YulLiteral","src":"4623:34:22","type":"","value":"The two arryas are with differen"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4596:6:22"},"nodeType":"YulFunctionCall","src":"4596:62:22"},"nodeType":"YulExpressionStatement","src":"4596:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4678:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4689:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4674:3:22"},"nodeType":"YulFunctionCall","src":"4674:18:22"},{"hexValue":"74206c656e677468","kind":"string","nodeType":"YulLiteral","src":"4694:10:22","type":"","value":"t length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4667:6:22"},"nodeType":"YulFunctionCall","src":"4667:38:22"},"nodeType":"YulExpressionStatement","src":"4667:38:22"},{"nodeType":"YulAssignment","src":"4714:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4726:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4737:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4722:3:22"},"nodeType":"YulFunctionCall","src":"4722:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4714:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b6fe237ee8a03b5d3ca491aefa2d319ec5d5db991e59ca31b919f4be143b1660__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4494:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4508:4:22","type":""}],"src":"4343:404:22"},{"body":{"nodeType":"YulBlock","src":"4784:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4801:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4808:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4813:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4804:3:22"},"nodeType":"YulFunctionCall","src":"4804:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4794:6:22"},"nodeType":"YulFunctionCall","src":"4794:31:22"},"nodeType":"YulExpressionStatement","src":"4794:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4841:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4844:4:22","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4834:6:22"},"nodeType":"YulFunctionCall","src":"4834:15:22"},"nodeType":"YulExpressionStatement","src":"4834:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4865:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4868:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4858:6:22"},"nodeType":"YulFunctionCall","src":"4858:15:22"},"nodeType":"YulExpressionStatement","src":"4858:15:22"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"4752:127:22"},{"body":{"nodeType":"YulBlock","src":"4916:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4933:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4940:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4945:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4936:3:22"},"nodeType":"YulFunctionCall","src":"4936:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4926:6:22"},"nodeType":"YulFunctionCall","src":"4926:31:22"},"nodeType":"YulExpressionStatement","src":"4926:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4973:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4976:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4966:6:22"},"nodeType":"YulFunctionCall","src":"4966:15:22"},"nodeType":"YulExpressionStatement","src":"4966:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4997:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5000:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4990:6:22"},"nodeType":"YulFunctionCall","src":"4990:15:22"},"nodeType":"YulExpressionStatement","src":"4990:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4884:127:22"},{"body":{"nodeType":"YulBlock","src":"5063:88:22","statements":[{"body":{"nodeType":"YulBlock","src":"5094:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5096:16:22"},"nodeType":"YulFunctionCall","src":"5096:18:22"},"nodeType":"YulExpressionStatement","src":"5096:18:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5079:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5090:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5086:3:22"},"nodeType":"YulFunctionCall","src":"5086:6:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5076:2:22"},"nodeType":"YulFunctionCall","src":"5076:17:22"},"nodeType":"YulIf","src":"5073:43:22"},{"nodeType":"YulAssignment","src":"5125:20:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5136:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"5143:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5132:3:22"},"nodeType":"YulFunctionCall","src":"5132:13:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5125:3:22"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5045:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5055:3:22","type":""}],"src":"5016:135:22"},{"body":{"nodeType":"YulBlock","src":"5330:176:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5358:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5340:6:22"},"nodeType":"YulFunctionCall","src":"5340:21:22"},"nodeType":"YulExpressionStatement","src":"5340:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5381:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5392:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5377:3:22"},"nodeType":"YulFunctionCall","src":"5377:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:22","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5370:6:22"},"nodeType":"YulFunctionCall","src":"5370:30:22"},"nodeType":"YulExpressionStatement","src":"5370:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5420:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5431:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5416:3:22"},"nodeType":"YulFunctionCall","src":"5416:18:22"},{"hexValue":"5468652076657374696e67206861736e27742073746172746564","kind":"string","nodeType":"YulLiteral","src":"5436:28:22","type":"","value":"The vesting hasn't started"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5409:6:22"},"nodeType":"YulFunctionCall","src":"5409:56:22"},"nodeType":"YulExpressionStatement","src":"5409:56:22"},{"nodeType":"YulAssignment","src":"5474:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5486:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5497:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5482:3:22"},"nodeType":"YulFunctionCall","src":"5482:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5474:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5307:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5321:4:22","type":""}],"src":"5156:350:22"},{"body":{"nodeType":"YulBlock","src":"5640:168:22","statements":[{"nodeType":"YulAssignment","src":"5650:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5662:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5673:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5658:3:22"},"nodeType":"YulFunctionCall","src":"5658:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5650:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5692:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5707:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5715:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5703:3:22"},"nodeType":"YulFunctionCall","src":"5703:55:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5685:6:22"},"nodeType":"YulFunctionCall","src":"5685:74:22"},"nodeType":"YulExpressionStatement","src":"5685:74:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5779:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5790:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5775:3:22"},"nodeType":"YulFunctionCall","src":"5775:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"5795:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5768:6:22"},"nodeType":"YulFunctionCall","src":"5768:34:22"},"nodeType":"YulExpressionStatement","src":"5768:34:22"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5601:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5612:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5620:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5631:4:22","type":""}],"src":"5511:297:22"},{"body":{"nodeType":"YulBlock","src":"5891:199:22","statements":[{"body":{"nodeType":"YulBlock","src":"5937:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5946:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5949:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5939:6:22"},"nodeType":"YulFunctionCall","src":"5939:12:22"},"nodeType":"YulExpressionStatement","src":"5939:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5912:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"5921:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5908:3:22"},"nodeType":"YulFunctionCall","src":"5908:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"5933:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5904:3:22"},"nodeType":"YulFunctionCall","src":"5904:32:22"},"nodeType":"YulIf","src":"5901:52:22"},{"nodeType":"YulVariableDeclaration","src":"5962:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5981:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5975:5:22"},"nodeType":"YulFunctionCall","src":"5975:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5966:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"6044:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6053:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6056:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6046:6:22"},"nodeType":"YulFunctionCall","src":"6046:12:22"},"nodeType":"YulExpressionStatement","src":"6046:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6013:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6034:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6027:6:22"},"nodeType":"YulFunctionCall","src":"6027:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6020:6:22"},"nodeType":"YulFunctionCall","src":"6020:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6010:2:22"},"nodeType":"YulFunctionCall","src":"6010:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6003:6:22"},"nodeType":"YulFunctionCall","src":"6003:40:22"},"nodeType":"YulIf","src":"6000:60:22"},{"nodeType":"YulAssignment","src":"6069:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"6079:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6069:6:22"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5857:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5868:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5880:6:22","type":""}],"src":"5813:277:22"},{"body":{"nodeType":"YulBlock","src":"6269:178:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6286:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6297:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6279:6:22"},"nodeType":"YulFunctionCall","src":"6279:21:22"},"nodeType":"YulExpressionStatement","src":"6279:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6320:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6331:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6316:3:22"},"nodeType":"YulFunctionCall","src":"6316:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6336:2:22","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6309:6:22"},"nodeType":"YulFunctionCall","src":"6309:30:22"},"nodeType":"YulExpressionStatement","src":"6309:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6359:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6370:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6355:3:22"},"nodeType":"YulFunctionCall","src":"6355:18:22"},{"hexValue":"54686520636c61696d20776173206e6f74207375636365737366756c","kind":"string","nodeType":"YulLiteral","src":"6375:30:22","type":"","value":"The claim was not successful"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6348:6:22"},"nodeType":"YulFunctionCall","src":"6348:58:22"},"nodeType":"YulExpressionStatement","src":"6348:58:22"},{"nodeType":"YulAssignment","src":"6415:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6427:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6438:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6423:3:22"},"nodeType":"YulFunctionCall","src":"6423:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6415:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_3a055115b009b714ca33e578386dd7f5a5668f8ed33b12c52cde00b077fafb96__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6246:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6260:4:22","type":""}],"src":"6095:352:22"},{"body":{"nodeType":"YulBlock","src":"6626:181:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6643:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6654:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6636:6:22"},"nodeType":"YulFunctionCall","src":"6636:21:22"},"nodeType":"YulExpressionStatement","src":"6636:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6677:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6688:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6673:3:22"},"nodeType":"YulFunctionCall","src":"6673:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6693:2:22","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6666:6:22"},"nodeType":"YulFunctionCall","src":"6666:30:22"},"nodeType":"YulExpressionStatement","src":"6666:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6716:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6727:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6712:3:22"},"nodeType":"YulFunctionCall","src":"6712:18:22"},{"hexValue":"537461727420446174652063616e277420626520696e207468652070617374","kind":"string","nodeType":"YulLiteral","src":"6732:33:22","type":"","value":"Start Date can't be in the past"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6705:6:22"},"nodeType":"YulFunctionCall","src":"6705:61:22"},"nodeType":"YulExpressionStatement","src":"6705:61:22"},{"nodeType":"YulAssignment","src":"6775:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6787:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6798:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6783:3:22"},"nodeType":"YulFunctionCall","src":"6783:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6775:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_bd176167be579d89cf76ec20076406e30f1dc0059decd24a0591769873a8c6b1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6603:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6617:4:22","type":""}],"src":"6452:355:22"},{"body":{"nodeType":"YulBlock","src":"6986:228:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7003:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7014:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6996:6:22"},"nodeType":"YulFunctionCall","src":"6996:21:22"},"nodeType":"YulExpressionStatement","src":"6996:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7037:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7048:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:22"},"nodeType":"YulFunctionCall","src":"7033:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7053:2:22","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7026:6:22"},"nodeType":"YulFunctionCall","src":"7026:30:22"},"nodeType":"YulExpressionStatement","src":"7026:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7076:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7087:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7072:3:22"},"nodeType":"YulFunctionCall","src":"7072:18:22"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"7092:34:22","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7065:6:22"},"nodeType":"YulFunctionCall","src":"7065:62:22"},"nodeType":"YulExpressionStatement","src":"7065:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7147:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7158:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7143:3:22"},"nodeType":"YulFunctionCall","src":"7143:18:22"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"7163:8:22","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7136:6:22"},"nodeType":"YulFunctionCall","src":"7136:36:22"},"nodeType":"YulExpressionStatement","src":"7136:36:22"},{"nodeType":"YulAssignment","src":"7181:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7193:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7204:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7189:3:22"},"nodeType":"YulFunctionCall","src":"7189:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7181:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6963:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6977:4:22","type":""}],"src":"6812:402:22"},{"body":{"nodeType":"YulBlock","src":"7393:234:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7410:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7421:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7403:6:22"},"nodeType":"YulFunctionCall","src":"7403:21:22"},"nodeType":"YulExpressionStatement","src":"7403:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7444:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7455:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:22"},"nodeType":"YulFunctionCall","src":"7440:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7460:2:22","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7433:6:22"},"nodeType":"YulFunctionCall","src":"7433:30:22"},"nodeType":"YulExpressionStatement","src":"7433:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7483:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7494:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7479:3:22"},"nodeType":"YulFunctionCall","src":"7479:18:22"},{"hexValue":"50726f76696465642070657263656e746167652073686f756c64206265206c65","kind":"string","nodeType":"YulLiteral","src":"7499:34:22","type":"","value":"Provided percentage should be le"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7472:6:22"},"nodeType":"YulFunctionCall","src":"7472:62:22"},"nodeType":"YulExpressionStatement","src":"7472:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7554:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7565:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7550:3:22"},"nodeType":"YulFunctionCall","src":"7550:18:22"},{"hexValue":"7373207468616e2031303025","kind":"string","nodeType":"YulLiteral","src":"7570:14:22","type":"","value":"ss than 100%"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7543:6:22"},"nodeType":"YulFunctionCall","src":"7543:42:22"},"nodeType":"YulExpressionStatement","src":"7543:42:22"},{"nodeType":"YulAssignment","src":"7594:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7606:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7617:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7602:3:22"},"nodeType":"YulFunctionCall","src":"7602:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7594:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_65ba7a7d860d762b28ea32f05970f7d2e943744e6b464d4ae4e27814b8a89ea5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7370:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7384:4:22","type":""}],"src":"7219:408:22"},{"body":{"nodeType":"YulBlock","src":"7806:234:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7823:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7834:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7816:6:22"},"nodeType":"YulFunctionCall","src":"7816:21:22"},"nodeType":"YulExpressionStatement","src":"7816:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7857:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7868:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7853:3:22"},"nodeType":"YulFunctionCall","src":"7853:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7873:2:22","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7846:6:22"},"nodeType":"YulFunctionCall","src":"7846:30:22"},"nodeType":"YulExpressionStatement","src":"7846:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7896:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7907:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7892:3:22"},"nodeType":"YulFunctionCall","src":"7892:18:22"},{"hexValue":"50726f76696465642070657263656e746167652073686f756c64206265206772","kind":"string","nodeType":"YulLiteral","src":"7912:34:22","type":"","value":"Provided percentage should be gr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7885:6:22"},"nodeType":"YulFunctionCall","src":"7885:62:22"},"nodeType":"YulExpressionStatement","src":"7885:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7967:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7978:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7963:3:22"},"nodeType":"YulFunctionCall","src":"7963:18:22"},{"hexValue":"6561746572207468616e2030","kind":"string","nodeType":"YulLiteral","src":"7983:14:22","type":"","value":"eater than 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7956:6:22"},"nodeType":"YulFunctionCall","src":"7956:42:22"},"nodeType":"YulExpressionStatement","src":"7956:42:22"},{"nodeType":"YulAssignment","src":"8007:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8019:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8030:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8015:3:22"},"nodeType":"YulFunctionCall","src":"8015:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8007:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_537da7c3b78175a72d3f42782eac4174e950854483e90c646831b9f2c09d3884__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7783:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7797:4:22","type":""}],"src":"7632:408:22"},{"body":{"nodeType":"YulBlock","src":"8219:229:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8236:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8247:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8229:6:22"},"nodeType":"YulFunctionCall","src":"8229:21:22"},"nodeType":"YulExpressionStatement","src":"8229:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8270:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8281:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8266:3:22"},"nodeType":"YulFunctionCall","src":"8266:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8286:2:22","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8259:6:22"},"nodeType":"YulFunctionCall","src":"8259:30:22"},"nodeType":"YulExpressionStatement","src":"8259:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8309:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8320:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8305:3:22"},"nodeType":"YulFunctionCall","src":"8305:18:22"},{"hexValue":"526563657069656e7420416464726573732063616e2774206265207a65726f20","kind":"string","nodeType":"YulLiteral","src":"8325:34:22","type":"","value":"Recepient Address can't be zero "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8298:6:22"},"nodeType":"YulFunctionCall","src":"8298:62:22"},"nodeType":"YulExpressionStatement","src":"8298:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8380:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8391:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8376:3:22"},"nodeType":"YulFunctionCall","src":"8376:18:22"},{"hexValue":"61646472657373","kind":"string","nodeType":"YulLiteral","src":"8396:9:22","type":"","value":"address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8369:6:22"},"nodeType":"YulFunctionCall","src":"8369:37:22"},"nodeType":"YulExpressionStatement","src":"8369:37:22"},{"nodeType":"YulAssignment","src":"8415:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8427:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8438:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8423:3:22"},"nodeType":"YulFunctionCall","src":"8423:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8415:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_d56eadba0ca761df006afb92a146f359ec36f6b7ae4f099854a096c095b1080b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8196:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8210:4:22","type":""}],"src":"8045:403:22"},{"body":{"nodeType":"YulBlock","src":"8501:77:22","statements":[{"nodeType":"YulAssignment","src":"8511:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8522:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"8525:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8518:3:22"},"nodeType":"YulFunctionCall","src":"8518:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"8511:3:22"}]},{"body":{"nodeType":"YulBlock","src":"8550:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8552:16:22"},"nodeType":"YulFunctionCall","src":"8552:18:22"},"nodeType":"YulExpressionStatement","src":"8552:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8542:1:22"},{"name":"sum","nodeType":"YulIdentifier","src":"8545:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8539:2:22"},"nodeType":"YulFunctionCall","src":"8539:10:22"},"nodeType":"YulIf","src":"8536:36:22"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8484:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"8487:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"8493:3:22","type":""}],"src":"8453:125:22"},{"body":{"nodeType":"YulBlock","src":"8757:180:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8774:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8785:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8767:6:22"},"nodeType":"YulFunctionCall","src":"8767:21:22"},"nodeType":"YulExpressionStatement","src":"8767:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8808:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8819:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8804:3:22"},"nodeType":"YulFunctionCall","src":"8804:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8824:2:22","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8797:6:22"},"nodeType":"YulFunctionCall","src":"8797:30:22"},"nodeType":"YulExpressionStatement","src":"8797:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8847:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8858:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8843:3:22"},"nodeType":"YulFunctionCall","src":"8843:18:22"},{"hexValue":"546f74616c2070657263656e746167657320657863656564732031303025","kind":"string","nodeType":"YulLiteral","src":"8863:32:22","type":"","value":"Total percentages exceeds 100%"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8836:6:22"},"nodeType":"YulFunctionCall","src":"8836:60:22"},"nodeType":"YulExpressionStatement","src":"8836:60:22"},{"nodeType":"YulAssignment","src":"8905:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8917:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8928:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8913:3:22"},"nodeType":"YulFunctionCall","src":"8913:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8905:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_d32a6d0555b0c150d4eeedf802d45631f413c7ba0ebe0c68468421cf2c0b62b7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8734:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8748:4:22","type":""}],"src":"8583:354:22"},{"body":{"nodeType":"YulBlock","src":"9116:182:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9133:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9144:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9126:6:22"},"nodeType":"YulFunctionCall","src":"9126:21:22"},"nodeType":"YulExpressionStatement","src":"9126:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9167:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9178:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9163:3:22"},"nodeType":"YulFunctionCall","src":"9163:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9183:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9156:6:22"},"nodeType":"YulFunctionCall","src":"9156:30:22"},"nodeType":"YulExpressionStatement","src":"9156:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9206:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9217:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9202:3:22"},"nodeType":"YulFunctionCall","src":"9202:18:22"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9222:34:22","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9195:6:22"},"nodeType":"YulFunctionCall","src":"9195:62:22"},"nodeType":"YulExpressionStatement","src":"9195:62:22"},{"nodeType":"YulAssignment","src":"9266:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9278:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9289:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9274:3:22"},"nodeType":"YulFunctionCall","src":"9274:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9266:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9093:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9107:4:22","type":""}],"src":"8942:356:22"},{"body":{"nodeType":"YulBlock","src":"9352:79:22","statements":[{"nodeType":"YulAssignment","src":"9362:17:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9374:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"9377:1:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9370:3:22"},"nodeType":"YulFunctionCall","src":"9370:9:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"9362:4:22"}]},{"body":{"nodeType":"YulBlock","src":"9403:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9405:16:22"},"nodeType":"YulFunctionCall","src":"9405:18:22"},"nodeType":"YulExpressionStatement","src":"9405:18:22"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"9394:4:22"},{"name":"x","nodeType":"YulIdentifier","src":"9400:1:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9391:2:22"},"nodeType":"YulFunctionCall","src":"9391:11:22"},"nodeType":"YulIf","src":"9388:37:22"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9334:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"9337:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"9343:4:22","type":""}],"src":"9303:128:22"},{"body":{"nodeType":"YulBlock","src":"9482:171:22","statements":[{"body":{"nodeType":"YulBlock","src":"9513:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9534:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9541:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9546:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9537:3:22"},"nodeType":"YulFunctionCall","src":"9537:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9527:6:22"},"nodeType":"YulFunctionCall","src":"9527:31:22"},"nodeType":"YulExpressionStatement","src":"9527:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9578:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9581:4:22","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9571:6:22"},"nodeType":"YulFunctionCall","src":"9571:15:22"},"nodeType":"YulExpressionStatement","src":"9571:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9606:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9609:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9599:6:22"},"nodeType":"YulFunctionCall","src":"9599:15:22"},"nodeType":"YulExpressionStatement","src":"9599:15:22"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9502:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9495:6:22"},"nodeType":"YulFunctionCall","src":"9495:9:22"},"nodeType":"YulIf","src":"9492:132:22"},{"nodeType":"YulAssignment","src":"9633:14:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9642:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"9645:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9638:3:22"},"nodeType":"YulFunctionCall","src":"9638:9:22"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"9633:1:22"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9467:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"9470:1:22","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"9476:1:22","type":""}],"src":"9436:217:22"},{"body":{"nodeType":"YulBlock","src":"9795:119:22","statements":[{"nodeType":"YulAssignment","src":"9805:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9817:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9828:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9813:3:22"},"nodeType":"YulFunctionCall","src":"9813:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9805:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9847:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"9858:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9840:6:22"},"nodeType":"YulFunctionCall","src":"9840:25:22"},"nodeType":"YulExpressionStatement","src":"9840:25:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9885:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9896:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9881:3:22"},"nodeType":"YulFunctionCall","src":"9881:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"9901:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9874:6:22"},"nodeType":"YulFunctionCall","src":"9874:34:22"},"nodeType":"YulExpressionStatement","src":"9874:34:22"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9756:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9767:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9775:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9786:4:22","type":""}],"src":"9658:256:22"},{"body":{"nodeType":"YulBlock","src":"10000:103:22","statements":[{"body":{"nodeType":"YulBlock","src":"10046:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10055:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10058:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10048:6:22"},"nodeType":"YulFunctionCall","src":"10048:12:22"},"nodeType":"YulExpressionStatement","src":"10048:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10021:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"10030:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10017:3:22"},"nodeType":"YulFunctionCall","src":"10017:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"10042:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10013:3:22"},"nodeType":"YulFunctionCall","src":"10013:32:22"},"nodeType":"YulIf","src":"10010:52:22"},{"nodeType":"YulAssignment","src":"10071:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10087:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10081:5:22"},"nodeType":"YulFunctionCall","src":"10081:16:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10071:6:22"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9966:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9977:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9989:6:22","type":""}],"src":"9919:184:22"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := dst_1\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_75a3f70dcc23c85fee4f71cdcc974a138fa461b9b47d61814a5d7524c38d8cbc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"The recipients must be not more \")\n        mstore(add(headStart, 96), \"than 230\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b6fe237ee8a03b5d3ca491aefa2d319ec5d5db991e59ca31b919f4be143b1660__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"The two arryas are with differen\")\n        mstore(add(headStart, 96), \"t length\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_033d82692511fc303b257332db2929c3f7439c895a18f92990317b45af465d87__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"The vesting hasn't started\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_3a055115b009b714ca33e578386dd7f5a5668f8ed33b12c52cde00b077fafb96__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"The claim was not successful\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bd176167be579d89cf76ec20076406e30f1dc0059decd24a0591769873a8c6b1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Start Date can't be in the past\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_65ba7a7d860d762b28ea32f05970f7d2e943744e6b464d4ae4e27814b8a89ea5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Provided percentage should be le\")\n        mstore(add(headStart, 96), \"ss than 100%\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_537da7c3b78175a72d3f42782eac4174e950854483e90c646831b9f2c09d3884__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Provided percentage should be gr\")\n        mstore(add(headStart, 96), \"eater than 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d56eadba0ca761df006afb92a146f359ec36f6b7ae4f099854a096c095b1080b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Recepient Address can't be zero \")\n        mstore(add(headStart, 96), \"address\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_d32a6d0555b0c150d4eeedf802d45631f413c7ba0ebe0c68468421cf2c0b62b7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Total percentages exceeds 100%\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"contracts/PercentageCalculator.sol":{"PercentageCalculator":[{"length":20,"start":2415}]}},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c806382d95df51161008c578063eb82031211610066578063eb82031214610177578063f2fde38b146101b3578063f4f8495b146101c6578063f7982243146101cf57600080fd5b806382d95df5146101365780638da5cb5b14610149578063e3eb15991461016457600080fd5b80634e71d92d116100bd5780634e71d92d1461011d57806356fcdae314610125578063715018a61461012e57600080fd5b80630b97bc86146100e4578063114a76a1146101005780633e2c3a5a14610115575b600080fd5b6100ed60015481565b6040519081526020015b60405180910390f35b61011361010e366004610bb0565b6101e2565b005b6100ed61033c565b61011361035e565b6100ed60255481565b61011361052a565b610113610144366004610c70565b61053e565b6000546040516001600160a01b0390911681526020016100f7565b6100ed610172366004610c70565b6105d7565b61019e610185366004610c89565b6028602052600090815260409020805460019091015482565b604080519283526020830191909152016100f7565b6101136101c1366004610c89565b6105ee565b6100ed60275481565b6101136101dd366004610cab565b61067e565b6101ea6108d7565b60e68251106102665760405162461bcd60e51b815260206004820152602860248201527f54686520726563697069656e7473206d757374206265206e6f74206d6f72652060448201527f7468616e2032333000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80518251146102dd5760405162461bcd60e51b815260206004820152602860248201527f5468652074776f2061727279617320617265207769746820646966666572656e60448201527f74206c656e677468000000000000000000000000000000000000000000000000606482015260840161025d565b60005b8251811015610337576103258382815181106102fe576102fe610cd5565b602002602001015183838151811061031857610318610cd5565b602002602001015161067e565b8061032f81610d01565b9150506102e0565b505050565b6000600154421161034d5750600090565b6000610357610931565b5092915050565b6001546000036103b05760405162461bcd60e51b815260206004820152601a60248201527f5468652076657374696e67206861736e27742073746172746564000000000000604482015260640161025d565b6001544210156104025760405162461bcd60e51b815260206004820152601a60248201527f5468652076657374696e67206861736e27742073746172746564000000000000604482015260640161025d565b60008061040d610931565b33600081815260286020526040808220849055602654905163a9059cbb60e01b815260048101939093526024830185905293955091935090916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c9190610d1a565b9050806104eb5760405162461bcd60e51b815260206004820152601c60248201527f54686520636c61696d20776173206e6f74207375636365737366756c00000000604482015260640161025d565b60408051338152602081018590527fcb3b287df62322e81cc5b4c1ba9d9f5a449e34069d403b00eb061faed581737b91015b60405180910390a1505050565b6105326108d7565b61053c6000610a56565b565b6105466108d7565b428110156105965760405162461bcd60e51b815260206004820152601f60248201527f537461727420446174652063616e277420626520696e20746865207061737400604482015260640161025d565b600181905560408051338152602081018390527fe5461405d7121c89a6fa291896d72f0514ac8957d0839feae0b904b5065e51a8910160405180910390a150565b600281602381106105e757600080fd5b0154905081565b6105f66108d7565b6001600160a01b0381166106725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161025d565b61067b81610a56565b50565b6106866108d7565b80620186a081106106ff5760405162461bcd60e51b815260206004820152602c60248201527f50726f76696465642070657263656e746167652073686f756c64206265206c6560448201527f7373207468616e20313030250000000000000000000000000000000000000000606482015260840161025d565b600081116107755760405162461bcd60e51b815260206004820152602c60248201527f50726f76696465642070657263656e746167652073686f756c6420626520677260448201527f6561746572207468616e20300000000000000000000000000000000000000000606482015260840161025d565b6001600160a01b0383166107f15760405162461bcd60e51b815260206004820152602760248201527f526563657069656e7420416464726573732063616e2774206265207a65726f2060448201527f6164647265737300000000000000000000000000000000000000000000000000606482015260840161025d565b816025546107ff9190610d3c565b6025819055620186a010156108565760405162461bcd60e51b815260206004820152601e60248201527f546f74616c2070657263656e7461676573206578636565647320313030250000604482015260640161025d565b6027805490600061086683610d01565b9091555050604080518082018252600080825260208083018681526001600160a01b0388168084526028835292859020935184555160019093019290925582519081529081018490527f595c5a9418c2ea607b802dfdeac0ce122b959c5eb469f9c0bf86c1e262e7c72f910161051d565b6000546001600160a01b0316331461053c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161025d565b600080600062278d00600154426109489190610d55565b6109529190610d68565b90506023811061096b5761096860016023610d55565b90505b600073__$542b321ac4500581434ba7ee99683f852f$__63a391c15b6002846023811061099a5761099a610cd5565b0154336000908152602860205260409081902060010154905160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526024820152604401602060405180830381865af4158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610d8a565b3360009081526028602052604081205491925090610a4b9083610d55565b959194509092505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610afd57610afd610abe565b604052919050565b600067ffffffffffffffff821115610b1f57610b1f610abe565b5060051b60200190565b80356001600160a01b0381168114610b4057600080fd5b919050565b600082601f830112610b5657600080fd5b81356020610b6b610b6683610b05565b610ad4565b82815260059290921b84018101918181019086841115610b8a57600080fd5b8286015b84811015610ba55780358352918301918301610b8e565b509695505050505050565b60008060408385031215610bc357600080fd5b823567ffffffffffffffff80821115610bdb57600080fd5b818501915085601f830112610bef57600080fd5b81356020610bff610b6683610b05565b82815260059290921b84018101918181019089841115610c1e57600080fd5b948201945b83861015610c4357610c3486610b29565b82529482019490820190610c23565b96505086013592505080821115610c5957600080fd5b50610c6685828601610b45565b9150509250929050565b600060208284031215610c8257600080fd5b5035919050565b600060208284031215610c9b57600080fd5b610ca482610b29565b9392505050565b60008060408385031215610cbe57600080fd5b610cc783610b29565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610d1357610d13610ceb565b5060010190565b600060208284031215610d2c57600080fd5b81518015158114610ca457600080fd5b80820180821115610d4f57610d4f610ceb565b92915050565b81810381811115610d4f57610d4f610ceb565b600082610d8557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d9c57600080fd5b505191905056fea2646970667358221220f2fd00a3445248570d5e27053fbfd7eb929c3d3e5aa07988918acc29a47b25d164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x82D95DF5 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEB820312 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEB820312 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xF4F8495B EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xF7982243 EQ PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x82D95DF5 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0xE3EB1599 EQ PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E71D92D GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x56FCDAE3 EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB97BC86 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x114A76A1 EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x3E2C3A5A EQ PUSH2 0x115 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x113 PUSH2 0x10E CALLDATASIZE PUSH1 0x4 PUSH2 0xBB0 JUMP JUMPDEST PUSH2 0x1E2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xED PUSH2 0x33C JUMP JUMPDEST PUSH2 0x113 PUSH2 0x35E JUMP JUMPDEST PUSH2 0xED PUSH1 0x25 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x52A JUMP JUMPDEST PUSH2 0x113 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0x53E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xED PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xC89 JUMP JUMPDEST PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xF7 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xC89 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST PUSH2 0xED PUSH1 0x27 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0xE6 DUP3 MLOAD LT PUSH2 0x266 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520726563697069656E7473206D757374206265206E6F74206D6F726520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7468616E20323330000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0x2DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652074776F2061727279617320617265207769746820646966666572656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206C656E677468000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH2 0x325 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FE JUMPI PUSH2 0x2FE PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x318 JUMPI PUSH2 0x318 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x67E JUMP JUMPDEST DUP1 PUSH2 0x32F DUP2 PUSH2 0xD01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD TIMESTAMP GT PUSH2 0x34D JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x357 PUSH2 0x931 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652076657374696E67206861736E27742073746172746564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x1 SLOAD TIMESTAMP LT ISZERO PUSH2 0x402 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652076657374696E67206861736E27742073746172746564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40D PUSH2 0x931 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x26 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP4 SWAP6 POP SWAP2 SWAP4 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x478 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49C SWAP2 SWAP1 PUSH2 0xD1A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520636C61696D20776173206E6F74207375636365737366756C00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xCB3B287DF62322E81CC5B4C1BA9D9F5A449E34069D403B00EB061FAED581737B SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x532 PUSH2 0x8D7 JUMP JUMPDEST PUSH2 0x53C PUSH1 0x0 PUSH2 0xA56 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x546 PUSH2 0x8D7 JUMP JUMPDEST TIMESTAMP DUP2 LT ISZERO PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537461727420446174652063616E277420626520696E20746865207061737400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xE5461405D7121C89A6FA291896D72F0514AC8957D0839FEAE0B904B5065E51A8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x23 DUP2 LT PUSH2 0x5E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x672 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH2 0x67B DUP2 PUSH2 0xA56 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x686 PUSH2 0x8D7 JUMP JUMPDEST DUP1 PUSH3 0x186A0 DUP2 LT PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F76696465642070657263656E746167652073686F756C64206265206C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373207468616E20313030250000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F76696465642070657263656E746167652073686F756C64206265206772 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6561746572207468616E20300000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563657069656E7420416464726573732063616E2774206265207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6164647265737300000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x25D JUMP JUMPDEST DUP2 PUSH1 0x25 SLOAD PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0xD3C JUMP JUMPDEST PUSH1 0x25 DUP2 SWAP1 SSTORE PUSH3 0x186A0 LT ISZERO PUSH2 0x856 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2070657263656E7461676573206578636565647320313030250000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x27 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x866 DUP4 PUSH2 0xD01 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP1 DUP5 MSTORE PUSH1 0x28 DUP4 MSTORE SWAP3 DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x595C5A9418C2EA607B802DFDEAC0CE122B959C5EB469F9C0BF86C1E262E7C72F SWAP2 ADD PUSH2 0x51D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x53C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x278D00 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x948 SWAP2 SWAP1 PUSH2 0xD55 JUMP JUMPDEST PUSH2 0x952 SWAP2 SWAP1 PUSH2 0xD68 JUMP JUMPDEST SWAP1 POP PUSH1 0x23 DUP2 LT PUSH2 0x96B JUMPI PUSH2 0x968 PUSH1 0x1 PUSH1 0x23 PUSH2 0xD55 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0xA391C15B PUSH1 0x2 DUP5 PUSH1 0x23 DUP2 LT PUSH2 0x99A JUMPI PUSH2 0x99A PUSH2 0xCD5 JUMP JUMPDEST ADD SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA2D SWAP2 SWAP1 PUSH2 0xD8A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xA4B SWAP1 DUP4 PUSH2 0xD55 JUMP JUMPDEST SWAP6 SWAP2 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xAFD JUMPI PUSH2 0xAFD PUSH2 0xABE JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0xABE JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xB6B PUSH2 0xB66 DUP4 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0xAD4 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBA5 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xB8E JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xBFF PUSH2 0xB66 DUP4 PUSH2 0xB05 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xC43 JUMPI PUSH2 0xC34 DUP7 PUSH2 0xB29 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xC23 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xC59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC66 DUP6 DUP3 DUP7 ADD PUSH2 0xB45 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCA4 DUP3 PUSH2 0xB29 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC7 DUP4 PUSH2 0xB29 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xD13 JUMPI PUSH2 0xD13 PUSH2 0xCEB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xD4F JUMPI PUSH2 0xD4F PUSH2 0xCEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xD4F JUMPI PUSH2 0xD4F PUSH2 0xCEB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xD85 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE REVERT STOP LOG3 DIFFICULTY MSTORE BASEFEE JUMPI 0xD 0x5E 0x27 SDIV EXTCODEHASH 0xBF 0xD7 0xEB SWAP3 SWAP13 RETURNDATASIZE RETURNDATACOPY GAS LOG0 PUSH26 0x88918ACC29A47B25D164736F6C63430008110033000000000000 ","sourceMap":"205:5367:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;239:24;;;;;;;;;160:25:22;;;148:2;133:18;239:24:20;;;;;;;;3347:545;;;;;;:::i;:::-;;:::i;:::-;;4689:226;;;:::i;3994:490::-;;;:::i;371:31::-;;;;;;1831:101:4;;;:::i;1930:245:20:-;;;;;;:::i;:::-;;:::i;1201:85:4:-;1247:7;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:4;;;3146:74:22;;3134:2;3119:18;1201:85:4;3000:226:22;323:42:20;;;;;;:::i;:::-;;:::i;571:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;3596:25:22;;;3652:2;3637:18;;3630:34;;;;3569:18;571:47:20;3422:248:22;2081:198:4;;;;;;:::i;:::-;;:::i;535:30:20:-;;;;;;2423:614;;;;;;:::i;:::-;;:::i;3347:545::-;1094:13:4;:11;:13::i;:::-;3538:3:20::1;3517:11;:18;:24;3496:111;;;::::0;-1:-1:-1;;;3496:111:20;;4136:2:22;3496:111:20::1;::::0;::::1;4118:21:22::0;4175:2;4155:18;;;4148:30;4214:34;4194:18;;;4187:62;4285:10;4265:18;;;4258:38;4313:19;;3496:111:20::1;;;;;;;;;3660:20;:27;3638:11;:18;:49;3617:136;;;::::0;-1:-1:-1;;;3617:136:20;;4545:2:22;3617:136:20::1;::::0;::::1;4527:21:22::0;4584:2;4564:18;;;4557:30;4623:34;4603:18;;;4596:62;4694:10;4674:18;;;4667:38;4722:19;;3617:136:20::1;4343:404:22::0;3617:136:20::1;3768:9;3763:123;3783:11;:18;3779:1;:22;3763:123;;;3822:53;3835:11;3847:1;3835:14;;;;;;;;:::i;:::-;;;;;;;3851:20;3872:1;3851:23;;;;;;;;:::i;:::-;;;;;;;3822:12;:53::i;:::-;3803:3:::0;::::1;::::0;::::1;:::i;:::-;;;;3763:123;;;;3347:545:::0;;:::o;4689:226::-;4730:19;4784:9;;4765:15;:28;4761:67;;-1:-1:-1;4816:1:20;;4689:226::o;4761:67::-;4839:18;4863;:16;:18::i;:::-;-1:-1:-1;4838:43:20;4689:226;-1:-1:-1;;4689:226:20:o;3994:490::-;4036:9;;4049:1;4036:14;4028:53;;;;-1:-1:-1;;;4028:53:20;;5358:2:22;4028:53:20;;;5340:21:22;5397:2;5377:18;;;5370:30;5436:28;5416:18;;;5409:56;5482:18;;4028:53:20;5156:350:22;4028:53:20;4118:9;;4099:15;:28;;4091:67;;;;-1:-1:-1;;;4091:67:20;;5358:2:22;4091:67:20;;;5340:21:22;5397:2;5377:18;;;5370:30;5436:28;5416:18;;;5409:56;5482:18;;4091:67:20;5156:350:22;4091:67:20;4170:18;4190:24;4218:18;:16;:18::i;:::-;4257:10;4246:22;;;;:10;:22;;;;;;:57;;;4327:5;;:38;;-1:-1:-1;;;4327:38:20;;;;;5685:74:22;;;;5775:18;;;5768:34;;;4169:67:20;;-1:-1:-1;4246:57:20;;-1:-1:-1;4246:22:20;;-1:-1:-1;;;;;4327:5:20;;:14;;5658:18:22;;4327:38:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4313:52;;4383:6;4375:47;;;;-1:-1:-1;;;4375:47:20;;6297:2:22;4375:47:20;;;6279:21:22;6336:2;6316:18;;;6309:30;6375;6355:18;;;6348:58;6423:18;;4375:47:20;6095:352:22;4375:47:20;4437:40;;;4454:10;5685:74:22;;5790:2;5775:18;;5768:34;;;4437:40:20;;5658:18:22;4437:40:20;;;;;;;;4018:466;;;3994:490::o;1831:101:4:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1930:245:20:-;1094:13:4;:11;:13::i;:::-;2021:15:20::1;2007:10;:29;;1999:73;;;::::0;-1:-1:-1;;;1999:73:20;;6654:2:22;1999:73:20::1;::::0;::::1;6636:21:22::0;6693:2;6673:18;;;6666:30;6732:33;6712:18;;;6705:61;6783:18;;1999:73:20::1;6452:355:22::0;1999:73:20::1;2083:9;:22:::0;;;2120:48:::1;::::0;;2144:10:::1;5685:74:22::0;;5790:2;5775:18;;5768:34;;;2120:48:20::1;::::0;5658:18:22;2120:48:20::1;;;;;;;1930:245:::0;:::o;323:42::-;;;;;;;;;;;;;;;-1:-1:-1;323:42:20;:::o;2081:198:4:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:4;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:4;;7014:2:22;2161:73:4::1;::::0;::::1;6996:21:22::0;7053:2;7033:18;;;7026:30;7092:34;7072:18;;;7065:62;7163:8;7143:18;;;7136:36;7189:19;;2161:73:4::1;6812:402:22::0;2161:73:4::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;2423:614:20:-;1094:13:4;:11;:13::i;:::-;2561:19:20::1;1063:6;1049:11;:20;1028:111;;;::::0;-1:-1:-1;;;1028:111:20;;7421:2:22;1028:111:20::1;::::0;::::1;7403:21:22::0;7460:2;7440:18;;;7433:30;7499:34;7479:18;;;7472:62;7570:14;7550:18;;;7543:42;7602:19;;1028:111:20::1;7219:408:22::0;1028:111:20::1;1184:1;1170:11;:15;1149:106;;;::::0;-1:-1:-1;;;1149:106:20;;7834:2:22;1149:106:20::1;::::0;::::1;7816:21:22::0;7873:2;7853:18;;;7846:30;7912:34;7892:18;;;7885:62;7983:14;7963:18;;;7956:42;8015:19;;1149:106:20::1;7632:408:22::0;1149:106:20::1;-1:-1:-1::0;;;;;2613:31:20;::::2;2592:117;;;::::0;-1:-1:-1;;;2592:117:20;;8247:2:22;2592:117:20::2;::::0;::::2;8229:21:22::0;8286:2;8266:18;;;8259:30;8325:34;8305:18;;;8298:62;8396:9;8376:18;;;8369:37;8423:19;;2592:117:20::2;8045:403:22::0;2592:117:20::2;2757:19;2738:16;;:38;;;;:::i;:::-;2719:16;:57:::0;;;2814:6:::2;-1:-1:-1::0;2794:26:20::2;2786:69;;;::::0;-1:-1:-1;;;2786:69:20;;8785:2:22;2786:69:20::2;::::0;::::2;8767:21:22::0;8824:2;8804:18;;;8797:30;8863:32;8843:18;;;8836:60;8913:18;;2786:69:20::2;8583:354:22::0;2786:69:20::2;2865:15;:17:::0;;;:15:::2;:17;::::0;::::2;:::i;:::-;::::0;;;-1:-1:-1;;2925:33:20::2;::::0;;;;::::2;::::0;;-1:-1:-1;2925:33:20;;;::::2;::::0;;::::2;::::0;;;-1:-1:-1;;;;;2893:29:20;::::2;::::0;;;:10:::2;:29:::0;;;;;;:65;;;;;::::2;::::0;;::::2;::::0;;;;2973:57;;5685:74:22;;;5775:18;;;5768:34;;;2973:57:20::2;::::0;5658:18:22;2973:57:20::2;5511:297:22::0;1359:130:4;1247:7;1273:6;-1:-1:-1;;;;;1273:6:4;719:10:12;1422:23:4;1414:68;;;;-1:-1:-1;;;1414:68:4;;9144:2:22;1414:68:4;;;9126:21:22;;;9163:18;;;9156:30;9222:34;9202:18;;;9195:62;9274:18;;1414:68:4;8942:356:22;4921:649:20;4996:19;5017:25;5058:14;310:7;5094:9;;5076:15;:27;;;;:::i;:::-;5075:46;;;;:::i;:::-;5058:63;;5145:30;5135:6;:40;5131:114;;5200:34;5233:1;5200:30;:34;:::i;:::-;5191:43;;5131:114;5254:24;5281:20;:24;5319:23;5343:6;5319:31;;;;;;;:::i;:::-;;;5375:10;5364:22;;;;:10;:22;;;;;;;:41;;;5281:134;;;;;;;;;;;;;3596:25:22;;;;3637:18;;;3630:34;3569:18;;5281:134:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5488:10;5425:18;5477:22;;;:10;:22;;;;;:38;5254:161;;-1:-1:-1;5425:18:20;5446:69;;5254:161;5446:69;:::i;:::-;5425:90;5546:16;;-1:-1:-1;4921:649:20;;-1:-1:-1;;;4921:649:20:o;2433:187:4:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:4;;;;;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;196:127:22:-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:275;399:2;393:9;464:2;445:13;;-1:-1:-1;;441:27:22;429:40;;499:18;484:34;;520:22;;;481:62;478:88;;;546:18;;:::i;:::-;582:2;575:22;328:275;;-1:-1:-1;328:275:22:o;608:183::-;668:4;701:18;693:6;690:30;687:56;;;723:18;;:::i;:::-;-1:-1:-1;768:1:22;764:14;780:4;760:25;;608:183::o;796:196::-;864:20;;-1:-1:-1;;;;;913:54:22;;903:65;;893:93;;982:1;979;972:12;893:93;796:196;;;:::o;997:662::-;1051:5;1104:3;1097:4;1089:6;1085:17;1081:27;1071:55;;1122:1;1119;1112:12;1071:55;1158:6;1145:20;1184:4;1208:60;1224:43;1264:2;1224:43;:::i;:::-;1208:60;:::i;:::-;1302:15;;;1388:1;1384:10;;;;1372:23;;1368:32;;;1333:12;;;;1412:15;;;1409:35;;;1440:1;1437;1430:12;1409:35;1476:2;1468:6;1464:15;1488:142;1504:6;1499:3;1496:15;1488:142;;;1570:17;;1558:30;;1608:12;;;;1521;;1488:142;;;-1:-1:-1;1648:5:22;997:662;-1:-1:-1;;;;;;997:662:22:o;1664:1146::-;1782:6;1790;1843:2;1831:9;1822:7;1818:23;1814:32;1811:52;;;1859:1;1856;1849:12;1811:52;1899:9;1886:23;1928:18;1969:2;1961:6;1958:14;1955:34;;;1985:1;1982;1975:12;1955:34;2023:6;2012:9;2008:22;1998:32;;2068:7;2061:4;2057:2;2053:13;2049:27;2039:55;;2090:1;2087;2080:12;2039:55;2126:2;2113:16;2148:4;2172:60;2188:43;2228:2;2188:43;:::i;2172:60::-;2266:15;;;2348:1;2344:10;;;;2336:19;;2332:28;;;2297:12;;;;2372:19;;;2369:39;;;2404:1;2401;2394:12;2369:39;2428:11;;;;2448:148;2464:6;2459:3;2456:15;2448:148;;;2530:23;2549:3;2530:23;:::i;:::-;2518:36;;2481:12;;;;2574;;;;2448:148;;;2615:5;-1:-1:-1;;2658:18:22;;2645:32;;-1:-1:-1;;2689:16:22;;;2686:36;;;2718:1;2715;2708:12;2686:36;;2741:63;2796:7;2785:8;2774:9;2770:24;2741:63;:::i;:::-;2731:73;;;1664:1146;;;;;:::o;2815:180::-;2874:6;2927:2;2915:9;2906:7;2902:23;2898:32;2895:52;;;2943:1;2940;2933:12;2895:52;-1:-1:-1;2966:23:22;;2815:180;-1:-1:-1;2815:180:22:o;3231:186::-;3290:6;3343:2;3331:9;3322:7;3318:23;3314:32;3311:52;;;3359:1;3356;3349:12;3311:52;3382:29;3401:9;3382:29;:::i;:::-;3372:39;3231:186;-1:-1:-1;;;3231:186:22:o;3675:254::-;3743:6;3751;3804:2;3792:9;3783:7;3779:23;3775:32;3772:52;;;3820:1;3817;3810:12;3772:52;3843:29;3862:9;3843:29;:::i;:::-;3833:39;3919:2;3904:18;;;;3891:32;;-1:-1:-1;;;3675:254:22:o;4752:127::-;4813:10;4808:3;4804:20;4801:1;4794:31;4844:4;4841:1;4834:15;4868:4;4865:1;4858:15;4884:127;4945:10;4940:3;4936:20;4933:1;4926:31;4976:4;4973:1;4966:15;5000:4;4997:1;4990:15;5016:135;5055:3;5076:17;;;5073:43;;5096:18;;:::i;:::-;-1:-1:-1;5143:1:22;5132:13;;5016:135::o;5813:277::-;5880:6;5933:2;5921:9;5912:7;5908:23;5904:32;5901:52;;;5949:1;5946;5939:12;5901:52;5981:9;5975:16;6034:5;6027:13;6020:21;6013:5;6010:32;6000:60;;6056:1;6053;6046:12;8453:125;8518:9;;;8539:10;;;8536:36;;;8552:18;;:::i;:::-;8453:125;;;;:::o;9303:128::-;9370:9;;;9391:11;;;9388:37;;;9405:18;;:::i;9436:217::-;9476:1;9502;9492:132;;9546:10;9541:3;9537:20;9534:1;9527:31;9581:4;9578:1;9571:15;9609:4;9606:1;9599:15;9492:132;-1:-1:-1;9638:9:22;;9436:217::o;9919:184::-;9989:6;10042:2;10030:9;10021:7;10017:23;10013:32;10010:52;;;10058:1;10055;10048:12;10010:52;-1:-1:-1;10081:16:22;;9919:184;-1:-1:-1;9919:184:22:o"},"gasEstimates":{"creation":{"codeDepositCost":"709000","executionCost":"infinite","totalCost":"infinite"},"external":{"addMultipleRecipients(address[],uint256[])":"infinite","addRecipient(address,uint256)":"79893","claim()":"infinite","cumulativeAmountsToVest(uint256)":"2474","hasClaim()":"infinite","owner()":"2346","recipients(address)":"4680","renounceOwnership()":"infinite","setStartDate(uint256)":"25877","startDate()":"2308","totalPercentages()":"2329","totalRecipients()":"2350","transferOwnership(address)":"28362"},"internal":{"calculateAmounts()":"infinite"}},"methodIdentifiers":{"addMultipleRecipients(address[],uint256[])":"114a76a1","addRecipient(address,uint256)":"f7982243","claim()":"4e71d92d","cumulativeAmountsToVest(uint256)":"e3eb1599","hasClaim()":"3e2c3a5a","owner()":"8da5cb5b","recipients(address)":"eb820312","renounceOwnership()":"715018a6","setStartDate(uint256)":"82d95df5","startDate()":"0b97bc86","totalPercentages()":"56fcdae3","totalRecipients()":"f4f8495b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[35]\",\"name\":\"_cumulativeAmountsToVest\",\"type\":\"uint256[35]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawPercentage\",\"type\":\"uint256\"}],\"name\":\"LogRecipientAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"LogStartDateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_withdrawPercentages\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawPercentage\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativeAmountsToVest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_owedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMultipleRecipients(address[],uint256[])\":{\"details\":\"Function add  multiple recipients to the vesting contract\",\"params\":{\"_recipients\":\"Array of recipient addresses. The arrya length should be less than 230, otherwise it will overflow the gas limit\",\"_withdrawPercentages\":\"Corresponding percentages of the recipients\"}},\"addRecipient(address,uint256)\":{\"details\":\"Function add recipient to the vesting contract\",\"params\":{\"_recipientAddress\":\"The address of the recipient\",\"_withdrawPercentage\":\"The percentage that the recipient should receive in each vesting period\"}},\"claim()\":{\"details\":\"Function that withdraws all available tokens for the current period\"},\"constructor\":{\"params\":{\"_cumulativeAmountsToVest\":\"The cumulative amounts for each vesting period\",\"_tokenAddress\":\"The address of the ALBT token\"}},\"hasClaim()\":{\"details\":\"Function that returns the amount that the user can withdraw at the current period.\",\"returns\":{\"_owedAmount\":\"The amount that the user can withdraw at the current period.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStartDate(uint256)\":{\"details\":\"Function that sets the start date of the Vesting\",\"params\":{\"_startDate\":\"The start date of the veseting presented as a timestamp\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PercentageCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary PercentageCalculator {\\n\\n\\t/*\\n\\tNote: Percentages will be provided in thousands to represent 3 digits after the decimal point.\\n\\tThe division is made by 100000\\n\\t*/\\n\\tfunction div(uint256 _amount, uint256 _percentage) public pure returns(uint256) {\\n\\t\\treturn _amount * _percentage / 100000;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf993270a256306ddcbd5cd17b510353f52c5c8bb761a72f9c86281b977fdb9d5\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./PercentageCalculator.sol\\\";\\n\\ncontract Vesting is Ownable {\\n    uint256 public startDate;\\n    uint256 internal constant periodLength = 30 days;\\n    uint256[35] public cumulativeAmountsToVest;\\n    uint256 public totalPercentages;\\n    IERC20 internal token;\\n\\n    struct Recipient {\\n        uint256 withdrawnAmount;\\n        uint256 withdrawPercentage;\\n    }\\n\\n    uint256 public totalRecipients;\\n    mapping(address => Recipient) public recipients;\\n\\n    event LogStartDateSet(address setter, uint256 startDate);\\n    event LogRecipientAdded(address recipient, uint256 withdrawPercentage);\\n    event LogTokensClaimed(address recipient, uint256 amount);\\n\\n    /*\\n     * Note: Percentages will be provided in thousands to represent 3 digits after the decimal point.\\n     * Ex. 10% = 10000\\n     */\\n    modifier onlyValidPercentages(uint256 _percentage) {\\n        require(\\n            _percentage < 100000,\\n            \\\"Provided percentage should be less than 100%\\\"\\n        );\\n        require(\\n            _percentage > 0,\\n            \\\"Provided percentage should be greater than 0\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @param _tokenAddress The address of the ALBT token\\n     * @param _cumulativeAmountsToVest The cumulative amounts for each vesting period\\n     */\\n    constructor(\\n        address _tokenAddress,\\n        uint256[35] memory _cumulativeAmountsToVest\\n    ) {\\n        require(\\n            _tokenAddress != address(0),\\n            \\\"Token Address can't be zero address\\\"\\n        );\\n        token = IERC20(_tokenAddress);\\n        cumulativeAmountsToVest = _cumulativeAmountsToVest;\\n    }\\n\\n    /**\\n     * @dev Function that sets the start date of the Vesting\\n     * @param _startDate The start date of the veseting presented as a timestamp\\n     */\\n    function setStartDate(uint256 _startDate) public onlyOwner {\\n        require(_startDate >= block.timestamp, \\\"Start Date can't be in the past\\\");\\n\\n        startDate = _startDate;\\n        emit LogStartDateSet(address(msg.sender), _startDate);\\n    }\\n\\n    /**\\n     * @dev Function add recipient to the vesting contract\\n     * @param _recipientAddress The address of the recipient\\n     * @param _withdrawPercentage The percentage that the recipient should receive in each vesting period\\n     */\\n    function addRecipient(\\n        address _recipientAddress,\\n        uint256 _withdrawPercentage\\n    ) public onlyOwner onlyValidPercentages(_withdrawPercentage) {\\n        require(\\n            _recipientAddress != address(0),\\n            \\\"Recepient Address can't be zero address\\\"\\n        );\\n        totalPercentages = totalPercentages + _withdrawPercentage;\\n        require(totalPercentages <= 100000, \\\"Total percentages exceeds 100%\\\");\\n        totalRecipients++;\\n\\n        recipients[_recipientAddress] = Recipient(0, _withdrawPercentage);\\n        emit LogRecipientAdded(_recipientAddress, _withdrawPercentage);\\n    }\\n\\n    /**\\n     * @dev Function add  multiple recipients to the vesting contract\\n     * @param _recipients Array of recipient addresses. The arrya length should be less than 230, otherwise it will overflow the gas limit\\n     * @param _withdrawPercentages Corresponding percentages of the recipients\\n     */\\n    function addMultipleRecipients(\\n        address[] memory _recipients,\\n        uint256[] memory _withdrawPercentages\\n    ) public onlyOwner {\\n        require(\\n            _recipients.length < 230,\\n            \\\"The recipients must be not more than 230\\\"\\n        );\\n        require(\\n            _recipients.length == _withdrawPercentages.length,\\n            \\\"The two arryas are with different length\\\"\\n        );\\n        for (uint256 i; i < _recipients.length; i++) {\\n            addRecipient(_recipients[i], _withdrawPercentages[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that withdraws all available tokens for the current period\\n     */\\n    function claim() public {\\n        require(startDate != 0, \\\"The vesting hasn't started\\\");\\n        require(block.timestamp >= startDate, \\\"The vesting hasn't started\\\");\\n\\n        (uint256 owedAmount, uint256 calculatedAmount) = calculateAmounts();\\n        recipients[msg.sender].withdrawnAmount = calculatedAmount;\\n        bool result = token.transfer(msg.sender, owedAmount);\\n        require(result, \\\"The claim was not successful\\\");\\n        emit LogTokensClaimed(msg.sender, owedAmount);\\n    }\\n\\n    /**\\n     * @dev Function that returns the amount that the user can withdraw at the current period.\\n     * @return _owedAmount The amount that the user can withdraw at the current period.\\n     */\\n    function hasClaim() public view returns (uint256 _owedAmount) {\\n        if (block.timestamp <= startDate) {\\n            return 0;\\n        }\\n\\n        (uint256 owedAmount, ) = calculateAmounts();\\n        return owedAmount;\\n    }\\n\\n    function calculateAmounts()\\n        internal\\n        view\\n        returns (uint256 _owedAmount, uint256 _calculatedAmount)\\n    {\\n        uint256 period = (block.timestamp - startDate) / (periodLength);\\n        if (period >= cumulativeAmountsToVest.length) {\\n            period = cumulativeAmountsToVest.length - 1;\\n        }\\n        uint256 calculatedAmount = PercentageCalculator.div(\\n            cumulativeAmountsToVest[period],\\n            recipients[msg.sender].withdrawPercentage\\n        );\\n        uint256 owedAmount = calculatedAmount -\\n            recipients[msg.sender].withdrawnAmount;\\n\\n        return (owedAmount, calculatedAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xc8a8590978e4b5354af505d5f4d95ea0945a521624892145196933602c0ca43e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":546,"contract":"contracts/Vesting.sol:Vesting","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3482,"contract":"contracts/Vesting.sol:Vesting","label":"startDate","offset":0,"slot":"1","type":"t_uint256"},{"astId":3489,"contract":"contracts/Vesting.sol:Vesting","label":"cumulativeAmountsToVest","offset":0,"slot":"2","type":"t_array(t_uint256)35_storage"},{"astId":3491,"contract":"contracts/Vesting.sol:Vesting","label":"totalPercentages","offset":0,"slot":"37","type":"t_uint256"},{"astId":3494,"contract":"contracts/Vesting.sol:Vesting","label":"token","offset":0,"slot":"38","type":"t_contract(IERC20)1424"},{"astId":3501,"contract":"contracts/Vesting.sol:Vesting","label":"totalRecipients","offset":0,"slot":"39","type":"t_uint256"},{"astId":3506,"contract":"contracts/Vesting.sol:Vesting","label":"recipients","offset":0,"slot":"40","type":"t_mapping(t_address,t_struct(Recipient)3499_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)35_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[35]","numberOfBytes":"1120"},"t_contract(IERC20)1424":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_struct(Recipient)3499_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Vesting.Recipient)","numberOfBytes":"32","value":"t_struct(Recipient)3499_storage"},"t_struct(Recipient)3499_storage":{"encoding":"inplace","label":"struct Vesting.Recipient","members":[{"astId":3496,"contract":"contracts/Vesting.sol:Vesting","label":"withdrawnAmount","offset":0,"slot":"0","type":"t_uint256"},{"astId":3498,"contract":"contracts/Vesting.sol:Vesting","label":"withdrawPercentage","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/token/AllianceBlockToken.sol":{"AllianceBlockToken":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"removeMinterRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{"details":"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."},"name()":{"details":"Returns the name of the token."},"pause()":{"details":"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"unpause()":{"details":"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1587":{"entryPoint":null,"id":1587,"parameterSlots":2,"returnSlots":0},"@_3861":{"entryPoint":null,"id":3861,"parameterSlots":0,"returnSlots":0},"@_678":{"entryPoint":null,"id":678,"parameterSlots":0,"returnSlots":0},"@_804":{"entryPoint":null,"id":804,"parameterSlots":2,"returnSlots":0},"@_add_2817":{"entryPoint":532,"id":2817,"parameterSlots":2,"returnSlots":1},"@_contains_2920":{"entryPoint":null,"id":2920,"parameterSlots":2,"returnSlots":1},"@_grantRole_283":{"entryPoint":340,"id":283,"parameterSlots":2,"returnSlots":0},"@_grantRole_415":{"entryPoint":273,"id":415,"parameterSlots":2,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_setupRole_223":{"entryPoint":257,"id":223,"parameterSlots":2,"returnSlots":0},"@add_3117":{"entryPoint":500,"id":3117,"parameterSlots":2,"returnSlots":1},"@hasRole_79":{"entryPoint":null,"id":79,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":696,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":778,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":636,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":614,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2732:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:22"},"nodeType":"YulFunctionCall","src":"66:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:22"},"nodeType":"YulFunctionCall","src":"56:31:22"},"nodeType":"YulExpressionStatement","src":"56:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:22"},"nodeType":"YulFunctionCall","src":"96:15:22"},"nodeType":"YulExpressionStatement","src":"96:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:22"},"nodeType":"YulFunctionCall","src":"120:15:22"},"nodeType":"YulExpressionStatement","src":"120:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:22"},{"body":{"nodeType":"YulBlock","src":"201:325:22","statements":[{"nodeType":"YulAssignment","src":"211:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:22"},"nodeType":"YulFunctionCall","src":"221:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:22"},"nodeType":"YulFunctionCall","src":"268:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:22","statements":[{"nodeType":"YulAssignment","src":"321:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:22"},"nodeType":"YulFunctionCall","src":"331:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:22"},"nodeType":"YulFunctionCall","src":"292:26:22"},"nodeType":"YulIf","src":"289:61:22"},{"body":{"nodeType":"YulBlock","src":"409:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:22"},"nodeType":"YulFunctionCall","src":"433:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:22"},"nodeType":"YulFunctionCall","src":"423:31:22"},"nodeType":"YulExpressionStatement","src":"423:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:22"},"nodeType":"YulFunctionCall","src":"467:15:22"},"nodeType":"YulExpressionStatement","src":"467:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:22"},"nodeType":"YulFunctionCall","src":"495:15:22"},"nodeType":"YulExpressionStatement","src":"495:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:22"},"nodeType":"YulFunctionCall","src":"385:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:22"},"nodeType":"YulFunctionCall","src":"362:38:22"},"nodeType":"YulIf","src":"359:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:22","type":""}],"src":"146:380:22"},{"body":{"nodeType":"YulBlock","src":"587:65:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"604:1:22","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"607:3:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:22"},"nodeType":"YulFunctionCall","src":"597:14:22"},"nodeType":"YulExpressionStatement","src":"597:14:22"},{"nodeType":"YulAssignment","src":"620:26:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"628:9:22"},"nodeType":"YulFunctionCall","src":"628:18:22"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"620:4:22"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"570:3:22","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"578:4:22","type":""}],"src":"531:121:22"},{"body":{"nodeType":"YulBlock","src":"738:464:22","statements":[{"body":{"nodeType":"YulBlock","src":"771:425:22","statements":[{"nodeType":"YulVariableDeclaration","src":"785:11:22","value":{"kind":"number","nodeType":"YulLiteral","src":"795:1:22","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"789:2:22","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"816:2:22"},{"name":"array","nodeType":"YulIdentifier","src":"820:5:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:22"},"nodeType":"YulFunctionCall","src":"809:17:22"},"nodeType":"YulExpressionStatement","src":"809:17:22"},{"nodeType":"YulVariableDeclaration","src":"839:31:22","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"861:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"865:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"851:9:22"},"nodeType":"YulFunctionCall","src":"851:19:22"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"843:4:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"883:57:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"906:4:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:22","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"923:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"935:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"919:3:22"},"nodeType":"YulFunctionCall","src":"919:19:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"912:3:22"},"nodeType":"YulFunctionCall","src":"912:27:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:22"},"nodeType":"YulFunctionCall","src":"902:38:22"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"887:11:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"977:23:22","statements":[{"nodeType":"YulAssignment","src":"979:19:22","value":{"name":"data","nodeType":"YulIdentifier","src":"994:4:22"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"979:11:22"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"959:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:22","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"956:2:22"},"nodeType":"YulFunctionCall","src":"956:20:22"},"nodeType":"YulIf","src":"953:47:22"},{"nodeType":"YulVariableDeclaration","src":"1013:41:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1027:4:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:22","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1044:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1040:3:22"},"nodeType":"YulFunctionCall","src":"1040:12:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1033:3:22"},"nodeType":"YulFunctionCall","src":"1033:20:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:22"},"nodeType":"YulFunctionCall","src":"1023:31:22"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1017:2:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1067:24:22","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1080:11:22"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1071:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:21:22","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1174:5:22"},{"name":"_1","nodeType":"YulIdentifier","src":"1181:2:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1167:6:22"},"nodeType":"YulFunctionCall","src":"1167:17:22"},"nodeType":"YulExpressionStatement","src":"1167:17:22"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1115:5:22"},{"name":"_2","nodeType":"YulIdentifier","src":"1122:2:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1112:2:22"},"nodeType":"YulFunctionCall","src":"1112:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1126:26:22","statements":[{"nodeType":"YulAssignment","src":"1128:22:22","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1141:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1148:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:22"},"nodeType":"YulFunctionCall","src":"1137:13:22"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1128:5:22"}]}]},"pre":{"nodeType":"YulBlock","src":"1108:3:22","statements":[]},"src":"1104:82:22"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"754:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"759:2:22","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:22"},"nodeType":"YulFunctionCall","src":"751:11:22"},"nodeType":"YulIf","src":"748:448:22"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"710:5:22","type":""},{"name":"len","nodeType":"YulTypedName","src":"717:3:22","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"722:10:22","type":""}],"src":"657:545:22"},{"body":{"nodeType":"YulBlock","src":"1292:81:22","statements":[{"nodeType":"YulAssignment","src":"1302:65:22","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1317:4:22"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:22","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1338:3:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1331:3:22"},"nodeType":"YulFunctionCall","src":"1331:11:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1348:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1344:3:22"},"nodeType":"YulFunctionCall","src":"1344:6:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1327:3:22"},"nodeType":"YulFunctionCall","src":"1327:24:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1323:3:22"},"nodeType":"YulFunctionCall","src":"1323:29:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1313:3:22"},"nodeType":"YulFunctionCall","src":"1313:40:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:22","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1362:3:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1355:3:22"},"nodeType":"YulFunctionCall","src":"1355:11:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1310:2:22"},"nodeType":"YulFunctionCall","src":"1310:57:22"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1302:4:22"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1269:4:22","type":""},{"name":"len","nodeType":"YulTypedName","src":"1275:3:22","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1283:4:22","type":""}],"src":"1207:166:22"},{"body":{"nodeType":"YulBlock","src":"1474:1256:22","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:24:22","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1504:3:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:22"},"nodeType":"YulFunctionCall","src":"1498:10:22"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1488:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1551:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1553:16:22"},"nodeType":"YulFunctionCall","src":"1553:18:22"},"nodeType":"YulExpressionStatement","src":"1553:18:22"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1523:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:22","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1535:3:22"},"nodeType":"YulFunctionCall","src":"1535:10:22"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1531:3:22"},"nodeType":"YulFunctionCall","src":"1531:18:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1520:2:22"},"nodeType":"YulFunctionCall","src":"1520:30:22"},"nodeType":"YulIf","src":"1517:56:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1626:4:22"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1664:4:22"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1658:5:22"},"nodeType":"YulFunctionCall","src":"1658:11:22"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1632:25:22"},"nodeType":"YulFunctionCall","src":"1632:38:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"1672:6:22"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1582:43:22"},"nodeType":"YulFunctionCall","src":"1582:97:22"},"nodeType":"YulExpressionStatement","src":"1582:97:22"},{"nodeType":"YulVariableDeclaration","src":"1688:18:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1705:1:22","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1692:9:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1715:23:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1734:4:22","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1719:11:22","type":""}]},{"nodeType":"YulAssignment","src":"1747:24:22","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1760:11:22"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1747:9:22"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1817:656:22","statements":[{"nodeType":"YulVariableDeclaration","src":"1831:35:22","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1850:6:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1858:3:22"},"nodeType":"YulFunctionCall","src":"1858:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1846:3:22"},"nodeType":"YulFunctionCall","src":"1846:20:22"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1835:7:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1879:49:22","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1923:4:22"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"1893:29:22"},"nodeType":"YulFunctionCall","src":"1893:35:22"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1883:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1941:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1950:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1945:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2028:172:22","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2053:6:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2071:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2076:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:22"},"nodeType":"YulFunctionCall","src":"2067:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2061:5:22"},"nodeType":"YulFunctionCall","src":"2061:26:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2046:6:22"},"nodeType":"YulFunctionCall","src":"2046:42:22"},"nodeType":"YulExpressionStatement","src":"2046:42:22"},{"nodeType":"YulAssignment","src":"2105:24:22","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2119:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:22"},"nodeType":"YulFunctionCall","src":"2115:14:22"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2105:6:22"}]},{"nodeType":"YulAssignment","src":"2146:40:22","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2163:9:22"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2174:11:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2159:3:22"},"nodeType":"YulFunctionCall","src":"2159:27:22"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2146:9:22"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1975:1:22"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1978:7:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:22"},"nodeType":"YulFunctionCall","src":"1972:14:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1987:28:22","statements":[{"nodeType":"YulAssignment","src":"1989:24:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1998:1:22"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2001:11:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1994:3:22"},"nodeType":"YulFunctionCall","src":"1994:19:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1989:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"1968:3:22","statements":[]},"src":"1964:236:22"},{"body":{"nodeType":"YulBlock","src":"2248:166:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:43:22","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2293:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2298:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2289:3:22"},"nodeType":"YulFunctionCall","src":"2289:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2283:5:22"},"nodeType":"YulFunctionCall","src":"2283:26:22"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2270:9:22","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2333:6:22"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2345:9:22"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2372:1:22","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2375:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2368:3:22"},"nodeType":"YulFunctionCall","src":"2368:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"2384:3:22","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2364:3:22"},"nodeType":"YulFunctionCall","src":"2364:24:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2390:3:22"},"nodeType":"YulFunctionCall","src":"2390:6:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2360:3:22"},"nodeType":"YulFunctionCall","src":"2360:37:22"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2356:3:22"},"nodeType":"YulFunctionCall","src":"2356:42:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:22"},"nodeType":"YulFunctionCall","src":"2341:58:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2326:6:22"},"nodeType":"YulFunctionCall","src":"2326:74:22"},"nodeType":"YulExpressionStatement","src":"2326:74:22"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2219:7:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"2228:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2216:2:22"},"nodeType":"YulFunctionCall","src":"2216:19:22"},"nodeType":"YulIf","src":"2213:201:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2434:4:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:22","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2451:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2444:3:22"},"nodeType":"YulFunctionCall","src":"2444:14:22"},{"kind":"number","nodeType":"YulLiteral","src":"2460:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:22"},"nodeType":"YulFunctionCall","src":"2440:22:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2427:6:22"},"nodeType":"YulFunctionCall","src":"2427:36:22"},"nodeType":"YulExpressionStatement","src":"2427:36:22"}]},"nodeType":"YulCase","src":"1810:663:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:1:22","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2490:234:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:14:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2517:1:22","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2508:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2553:67:22","statements":[{"nodeType":"YulAssignment","src":"2571:35:22","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2590:3:22"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2595:9:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:22"},"nodeType":"YulFunctionCall","src":"2586:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2580:5:22"},"nodeType":"YulFunctionCall","src":"2580:26:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:22"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2534:6:22"},"nodeType":"YulIf","src":"2531:89:22"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2640:4:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2699:5:22"},{"name":"newLen","nodeType":"YulIdentifier","src":"2706:6:22"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2646:52:22"},"nodeType":"YulFunctionCall","src":"2646:67:22"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2633:6:22"},"nodeType":"YulFunctionCall","src":"2633:81:22"},"nodeType":"YulExpressionStatement","src":"2633:81:22"}]},"nodeType":"YulCase","src":"2482:242:22","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1790:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1798:2:22","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1787:2:22"},"nodeType":"YulFunctionCall","src":"1787:14:22"},"nodeType":"YulSwitch","src":"1780:944:22"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1459:4:22","type":""},{"name":"src","nodeType":"YulTypedName","src":"1465:3:22","type":""}],"src":"1378:1352:22"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040518060400160405280601381526020017f416c6c69616e6365426c6f636b20546f6b656e00000000000000000000000000815250604051806040016040528060048152602001631053109560e21b815250818181600590816200007891906200030a565b5060066200008782826200030a565b50506007805460ff1916905550620000a160003362000101565b620000cd7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000101565b620000f97f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3362000101565b5050620003d6565b6200010d828262000111565b5050565b6200012882826200015460201b620009dc1760201c565b60008281526001602090815260409091206200014f91839062000a7a620001f4821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200010d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001b03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200020b836001600160a01b03841662000214565b90505b92915050565b60008181526001830160205260408120546200025d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200020e565b5060006200020e565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200029157607f821691505b602082108103620002b257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200014f57600081815260208120601f850160051c81016020861015620002e15750805b601f850160051c820191505b818110156200030257828155600101620002ed565b505050505050565b81516001600160401b0381111562000326576200032662000266565b6200033e816200033784546200027c565b84620002b8565b602080601f8311600181146200037657600084156200035d5750858301515b600019600386901b1c1916600185901b17855562000302565b600085815260208120601f198616915b82811015620003a75788860151825594840194600190910190840162000386565b5085821015620003c65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611a0280620003e66000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635c975abb11610104578063a217fddf116100a2578063d539139311610071578063d5391393146103f1578063d547741f14610418578063dd62ed3e1461042b578063e63ab1e91461046457600080fd5b8063a217fddf146103b0578063a457c2d7146103b8578063a9059cbb146103cb578063ca15c873146103de57600080fd5b80638456cb59116100de5780638456cb591461033e5780639010d07c1461034657806391d148541461037157806395d89b41146103a857600080fd5b80635c975abb146102f757806370a082311461030257806379cc67901461032b57600080fd5b8063313ce567116101715780633f4ba83a1161014b5780633f4ba83a146102b657806340c10f19146102be57806342966c68146102d157806354f1e126146102e457600080fd5b8063313ce5671461028157806336568abe1461029057806339509351146102a357600080fd5b806318160ddd116101ad57806318160ddd1461022457806323b872dd14610236578063248a9ca3146102495780632f2ff15d1461026c57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063095ea7b314610211575b600080fd5b6101e76101e23660046116b6565b61048b565b60405190151581526020015b60405180910390f35b6102046104b6565b6040516101f39190611704565b6101e761021f366004611753565b610548565b6004545b6040519081526020016101f3565b6101e761024436600461177d565b610560565b6102286102573660046117b9565b60009081526020819052604090206001015490565b61027f61027a3660046117d2565b610584565b005b604051601281526020016101f3565b61027f61029e3660046117d2565b6105ae565b6101e76102b1366004611753565b61063f565b61027f61067e565b61027f6102cc366004611753565b610724565b61027f6102df3660046117b9565b6107ca565b61027f6102f23660046117fe565b6107d7565b60075460ff166101e7565b6102286103103660046117fe565b6001600160a01b031660009081526002602052604090205490565b61027f610339366004611753565b610801565b61027f610816565b610359610354366004611819565b6108ba565b6040516001600160a01b0390911681526020016101f3565b6101e761037f3660046117d2565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102046108d9565b610228600081565b6101e76103c6366004611753565b6108e8565b6101e76103d9366004611753565b610992565b6102286103ec3660046117b9565b6109a0565b6102287f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61027f6104263660046117d2565b6109b7565b61022861043936600461183b565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6102287f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216635a05180f60e01b14806104b057506104b082610a8f565b92915050565b6060600580546104c590611865565b80601f01602080910402602001604051908101604052809291908181526020018280546104f190611865565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b5050505050905090565b600033610556818585610ac4565b5060019392505050565b60003361056e858285610be8565b610579858585610c7a565b506001949350505050565b60008281526020819052604090206001015461059f81610e5f565b6105a98383610e69565b505050565b6001600160a01b03811633146106315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61063b8282610e8b565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061055690829086906106799087906118b5565b610ac4565b6106a87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3361037f565b61071a5760405162461bcd60e51b815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e7061757365000000000000006064820152608401610628565b610722610ead565b565b61074e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361037f565b6107c05760405162461bcd60e51b815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f7665206d696e74657220726f6c6520746f206d696e74000000000000000000006064820152608401610628565b61063b8282610eff565b6107d43382610fcc565b50565b6107d47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6826109b7565b61080c823383610be8565b61063b8282610fcc565b6108407f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3361037f565b6108b25760405162461bcd60e51b815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f2070617573650000000000000000006064820152608401610628565b61072261110c565b60008281526001602052604081206108d29083611149565b9392505050565b6060600680546104c590611865565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156109855760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610628565b6105798286868403610ac4565b600033610556818585610c7a565b60008181526001602052604081206104b090611155565b6000828152602081905260409020600101546109d281610e5f565b6105a98383610e8b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661063b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006108d2836001600160a01b03841661115f565b60006001600160e01b03198216637965db0b60e01b14806104b057506301ffc9a760e01b6001600160e01b03198316146104b0565b6001600160a01b038316610b265760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610628565b6001600160a01b038216610b875760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610628565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600360209081526040808320938616835292905220546000198114610c745781811015610c675760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610628565b610c748484848403610ac4565b50505050565b6001600160a01b038316610cf65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610628565b6001600160a01b038216610d585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610628565b610d638383836111ae565b6001600160a01b03831660009081526002602052604090205481811015610df25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610628565b6001600160a01b0380851660008181526002602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e529086815260200190565b60405180910390a3610c74565b6107d481336111b9565b610e7382826109dc565b60008281526001602052604090206105a99082610a7a565b610e95828261122c565b60008281526001602052604090206105a990826112ab565b610eb56112c0565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610f555760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610628565b610f61600083836111ae565b8060046000828254610f7391906118b5565b90915550506001600160a01b0382166000818152600260209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03821661102c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610628565b611038826000836111ae565b6001600160a01b038216600090815260026020526040902054818110156110ac5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610628565b6001600160a01b03831660008181526002602090815260408083208686039055600480548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b611114611312565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ee23390565b60006108d28383611365565b60006104b0825490565b60008181526001830160205260408120546111a6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104b0565b5060006104b0565b6105a983838361138f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661063b576111ea81611408565b6111f583602061141a565b6040516020016112069291906118c8565b60408051601f198184030181529082905262461bcd60e51b825261062891600401611704565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561063b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108d2836001600160a01b0384166115c3565b60075460ff166107225760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610628565b60075460ff16156107225760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610628565b600082600001828154811061137c5761137c611949565b9060005260206000200154905092915050565b60075460ff16156105a95760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c6520706175736564000000000000000000000000000000000000000000006064820152608401610628565b60606104b06001600160a01b03831660145b6060600061142983600261195f565b6114349060026118b5565b67ffffffffffffffff81111561144c5761144c611976565b6040519080825280601f01601f191660200182016040528015611476576020820181803683370190505b509050600360fc1b8160008151811061149157611491611949565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106114c0576114c0611949565b60200101906001600160f81b031916908160001a90535060006114e484600261195f565b6114ef9060016118b5565b90505b6001811115611574577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061153057611530611949565b1a60f81b82828151811061154657611546611949565b60200101906001600160f81b031916908160001a90535060049490941c9361156d8161198c565b90506114f2565b5083156108d25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610628565b600081815260018301602052604081205480156116ac5760006115e76001836119a3565b85549091506000906115fb906001906119a3565b905081811461166057600086600001828154811061161b5761161b611949565b906000526020600020015490508087600001848154811061163e5761163e611949565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611671576116716119b6565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104b0565b60009150506104b0565b6000602082840312156116c857600080fd5b81356001600160e01b0319811681146108d257600080fd5b60005b838110156116fb5781810151838201526020016116e3565b50506000910152565b60208152600082518060208401526117238160408501602087016116e0565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461174e57600080fd5b919050565b6000806040838503121561176657600080fd5b61176f83611737565b946020939093013593505050565b60008060006060848603121561179257600080fd5b61179b84611737565b92506117a960208501611737565b9150604084013590509250925092565b6000602082840312156117cb57600080fd5b5035919050565b600080604083850312156117e557600080fd5b823591506117f560208401611737565b90509250929050565b60006020828403121561181057600080fd5b6108d282611737565b6000806040838503121561182c57600080fd5b50508035926020909101359150565b6000806040838503121561184e57600080fd5b61185783611737565b91506117f560208401611737565b600181811c9082168061187957607f821691505b60208210810361189957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104b0576104b061189f565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119008160178501602088016116e0565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161193d8160288401602088016116e0565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176104b0576104b061189f565b634e487b7160e01b600052604160045260246000fd5b60008161199b5761199b61189f565b506000190190565b818103818111156104b0576104b061189f565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220beea2ab24e7f9ba16138fe8cd5775407039e9b4a580be689e6dc0c29410b47bc64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x416C6C69616E6365426C6F636B20546F6B656E00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x10531095 PUSH1 0xE2 SHL DUP2 MSTORE POP DUP2 DUP2 DUP2 PUSH1 0x5 SWAP1 DUP2 PUSH3 0x78 SWAP2 SWAP1 PUSH3 0x30A JUMP JUMPDEST POP PUSH1 0x6 PUSH3 0x87 DUP3 DUP3 PUSH3 0x30A JUMP JUMPDEST POP POP PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH3 0xA1 PUSH1 0x0 CALLER PUSH3 0x101 JUMP JUMPDEST PUSH3 0xCD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH3 0x101 JUMP JUMPDEST PUSH3 0xF9 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH3 0x101 JUMP JUMPDEST POP POP PUSH3 0x3D6 JUMP JUMPDEST PUSH3 0x10D DUP3 DUP3 PUSH3 0x111 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x128 DUP3 DUP3 PUSH3 0x154 PUSH1 0x20 SHL PUSH3 0x9DC OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH3 0x14F SWAP2 DUP4 SWAP1 PUSH3 0xA7A PUSH3 0x1F4 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x10D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x1B0 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x20B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x214 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x25D JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x20E JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x20E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x291 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2B2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x14F JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2E1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x302 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2ED JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x326 JUMPI PUSH3 0x326 PUSH3 0x266 JUMP JUMPDEST PUSH3 0x33E DUP2 PUSH3 0x337 DUP5 SLOAD PUSH3 0x27C JUMP JUMPDEST DUP5 PUSH3 0x2B8 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x376 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x35D JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x302 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3A7 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x386 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x3C6 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1A02 DUP1 PUSH3 0x3E6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C975ABB GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x371 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x54F1E126 EQ PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B6 JUMP JUMPDEST PUSH2 0x48B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1704 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x548 JUMP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x177D JUMP JUMPDEST PUSH2 0x560 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x584 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x63F JUMP JUMPDEST PUSH2 0x27F PUSH2 0x67E JUMP JUMPDEST PUSH2 0x27F PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x724 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x2DF CALLDATASIZE PUSH1 0x4 PUSH2 0x17B9 JUMP JUMPDEST PUSH2 0x7CA JUMP JUMPDEST PUSH2 0x27F PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FE JUMP JUMPDEST PUSH2 0x7D7 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x816 JUMP JUMPDEST PUSH2 0x359 PUSH2 0x354 CALLDATASIZE PUSH1 0x4 PUSH2 0x1819 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x37F CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x228 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x992 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x17B9 JUMP JUMPDEST PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x228 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x183B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x228 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4B0 JUMPI POP PUSH2 0x4B0 DUP3 PUSH2 0xA8F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x4C5 SWAP1 PUSH2 0x1865 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4F1 SWAP1 PUSH2 0x1865 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x53E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x513 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x53E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x521 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x556 DUP2 DUP6 DUP6 PUSH2 0xAC4 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x56E DUP6 DUP3 DUP6 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x579 DUP6 DUP6 DUP6 PUSH2 0xC7A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x59F DUP2 PUSH2 0xE5F JUMP JUMPDEST PUSH2 0x5A9 DUP4 DUP4 PUSH2 0xE69 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x631 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x63B DUP3 DUP3 PUSH2 0xE8B JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x556 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x679 SWAP1 DUP8 SWAP1 PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0xAC4 JUMP JUMPDEST PUSH2 0x6A8 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x37F JUMP JUMPDEST PUSH2 0x71A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F20756E706175736500000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x722 PUSH2 0xEAD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74E PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0x37F JUMP JUMPDEST PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7665206D696E74657220726F6C6520746F206D696E7400000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x63B DUP3 DUP3 PUSH2 0xEFF JUMP JUMPDEST PUSH2 0x7D4 CALLER DUP3 PUSH2 0xFCC JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7D4 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x80C DUP3 CALLER DUP4 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x63B DUP3 DUP3 PUSH2 0xFCC JUMP JUMPDEST PUSH2 0x840 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x37F JUMP JUMPDEST PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F207061757365000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x8D2 SWAP1 DUP4 PUSH2 0x1149 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x4C5 SWAP1 PUSH2 0x1865 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x579 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x556 DUP2 DUP6 DUP6 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x4B0 SWAP1 PUSH2 0x1155 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x9D2 DUP2 PUSH2 0xE5F JUMP JUMPDEST PUSH2 0x5A9 DUP4 DUP4 PUSH2 0xE8B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x63B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xA36 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x115F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4B0 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xB26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC74 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0xC74 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xAC4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD58 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0xD63 DUP4 DUP4 DUP4 PUSH2 0x11AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xE52 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xC74 JUMP JUMPDEST PUSH2 0x7D4 DUP2 CALLER PUSH2 0x11B9 JUMP JUMPDEST PUSH2 0xE73 DUP3 DUP3 PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5A9 SWAP1 DUP3 PUSH2 0xA7A JUMP JUMPDEST PUSH2 0xE95 DUP3 DUP3 PUSH2 0x122C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5A9 SWAP1 DUP3 PUSH2 0x12AB JUMP JUMPDEST PUSH2 0xEB5 PUSH2 0x12C0 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF55 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0xF61 PUSH1 0x0 DUP4 DUP4 PUSH2 0x11AE JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF73 SWAP2 SWAP1 PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x102C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x1038 DUP3 PUSH1 0x0 DUP4 PUSH2 0x11AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x10AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1114 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xEE2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D2 DUP4 DUP4 PUSH2 0x1365 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B0 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x11A6 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x4B0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x4B0 JUMP JUMPDEST PUSH2 0x5A9 DUP4 DUP4 DUP4 PUSH2 0x138F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x63B JUMPI PUSH2 0x11EA DUP2 PUSH2 0x1408 JUMP JUMPDEST PUSH2 0x11F5 DUP4 PUSH1 0x20 PUSH2 0x141A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1206 SWAP3 SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x628 SWAP2 PUSH1 0x4 ADD PUSH2 0x1704 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x15C3 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x722 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x722 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x137C JUMPI PUSH2 0x137C PUSH2 0x1949 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696C652070617573656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1429 DUP4 PUSH1 0x2 PUSH2 0x195F JUMP JUMPDEST PUSH2 0x1434 SWAP1 PUSH1 0x2 PUSH2 0x18B5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x144C JUMPI PUSH2 0x144C PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1476 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1491 JUMPI PUSH2 0x1491 PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x14C0 JUMPI PUSH2 0x14C0 PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x14E4 DUP5 PUSH1 0x2 PUSH2 0x195F JUMP JUMPDEST PUSH2 0x14EF SWAP1 PUSH1 0x1 PUSH2 0x18B5 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1574 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1530 JUMPI PUSH2 0x1530 PUSH2 0x1949 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1546 JUMPI PUSH2 0x1546 PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x156D DUP2 PUSH2 0x198C JUMP JUMPDEST SWAP1 POP PUSH2 0x14F2 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x16AC JUMPI PUSH1 0x0 PUSH2 0x15E7 PUSH1 0x1 DUP4 PUSH2 0x19A3 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x15FB SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x19A3 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1660 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x161B JUMPI PUSH2 0x161B PUSH2 0x1949 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x163E JUMPI PUSH2 0x163E PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1671 JUMPI PUSH2 0x1671 PUSH2 0x19B6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16FB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16E3 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1723 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x16E0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x174E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x176F DUP4 PUSH2 0x1737 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x179B DUP5 PUSH2 0x1737 JUMP JUMPDEST SWAP3 POP PUSH2 0x17A9 PUSH1 0x20 DUP6 ADD PUSH2 0x1737 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x17F5 PUSH1 0x20 DUP5 ADD PUSH2 0x1737 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1810 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D2 DUP3 PUSH2 0x1737 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x182C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x184E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1857 DUP4 PUSH2 0x1737 JUMP JUMPDEST SWAP2 POP PUSH2 0x17F5 PUSH1 0x20 DUP5 ADD PUSH2 0x1737 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1879 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1899 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4B0 JUMPI PUSH2 0x4B0 PUSH2 0x189F JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1900 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x16E0 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x193D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x16E0 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4B0 JUMPI PUSH2 0x4B0 PUSH2 0x189F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x199B JUMPI PUSH2 0x199B PUSH2 0x189F JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4B0 JUMPI PUSH2 0x4B0 PUSH2 0x189F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xEA 0x2A 0xB2 0x4E PUSH32 0x9BA16138FE8CD5775407039E9B4A580BE689E6DC0C29410B47BC64736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"140:240:21:-:0;;;202:71;;;;;;;;;;1424:230:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1424:230:11;;;1484:4;1490:6;2050:5:6;2042;:13;;;;;;:::i;:::-;-1:-1:-1;2065:7:6;:17;2075:7;2065;:17;:::i;:::-;-1:-1:-1;;996:7:5;:15;;-1:-1:-1;;996:15:5;;;-1:-1:-1;1508:44:11::1;-1:-1:-1::0;719:10:12;1508::11::1;:44::i;:::-;1563:37;1148:24;719:10:12::0;1508::11::1;:44::i;1563:37::-;1610;1216:24;719:10:12::0;1508::11::1;:44::i;1610:37::-;1424:230:::0;;140:240:21;;6811:110:0;6889:25;6900:4;6906:7;6889:10;:25::i;:::-;6811:110;;:::o;1978:166:1:-;2065:31;2082:4;2088:7;2065:16;;;;;:31;;:::i;:::-;2106:18;;;;:12;:18;;;;;;;;:31;;2129:7;;2106:22;;;;;:31;;:::i;:::-;;1978:166;;:::o;7461:233:0:-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7539:149;;7582:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:12;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;8297:150:17:-;8367:4;8390:50;8395:3;-1:-1:-1;;;;;8415:23:17;;8390:4;:50::i;:::-;8383:57;;8297:150;;;;;:::o;2206:404::-;2269:4;4343:19;;;:12;;;:19;;;;;;2285:319;;-1:-1:-1;2327:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;2507:18;;2485:19;;;:12;;;:19;;;;;;:40;;;;2539:11;;2285:319;-1:-1:-1;2588:5:17;2581:12;;14:127:22;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:22;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:22;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:22;;;2580:26;2531:89;-1:-1:-1;;1335:1:22;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:22;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:22;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:22;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:22:o;:::-;140:240:21;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_27":{"entryPoint":null,"id":27,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_1551":{"entryPoint":null,"id":1551,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_1556":{"entryPoint":null,"id":1556,"parameterSlots":0,"returnSlots":0},"@_add_2817":{"entryPoint":4447,"id":2817,"parameterSlots":2,"returnSlots":1},"@_afterTokenTransfer_1345":{"entryPoint":null,"id":1345,"parameterSlots":3,"returnSlots":0},"@_approve_1280":{"entryPoint":2756,"id":1280,"parameterSlots":3,"returnSlots":0},"@_at_2951":{"entryPoint":4965,"id":2951,"parameterSlots":2,"returnSlots":1},"@_beforeTokenTransfer_1334":{"entryPoint":null,"id":1334,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1504":{"entryPoint":5007,"id":1504,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1665":{"entryPoint":4526,"id":1665,"parameterSlots":3,"returnSlots":0},"@_burn_1235":{"entryPoint":4044,"id":1235,"parameterSlots":2,"returnSlots":0},"@_checkRole_131":{"entryPoint":4537,"id":131,"parameterSlots":2,"returnSlots":0},"@_checkRole_92":{"entryPoint":3679,"id":92,"parameterSlots":1,"returnSlots":0},"@_contains_2920":{"entryPoint":null,"id":2920,"parameterSlots":2,"returnSlots":1},"@_grantRole_283":{"entryPoint":2524,"id":283,"parameterSlots":2,"returnSlots":0},"@_grantRole_415":{"entryPoint":3689,"id":415,"parameterSlots":2,"returnSlots":0},"@_length_2934":{"entryPoint":null,"id":2934,"parameterSlots":1,"returnSlots":1},"@_mint_1163":{"entryPoint":3839,"id":1163,"parameterSlots":2,"returnSlots":0},"@_msgSender_1678":{"entryPoint":null,"id":1678,"parameterSlots":0,"returnSlots":1},"@_pause_742":{"entryPoint":4364,"id":742,"parameterSlots":0,"returnSlots":0},"@_remove_2901":{"entryPoint":5571,"id":2901,"parameterSlots":2,"returnSlots":1},"@_requireNotPaused_715":{"entryPoint":4882,"id":715,"parameterSlots":0,"returnSlots":0},"@_requirePaused_726":{"entryPoint":4800,"id":726,"parameterSlots":0,"returnSlots":0},"@_revokeRole_314":{"entryPoint":4652,"id":314,"parameterSlots":2,"returnSlots":0},"@_revokeRole_439":{"entryPoint":3723,"id":439,"parameterSlots":2,"returnSlots":0},"@_spendAllowance_1323":{"entryPoint":3048,"id":1323,"parameterSlots":3,"returnSlots":0},"@_transfer_1106":{"entryPoint":3194,"id":1106,"parameterSlots":3,"returnSlots":0},"@_unpause_758":{"entryPoint":3757,"id":758,"parameterSlots":0,"returnSlots":0},"@add_3117":{"entryPoint":2682,"id":3117,"parameterSlots":2,"returnSlots":1},"@allowance_901":{"entryPoint":null,"id":901,"parameterSlots":2,"returnSlots":1},"@approve_926":{"entryPoint":1352,"id":926,"parameterSlots":2,"returnSlots":1},"@at_3213":{"entryPoint":4425,"id":3213,"parameterSlots":2,"returnSlots":1},"@balanceOf_858":{"entryPoint":null,"id":858,"parameterSlots":1,"returnSlots":1},"@burnFrom_1467":{"entryPoint":2049,"id":1467,"parameterSlots":2,"returnSlots":0},"@burn_1446":{"entryPoint":1994,"id":1446,"parameterSlots":1,"returnSlots":0},"@decimals_834":{"entryPoint":null,"id":834,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1029":{"entryPoint":2280,"id":1029,"parameterSlots":2,"returnSlots":1},"@getRoleAdmin_146":{"entryPoint":null,"id":146,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_391":{"entryPoint":2464,"id":391,"parameterSlots":1,"returnSlots":1},"@getRoleMember_375":{"entryPoint":2234,"id":375,"parameterSlots":2,"returnSlots":1},"@grantRole_166":{"entryPoint":1412,"id":166,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":null,"id":79,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_988":{"entryPoint":1599,"id":988,"parameterSlots":2,"returnSlots":1},"@length_3186":{"entryPoint":4437,"id":3186,"parameterSlots":1,"returnSlots":1},"@mint_1610":{"entryPoint":1828,"id":1610,"parameterSlots":2,"returnSlots":0},"@name_814":{"entryPoint":1206,"id":814,"parameterSlots":0,"returnSlots":1},"@pause_1627":{"entryPoint":2070,"id":1627,"parameterSlots":0,"returnSlots":0},"@paused_703":{"entryPoint":null,"id":703,"parameterSlots":0,"returnSlots":1},"@removeMinterRole_3872":{"entryPoint":2007,"id":3872,"parameterSlots":1,"returnSlots":0},"@remove_3144":{"entryPoint":4779,"id":3144,"parameterSlots":2,"returnSlots":1},"@renounceRole_209":{"entryPoint":1454,"id":209,"parameterSlots":2,"returnSlots":0},"@revokeRole_186":{"entryPoint":2487,"id":186,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1886":{"entryPoint":null,"id":1886,"parameterSlots":1,"returnSlots":1},"@supportsInterface_356":{"entryPoint":1163,"id":356,"parameterSlots":1,"returnSlots":1},"@supportsInterface_60":{"entryPoint":2703,"id":60,"parameterSlots":1,"returnSlots":1},"@symbol_824":{"entryPoint":2265,"id":824,"parameterSlots":0,"returnSlots":1},"@toHexString_1842":{"entryPoint":5146,"id":1842,"parameterSlots":2,"returnSlots":1},"@toHexString_1862":{"entryPoint":5128,"id":1862,"parameterSlots":1,"returnSlots":1},"@totalSupply_844":{"entryPoint":null,"id":844,"parameterSlots":0,"returnSlots":1},"@transferFrom_959":{"entryPoint":1376,"id":959,"parameterSlots":3,"returnSlots":1},"@transfer_883":{"entryPoint":2450,"id":883,"parameterSlots":2,"returnSlots":1},"@unpause_1644":{"entryPoint":1662,"id":1644,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":5943,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6203,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6013,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5971,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":6073,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":6098,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":6169,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5814,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6344,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5892,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6325,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6495,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6563,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5856,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":6540,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":6245,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6303,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":6582,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6473,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6518,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13481:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:22","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:22"},"nodeType":"YulFunctionCall","src":"131:12:22"},"nodeType":"YulExpressionStatement","src":"131:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:22"},"nodeType":"YulFunctionCall","src":"100:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:22"},"nodeType":"YulFunctionCall","src":"96:32:22"},"nodeType":"YulIf","src":"93:52:22"},{"nodeType":"YulVariableDeclaration","src":"154:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:22"},"nodeType":"YulFunctionCall","src":"167:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:22"},"nodeType":"YulFunctionCall","src":"256:12:22"},"nodeType":"YulExpressionStatement","src":"256:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:22"},"nodeType":"YulFunctionCall","src":"219:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:22"},"nodeType":"YulFunctionCall","src":"209:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:22"},"nodeType":"YulFunctionCall","src":"202:51:22"},"nodeType":"YulIf","src":"199:71:22"},{"nodeType":"YulAssignment","src":"279:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:22","type":""}],"src":"14:286:22"},{"body":{"nodeType":"YulBlock","src":"400:92:22","statements":[{"nodeType":"YulAssignment","src":"410:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:22"},"nodeType":"YulFunctionCall","src":"418:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:22"},"nodeType":"YulFunctionCall","src":"470:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:22"},"nodeType":"YulFunctionCall","src":"463:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:22"},"nodeType":"YulFunctionCall","src":"445:41:22"},"nodeType":"YulExpressionStatement","src":"445:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:22","type":""}],"src":"305:187:22"},{"body":{"nodeType":"YulBlock","src":"563:184:22","statements":[{"nodeType":"YulVariableDeclaration","src":"573:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"582:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"577:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"642:63:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"667:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"672:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"663:3:22"},"nodeType":"YulFunctionCall","src":"663:11:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"686:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"691:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:22"},"nodeType":"YulFunctionCall","src":"682:11:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"676:5:22"},"nodeType":"YulFunctionCall","src":"676:18:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"656:6:22"},"nodeType":"YulFunctionCall","src":"656:39:22"},"nodeType":"YulExpressionStatement","src":"656:39:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"603:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"606:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"600:2:22"},"nodeType":"YulFunctionCall","src":"600:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"614:19:22","statements":[{"nodeType":"YulAssignment","src":"616:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"625:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"628:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"621:3:22"},"nodeType":"YulFunctionCall","src":"621:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"616:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"596:3:22","statements":[]},"src":"592:113:22"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"725:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"730:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"721:3:22"},"nodeType":"YulFunctionCall","src":"721:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"739:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"714:6:22"},"nodeType":"YulFunctionCall","src":"714:27:22"},"nodeType":"YulExpressionStatement","src":"714:27:22"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"541:3:22","type":""},{"name":"dst","nodeType":"YulTypedName","src":"546:3:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"551:6:22","type":""}],"src":"497:250:22"},{"body":{"nodeType":"YulBlock","src":"873:275:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"890:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"901:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"883:6:22"},"nodeType":"YulFunctionCall","src":"883:21:22"},"nodeType":"YulExpressionStatement","src":"883:21:22"},{"nodeType":"YulVariableDeclaration","src":"913:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"933:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"927:5:22"},"nodeType":"YulFunctionCall","src":"927:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"917:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"960:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"971:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"956:3:22"},"nodeType":"YulFunctionCall","src":"956:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"976:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"949:6:22"},"nodeType":"YulFunctionCall","src":"949:34:22"},"nodeType":"YulExpressionStatement","src":"949:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1031:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1039:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1027:3:22"},"nodeType":"YulFunctionCall","src":"1027:15:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1048:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1059:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1044:3:22"},"nodeType":"YulFunctionCall","src":"1044:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"1064:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"992:34:22"},"nodeType":"YulFunctionCall","src":"992:79:22"},"nodeType":"YulExpressionStatement","src":"992:79:22"},{"nodeType":"YulAssignment","src":"1080:62:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1096:9:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1115:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1123:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1111:3:22"},"nodeType":"YulFunctionCall","src":"1111:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1132:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1128:3:22"},"nodeType":"YulFunctionCall","src":"1128:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1107:3:22"},"nodeType":"YulFunctionCall","src":"1107:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1092:3:22"},"nodeType":"YulFunctionCall","src":"1092:45:22"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1088:3:22"},"nodeType":"YulFunctionCall","src":"1088:54:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1080:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"842:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"853:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"864:4:22","type":""}],"src":"752:396:22"},{"body":{"nodeType":"YulBlock","src":"1202:147:22","statements":[{"nodeType":"YulAssignment","src":"1212:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1234:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1221:12:22"},"nodeType":"YulFunctionCall","src":"1221:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1212:5:22"}]},{"body":{"nodeType":"YulBlock","src":"1327:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1336:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1339:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1329:6:22"},"nodeType":"YulFunctionCall","src":"1329:12:22"},"nodeType":"YulExpressionStatement","src":"1329:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1263:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1274:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1281:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1270:3:22"},"nodeType":"YulFunctionCall","src":"1270:54:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1260:2:22"},"nodeType":"YulFunctionCall","src":"1260:65:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1253:6:22"},"nodeType":"YulFunctionCall","src":"1253:73:22"},"nodeType":"YulIf","src":"1250:93:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1181:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1192:5:22","type":""}],"src":"1153:196:22"},{"body":{"nodeType":"YulBlock","src":"1441:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"1487:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1496:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1499:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1489:6:22"},"nodeType":"YulFunctionCall","src":"1489:12:22"},"nodeType":"YulExpressionStatement","src":"1489:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1462:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1471:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1458:3:22"},"nodeType":"YulFunctionCall","src":"1458:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1483:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1454:3:22"},"nodeType":"YulFunctionCall","src":"1454:32:22"},"nodeType":"YulIf","src":"1451:52:22"},{"nodeType":"YulAssignment","src":"1512:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1541:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1522:18:22"},"nodeType":"YulFunctionCall","src":"1522:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1512:6:22"}]},{"nodeType":"YulAssignment","src":"1560:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1587:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1598:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1583:3:22"},"nodeType":"YulFunctionCall","src":"1583:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1570:12:22"},"nodeType":"YulFunctionCall","src":"1570:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1560:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1399:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1410:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1422:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1430:6:22","type":""}],"src":"1354:254:22"},{"body":{"nodeType":"YulBlock","src":"1714:76:22","statements":[{"nodeType":"YulAssignment","src":"1724:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1736:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1747:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1732:3:22"},"nodeType":"YulFunctionCall","src":"1732:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1724:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1766:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"1777:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1759:6:22"},"nodeType":"YulFunctionCall","src":"1759:25:22"},"nodeType":"YulExpressionStatement","src":"1759:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1683:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1694:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1705:4:22","type":""}],"src":"1613:177:22"},{"body":{"nodeType":"YulBlock","src":"1899:224:22","statements":[{"body":{"nodeType":"YulBlock","src":"1945:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1954:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1957:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1947:6:22"},"nodeType":"YulFunctionCall","src":"1947:12:22"},"nodeType":"YulExpressionStatement","src":"1947:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1920:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1929:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1916:3:22"},"nodeType":"YulFunctionCall","src":"1916:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1941:2:22","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1912:3:22"},"nodeType":"YulFunctionCall","src":"1912:32:22"},"nodeType":"YulIf","src":"1909:52:22"},{"nodeType":"YulAssignment","src":"1970:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1999:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1980:18:22"},"nodeType":"YulFunctionCall","src":"1980:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1970:6:22"}]},{"nodeType":"YulAssignment","src":"2018:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2051:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2062:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2047:3:22"},"nodeType":"YulFunctionCall","src":"2047:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2028:18:22"},"nodeType":"YulFunctionCall","src":"2028:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2018:6:22"}]},{"nodeType":"YulAssignment","src":"2075:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2102:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2113:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2098:3:22"},"nodeType":"YulFunctionCall","src":"2098:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2085:12:22"},"nodeType":"YulFunctionCall","src":"2085:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2075:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1849:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1860:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1872:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1880:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1888:6:22","type":""}],"src":"1795:328:22"},{"body":{"nodeType":"YulBlock","src":"2198:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"2244:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2253:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2256:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2246:6:22"},"nodeType":"YulFunctionCall","src":"2246:12:22"},"nodeType":"YulExpressionStatement","src":"2246:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2219:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2228:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2215:3:22"},"nodeType":"YulFunctionCall","src":"2215:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2240:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2211:3:22"},"nodeType":"YulFunctionCall","src":"2211:32:22"},"nodeType":"YulIf","src":"2208:52:22"},{"nodeType":"YulAssignment","src":"2269:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2292:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2279:12:22"},"nodeType":"YulFunctionCall","src":"2279:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2269:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2164:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2175:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2187:6:22","type":""}],"src":"2128:180:22"},{"body":{"nodeType":"YulBlock","src":"2414:76:22","statements":[{"nodeType":"YulAssignment","src":"2424:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2436:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2447:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2432:3:22"},"nodeType":"YulFunctionCall","src":"2432:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2424:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2466:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"2477:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:22"},"nodeType":"YulFunctionCall","src":"2459:25:22"},"nodeType":"YulExpressionStatement","src":"2459:25:22"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2383:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2394:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2405:4:22","type":""}],"src":"2313:177:22"},{"body":{"nodeType":"YulBlock","src":"2582:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"2628:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2637:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2640:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2630:6:22"},"nodeType":"YulFunctionCall","src":"2630:12:22"},"nodeType":"YulExpressionStatement","src":"2630:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2603:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2612:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2599:3:22"},"nodeType":"YulFunctionCall","src":"2599:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2624:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2595:3:22"},"nodeType":"YulFunctionCall","src":"2595:32:22"},"nodeType":"YulIf","src":"2592:52:22"},{"nodeType":"YulAssignment","src":"2653:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2676:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2663:12:22"},"nodeType":"YulFunctionCall","src":"2663:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2653:6:22"}]},{"nodeType":"YulAssignment","src":"2695:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2728:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2739:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:22"},"nodeType":"YulFunctionCall","src":"2724:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2705:18:22"},"nodeType":"YulFunctionCall","src":"2705:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2695:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2540:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2551:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2563:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2571:6:22","type":""}],"src":"2495:254:22"},{"body":{"nodeType":"YulBlock","src":"2851:87:22","statements":[{"nodeType":"YulAssignment","src":"2861:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2873:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2884:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2869:3:22"},"nodeType":"YulFunctionCall","src":"2869:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2861:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2903:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2918:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"2926:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2914:3:22"},"nodeType":"YulFunctionCall","src":"2914:17:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2896:6:22"},"nodeType":"YulFunctionCall","src":"2896:36:22"},"nodeType":"YulExpressionStatement","src":"2896:36:22"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2820:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2831:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2842:4:22","type":""}],"src":"2754:184:22"},{"body":{"nodeType":"YulBlock","src":"3013:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"3059:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3068:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3071:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3061:6:22"},"nodeType":"YulFunctionCall","src":"3061:12:22"},"nodeType":"YulExpressionStatement","src":"3061:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3034:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3043:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3030:3:22"},"nodeType":"YulFunctionCall","src":"3030:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3055:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3026:3:22"},"nodeType":"YulFunctionCall","src":"3026:32:22"},"nodeType":"YulIf","src":"3023:52:22"},{"nodeType":"YulAssignment","src":"3084:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3107:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3094:12:22"},"nodeType":"YulFunctionCall","src":"3094:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3084:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2979:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2990:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3002:6:22","type":""}],"src":"2943:180:22"},{"body":{"nodeType":"YulBlock","src":"3198:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"3244:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3253:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3256:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3246:6:22"},"nodeType":"YulFunctionCall","src":"3246:12:22"},"nodeType":"YulExpressionStatement","src":"3246:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3219:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3228:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3215:3:22"},"nodeType":"YulFunctionCall","src":"3215:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3240:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3211:3:22"},"nodeType":"YulFunctionCall","src":"3211:32:22"},"nodeType":"YulIf","src":"3208:52:22"},{"nodeType":"YulAssignment","src":"3269:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3298:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3279:18:22"},"nodeType":"YulFunctionCall","src":"3279:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3269:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3164:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3175:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3187:6:22","type":""}],"src":"3128:186:22"},{"body":{"nodeType":"YulBlock","src":"3406:161:22","statements":[{"body":{"nodeType":"YulBlock","src":"3452:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3461:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3464:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3454:6:22"},"nodeType":"YulFunctionCall","src":"3454:12:22"},"nodeType":"YulExpressionStatement","src":"3454:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3427:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3436:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3423:3:22"},"nodeType":"YulFunctionCall","src":"3423:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3448:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3419:3:22"},"nodeType":"YulFunctionCall","src":"3419:32:22"},"nodeType":"YulIf","src":"3416:52:22"},{"nodeType":"YulAssignment","src":"3477:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3487:12:22"},"nodeType":"YulFunctionCall","src":"3487:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3477:6:22"}]},{"nodeType":"YulAssignment","src":"3519:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3546:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3557:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3542:3:22"},"nodeType":"YulFunctionCall","src":"3542:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3529:12:22"},"nodeType":"YulFunctionCall","src":"3529:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3519:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3364:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3375:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3387:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3395:6:22","type":""}],"src":"3319:248:22"},{"body":{"nodeType":"YulBlock","src":"3673:125:22","statements":[{"nodeType":"YulAssignment","src":"3683:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3695:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3706:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3691:3:22"},"nodeType":"YulFunctionCall","src":"3691:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3683:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3725:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3740:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"3748:42:22","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3736:3:22"},"nodeType":"YulFunctionCall","src":"3736:55:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3718:6:22"},"nodeType":"YulFunctionCall","src":"3718:74:22"},"nodeType":"YulExpressionStatement","src":"3718:74:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3642:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3653:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3664:4:22","type":""}],"src":"3572:226:22"},{"body":{"nodeType":"YulBlock","src":"3890:173:22","statements":[{"body":{"nodeType":"YulBlock","src":"3936:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3945:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3948:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3938:6:22"},"nodeType":"YulFunctionCall","src":"3938:12:22"},"nodeType":"YulExpressionStatement","src":"3938:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3911:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3920:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3907:3:22"},"nodeType":"YulFunctionCall","src":"3907:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3932:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3903:3:22"},"nodeType":"YulFunctionCall","src":"3903:32:22"},"nodeType":"YulIf","src":"3900:52:22"},{"nodeType":"YulAssignment","src":"3961:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3990:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3971:18:22"},"nodeType":"YulFunctionCall","src":"3971:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3961:6:22"}]},{"nodeType":"YulAssignment","src":"4009:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4042:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4053:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4038:3:22"},"nodeType":"YulFunctionCall","src":"4038:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4019:18:22"},"nodeType":"YulFunctionCall","src":"4019:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4009:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3848:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3859:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3871:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3879:6:22","type":""}],"src":"3803:260:22"},{"body":{"nodeType":"YulBlock","src":"4123:325:22","statements":[{"nodeType":"YulAssignment","src":"4133:22:22","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4147:1:22","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4150:4:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4143:3:22"},"nodeType":"YulFunctionCall","src":"4143:12:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4133:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4164:38:22","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4194:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"4200:1:22","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4190:3:22"},"nodeType":"YulFunctionCall","src":"4190:12:22"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4168:18:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4241:31:22","statements":[{"nodeType":"YulAssignment","src":"4243:27:22","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4257:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4265:4:22","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4253:3:22"},"nodeType":"YulFunctionCall","src":"4253:17:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4243:6:22"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4221:18:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4214:6:22"},"nodeType":"YulFunctionCall","src":"4214:26:22"},"nodeType":"YulIf","src":"4211:61:22"},{"body":{"nodeType":"YulBlock","src":"4331:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4352:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4359:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4364:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4355:3:22"},"nodeType":"YulFunctionCall","src":"4355:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4345:6:22"},"nodeType":"YulFunctionCall","src":"4345:31:22"},"nodeType":"YulExpressionStatement","src":"4345:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4396:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4399:4:22","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4389:6:22"},"nodeType":"YulFunctionCall","src":"4389:15:22"},"nodeType":"YulExpressionStatement","src":"4389:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4424:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4427:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4417:6:22"},"nodeType":"YulFunctionCall","src":"4417:15:22"},"nodeType":"YulExpressionStatement","src":"4417:15:22"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4287:18:22"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4310:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"4318:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4307:2:22"},"nodeType":"YulFunctionCall","src":"4307:14:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4284:2:22"},"nodeType":"YulFunctionCall","src":"4284:38:22"},"nodeType":"YulIf","src":"4281:161:22"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4103:4:22","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4112:6:22","type":""}],"src":"4068:380:22"},{"body":{"nodeType":"YulBlock","src":"4627:237:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4644:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4655:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4637:6:22"},"nodeType":"YulFunctionCall","src":"4637:21:22"},"nodeType":"YulExpressionStatement","src":"4637:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4678:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4689:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4674:3:22"},"nodeType":"YulFunctionCall","src":"4674:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"4694:2:22","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4667:6:22"},"nodeType":"YulFunctionCall","src":"4667:30:22"},"nodeType":"YulExpressionStatement","src":"4667:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4717:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4728:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4713:3:22"},"nodeType":"YulFunctionCall","src":"4713:18:22"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4733:34:22","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4706:6:22"},"nodeType":"YulFunctionCall","src":"4706:62:22"},"nodeType":"YulExpressionStatement","src":"4706:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:22"},"nodeType":"YulFunctionCall","src":"4784:18:22"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4804:17:22","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4777:6:22"},"nodeType":"YulFunctionCall","src":"4777:45:22"},"nodeType":"YulExpressionStatement","src":"4777:45:22"},{"nodeType":"YulAssignment","src":"4831:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4843:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4854:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4839:3:22"},"nodeType":"YulFunctionCall","src":"4839:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4831:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4604:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4618:4:22","type":""}],"src":"4453:411:22"},{"body":{"nodeType":"YulBlock","src":"4901:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4918:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4925:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4930:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4921:3:22"},"nodeType":"YulFunctionCall","src":"4921:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4911:6:22"},"nodeType":"YulFunctionCall","src":"4911:31:22"},"nodeType":"YulExpressionStatement","src":"4911:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4958:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4961:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4951:6:22"},"nodeType":"YulFunctionCall","src":"4951:15:22"},"nodeType":"YulExpressionStatement","src":"4951:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4982:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4985:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4975:6:22"},"nodeType":"YulFunctionCall","src":"4975:15:22"},"nodeType":"YulExpressionStatement","src":"4975:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4869:127:22"},{"body":{"nodeType":"YulBlock","src":"5049:77:22","statements":[{"nodeType":"YulAssignment","src":"5059:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5070:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"5073:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5066:3:22"},"nodeType":"YulFunctionCall","src":"5066:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5059:3:22"}]},{"body":{"nodeType":"YulBlock","src":"5098:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5100:16:22"},"nodeType":"YulFunctionCall","src":"5100:18:22"},"nodeType":"YulExpressionStatement","src":"5100:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5090:1:22"},{"name":"sum","nodeType":"YulIdentifier","src":"5093:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5087:2:22"},"nodeType":"YulFunctionCall","src":"5087:10:22"},"nodeType":"YulIf","src":"5084:36:22"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5032:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"5035:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5041:3:22","type":""}],"src":"5001:125:22"},{"body":{"nodeType":"YulBlock","src":"5305:247:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5322:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5333:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5315:6:22"},"nodeType":"YulFunctionCall","src":"5315:21:22"},"nodeType":"YulExpressionStatement","src":"5315:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5356:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5367:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5352:3:22"},"nodeType":"YulFunctionCall","src":"5352:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5372:2:22","type":"","value":"57"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5345:6:22"},"nodeType":"YulFunctionCall","src":"5345:30:22"},"nodeType":"YulExpressionStatement","src":"5345:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5395:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5406:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5391:3:22"},"nodeType":"YulFunctionCall","src":"5391:18:22"},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d757374206861","kind":"string","nodeType":"YulLiteral","src":"5411:34:22","type":"","value":"ERC20PresetMinterPauser: must ha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5384:6:22"},"nodeType":"YulFunctionCall","src":"5384:62:22"},"nodeType":"YulExpressionStatement","src":"5384:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5466:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5477:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5462:3:22"},"nodeType":"YulFunctionCall","src":"5462:18:22"},{"hexValue":"76652070617573657220726f6c6520746f20756e7061757365","kind":"string","nodeType":"YulLiteral","src":"5482:27:22","type":"","value":"ve pauser role to unpause"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5455:6:22"},"nodeType":"YulFunctionCall","src":"5455:55:22"},"nodeType":"YulExpressionStatement","src":"5455:55:22"},{"nodeType":"YulAssignment","src":"5519:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5531:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5542:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5527:3:22"},"nodeType":"YulFunctionCall","src":"5527:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5519:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5282:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5296:4:22","type":""}],"src":"5131:421:22"},{"body":{"nodeType":"YulBlock","src":"5731:244:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5748:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5759:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5741:6:22"},"nodeType":"YulFunctionCall","src":"5741:21:22"},"nodeType":"YulExpressionStatement","src":"5741:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5782:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5793:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5778:3:22"},"nodeType":"YulFunctionCall","src":"5778:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"5798:2:22","type":"","value":"54"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5771:6:22"},"nodeType":"YulFunctionCall","src":"5771:30:22"},"nodeType":"YulExpressionStatement","src":"5771:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5821:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5832:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5817:3:22"},"nodeType":"YulFunctionCall","src":"5817:18:22"},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d757374206861","kind":"string","nodeType":"YulLiteral","src":"5837:34:22","type":"","value":"ERC20PresetMinterPauser: must ha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5810:6:22"},"nodeType":"YulFunctionCall","src":"5810:62:22"},"nodeType":"YulExpressionStatement","src":"5810:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5892:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5903:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5888:3:22"},"nodeType":"YulFunctionCall","src":"5888:18:22"},{"hexValue":"7665206d696e74657220726f6c6520746f206d696e74","kind":"string","nodeType":"YulLiteral","src":"5908:24:22","type":"","value":"ve minter role to mint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5881:6:22"},"nodeType":"YulFunctionCall","src":"5881:52:22"},"nodeType":"YulExpressionStatement","src":"5881:52:22"},{"nodeType":"YulAssignment","src":"5942:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5954:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5965:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5950:3:22"},"nodeType":"YulFunctionCall","src":"5950:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5942:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5708:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5722:4:22","type":""}],"src":"5557:418:22"},{"body":{"nodeType":"YulBlock","src":"6154:245:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6171:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6182:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6164:6:22"},"nodeType":"YulFunctionCall","src":"6164:21:22"},"nodeType":"YulExpressionStatement","src":"6164:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6205:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6216:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6201:3:22"},"nodeType":"YulFunctionCall","src":"6201:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6221:2:22","type":"","value":"55"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6194:6:22"},"nodeType":"YulFunctionCall","src":"6194:30:22"},"nodeType":"YulExpressionStatement","src":"6194:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6244:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6255:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6240:3:22"},"nodeType":"YulFunctionCall","src":"6240:18:22"},{"hexValue":"45524332305072657365744d696e7465725061757365723a206d757374206861","kind":"string","nodeType":"YulLiteral","src":"6260:34:22","type":"","value":"ERC20PresetMinterPauser: must ha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6233:6:22"},"nodeType":"YulFunctionCall","src":"6233:62:22"},"nodeType":"YulExpressionStatement","src":"6233:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6315:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6326:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6311:3:22"},"nodeType":"YulFunctionCall","src":"6311:18:22"},{"hexValue":"76652070617573657220726f6c6520746f207061757365","kind":"string","nodeType":"YulLiteral","src":"6331:25:22","type":"","value":"ve pauser role to pause"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6304:6:22"},"nodeType":"YulFunctionCall","src":"6304:53:22"},"nodeType":"YulExpressionStatement","src":"6304:53:22"},{"nodeType":"YulAssignment","src":"6366:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6378:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6389:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6374:3:22"},"nodeType":"YulFunctionCall","src":"6374:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6366:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6131:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6145:4:22","type":""}],"src":"5980:419:22"},{"body":{"nodeType":"YulBlock","src":"6578:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6595:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6606:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6588:6:22"},"nodeType":"YulFunctionCall","src":"6588:21:22"},"nodeType":"YulExpressionStatement","src":"6588:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6629:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6640:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6625:3:22"},"nodeType":"YulFunctionCall","src":"6625:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6645:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6618:6:22"},"nodeType":"YulFunctionCall","src":"6618:30:22"},"nodeType":"YulExpressionStatement","src":"6618:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6668:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6679:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6664:3:22"},"nodeType":"YulFunctionCall","src":"6664:18:22"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6684:34:22","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6657:6:22"},"nodeType":"YulFunctionCall","src":"6657:62:22"},"nodeType":"YulExpressionStatement","src":"6657:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6739:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6750:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6735:3:22"},"nodeType":"YulFunctionCall","src":"6735:18:22"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6755:7:22","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6728:6:22"},"nodeType":"YulFunctionCall","src":"6728:35:22"},"nodeType":"YulExpressionStatement","src":"6728:35:22"},{"nodeType":"YulAssignment","src":"6772:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6784:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6795:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6780:3:22"},"nodeType":"YulFunctionCall","src":"6780:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6772:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6555:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6569:4:22","type":""}],"src":"6404:401:22"},{"body":{"nodeType":"YulBlock","src":"6984:226:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7001:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7012:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6994:6:22"},"nodeType":"YulFunctionCall","src":"6994:21:22"},"nodeType":"YulExpressionStatement","src":"6994:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7035:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7046:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7031:3:22"},"nodeType":"YulFunctionCall","src":"7031:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7051:2:22","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7024:6:22"},"nodeType":"YulFunctionCall","src":"7024:30:22"},"nodeType":"YulExpressionStatement","src":"7024:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7074:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7085:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7070:3:22"},"nodeType":"YulFunctionCall","src":"7070:18:22"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7090:34:22","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7063:6:22"},"nodeType":"YulFunctionCall","src":"7063:62:22"},"nodeType":"YulExpressionStatement","src":"7063:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7145:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7156:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:22"},"nodeType":"YulFunctionCall","src":"7141:18:22"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7161:6:22","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7134:6:22"},"nodeType":"YulFunctionCall","src":"7134:34:22"},"nodeType":"YulExpressionStatement","src":"7134:34:22"},{"nodeType":"YulAssignment","src":"7177:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7189:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7200:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7185:3:22"},"nodeType":"YulFunctionCall","src":"7185:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7177:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6961:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6975:4:22","type":""}],"src":"6810:400:22"},{"body":{"nodeType":"YulBlock","src":"7389:224:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7406:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7417:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7399:6:22"},"nodeType":"YulFunctionCall","src":"7399:21:22"},"nodeType":"YulExpressionStatement","src":"7399:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7440:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7451:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7436:3:22"},"nodeType":"YulFunctionCall","src":"7436:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7456:2:22","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7429:6:22"},"nodeType":"YulFunctionCall","src":"7429:30:22"},"nodeType":"YulExpressionStatement","src":"7429:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7479:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7490:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7475:3:22"},"nodeType":"YulFunctionCall","src":"7475:18:22"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"7495:34:22","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7468:6:22"},"nodeType":"YulFunctionCall","src":"7468:62:22"},"nodeType":"YulExpressionStatement","src":"7468:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7550:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7561:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7546:3:22"},"nodeType":"YulFunctionCall","src":"7546:18:22"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"7566:4:22","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7539:6:22"},"nodeType":"YulFunctionCall","src":"7539:32:22"},"nodeType":"YulExpressionStatement","src":"7539:32:22"},{"nodeType":"YulAssignment","src":"7580:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7592:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7603:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7588:3:22"},"nodeType":"YulFunctionCall","src":"7588:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7580:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7366:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7380:4:22","type":""}],"src":"7215:398:22"},{"body":{"nodeType":"YulBlock","src":"7792:179:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7809:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7820:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7802:6:22"},"nodeType":"YulFunctionCall","src":"7802:21:22"},"nodeType":"YulExpressionStatement","src":"7802:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7843:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7854:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7839:3:22"},"nodeType":"YulFunctionCall","src":"7839:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"7859:2:22","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7832:6:22"},"nodeType":"YulFunctionCall","src":"7832:30:22"},"nodeType":"YulExpressionStatement","src":"7832:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7882:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7893:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7878:3:22"},"nodeType":"YulFunctionCall","src":"7878:18:22"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"7898:31:22","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7871:6:22"},"nodeType":"YulFunctionCall","src":"7871:59:22"},"nodeType":"YulExpressionStatement","src":"7871:59:22"},{"nodeType":"YulAssignment","src":"7939:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7951:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7962:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7947:3:22"},"nodeType":"YulFunctionCall","src":"7947:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7939:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7769:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7783:4:22","type":""}],"src":"7618:353:22"},{"body":{"nodeType":"YulBlock","src":"8150:227:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8167:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8178:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8160:6:22"},"nodeType":"YulFunctionCall","src":"8160:21:22"},"nodeType":"YulExpressionStatement","src":"8160:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8201:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8212:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8197:3:22"},"nodeType":"YulFunctionCall","src":"8197:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8217:2:22","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8190:6:22"},"nodeType":"YulFunctionCall","src":"8190:30:22"},"nodeType":"YulExpressionStatement","src":"8190:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8240:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8251:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8236:3:22"},"nodeType":"YulFunctionCall","src":"8236:18:22"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"8256:34:22","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8229:6:22"},"nodeType":"YulFunctionCall","src":"8229:62:22"},"nodeType":"YulExpressionStatement","src":"8229:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8311:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8322:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8307:3:22"},"nodeType":"YulFunctionCall","src":"8307:18:22"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"8327:7:22","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8300:6:22"},"nodeType":"YulFunctionCall","src":"8300:35:22"},"nodeType":"YulExpressionStatement","src":"8300:35:22"},{"nodeType":"YulAssignment","src":"8344:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8356:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8367:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8352:3:22"},"nodeType":"YulFunctionCall","src":"8352:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8344:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8127:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8141:4:22","type":""}],"src":"7976:401:22"},{"body":{"nodeType":"YulBlock","src":"8556:225:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8573:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8584:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8566:6:22"},"nodeType":"YulFunctionCall","src":"8566:21:22"},"nodeType":"YulExpressionStatement","src":"8566:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8607:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8618:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8603:3:22"},"nodeType":"YulFunctionCall","src":"8603:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8623:2:22","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8596:6:22"},"nodeType":"YulFunctionCall","src":"8596:30:22"},"nodeType":"YulExpressionStatement","src":"8596:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8646:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8657:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8642:3:22"},"nodeType":"YulFunctionCall","src":"8642:18:22"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"8662:34:22","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8635:6:22"},"nodeType":"YulFunctionCall","src":"8635:62:22"},"nodeType":"YulExpressionStatement","src":"8635:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8717:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8728:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8713:3:22"},"nodeType":"YulFunctionCall","src":"8713:18:22"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"8733:5:22","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8706:6:22"},"nodeType":"YulFunctionCall","src":"8706:33:22"},"nodeType":"YulExpressionStatement","src":"8706:33:22"},{"nodeType":"YulAssignment","src":"8748:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8760:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8771:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8756:3:22"},"nodeType":"YulFunctionCall","src":"8756:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8748:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8533:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8547:4:22","type":""}],"src":"8382:399:22"},{"body":{"nodeType":"YulBlock","src":"8960:228:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8977:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8988:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8970:6:22"},"nodeType":"YulFunctionCall","src":"8970:21:22"},"nodeType":"YulExpressionStatement","src":"8970:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9011:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9022:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9007:3:22"},"nodeType":"YulFunctionCall","src":"9007:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9027:2:22","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9000:6:22"},"nodeType":"YulFunctionCall","src":"9000:30:22"},"nodeType":"YulExpressionStatement","src":"9000:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9050:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9061:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9046:3:22"},"nodeType":"YulFunctionCall","src":"9046:18:22"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"9066:34:22","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9039:6:22"},"nodeType":"YulFunctionCall","src":"9039:62:22"},"nodeType":"YulExpressionStatement","src":"9039:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9121:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9132:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9117:3:22"},"nodeType":"YulFunctionCall","src":"9117:18:22"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"9137:8:22","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9110:6:22"},"nodeType":"YulFunctionCall","src":"9110:36:22"},"nodeType":"YulExpressionStatement","src":"9110:36:22"},{"nodeType":"YulAssignment","src":"9155:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9167:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9178:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9163:3:22"},"nodeType":"YulFunctionCall","src":"9163:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9155:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8937:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8951:4:22","type":""}],"src":"8786:402:22"},{"body":{"nodeType":"YulBlock","src":"9367:181:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9384:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9395:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9377:6:22"},"nodeType":"YulFunctionCall","src":"9377:21:22"},"nodeType":"YulExpressionStatement","src":"9377:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9418:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9429:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9414:3:22"},"nodeType":"YulFunctionCall","src":"9414:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9434:2:22","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9407:6:22"},"nodeType":"YulFunctionCall","src":"9407:30:22"},"nodeType":"YulExpressionStatement","src":"9407:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9457:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9468:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9453:3:22"},"nodeType":"YulFunctionCall","src":"9453:18:22"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"9473:33:22","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9446:6:22"},"nodeType":"YulFunctionCall","src":"9446:61:22"},"nodeType":"YulExpressionStatement","src":"9446:61:22"},{"nodeType":"YulAssignment","src":"9516:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9528:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9539:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9524:3:22"},"nodeType":"YulFunctionCall","src":"9524:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9516:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9344:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9358:4:22","type":""}],"src":"9193:355:22"},{"body":{"nodeType":"YulBlock","src":"9727:223:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9744:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9755:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9737:6:22"},"nodeType":"YulFunctionCall","src":"9737:21:22"},"nodeType":"YulExpressionStatement","src":"9737:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9778:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9789:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9774:3:22"},"nodeType":"YulFunctionCall","src":"9774:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"9794:2:22","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9767:6:22"},"nodeType":"YulFunctionCall","src":"9767:30:22"},"nodeType":"YulExpressionStatement","src":"9767:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9817:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9828:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9813:3:22"},"nodeType":"YulFunctionCall","src":"9813:18:22"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"9833:34:22","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9806:6:22"},"nodeType":"YulFunctionCall","src":"9806:62:22"},"nodeType":"YulExpressionStatement","src":"9806:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9888:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9899:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9884:3:22"},"nodeType":"YulFunctionCall","src":"9884:18:22"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"9904:3:22","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9877:6:22"},"nodeType":"YulFunctionCall","src":"9877:31:22"},"nodeType":"YulExpressionStatement","src":"9877:31:22"},{"nodeType":"YulAssignment","src":"9917:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9929:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9940:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9925:3:22"},"nodeType":"YulFunctionCall","src":"9925:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9917:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9704:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9718:4:22","type":""}],"src":"9553:397:22"},{"body":{"nodeType":"YulBlock","src":"10129:224:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10146:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10157:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10139:6:22"},"nodeType":"YulFunctionCall","src":"10139:21:22"},"nodeType":"YulExpressionStatement","src":"10139:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10180:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10191:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10176:3:22"},"nodeType":"YulFunctionCall","src":"10176:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"10196:2:22","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10169:6:22"},"nodeType":"YulFunctionCall","src":"10169:30:22"},"nodeType":"YulExpressionStatement","src":"10169:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10219:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10230:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10215:3:22"},"nodeType":"YulFunctionCall","src":"10215:18:22"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"10235:34:22","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10208:6:22"},"nodeType":"YulFunctionCall","src":"10208:62:22"},"nodeType":"YulExpressionStatement","src":"10208:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10290:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10301:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10286:3:22"},"nodeType":"YulFunctionCall","src":"10286:18:22"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"10306:4:22","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10279:6:22"},"nodeType":"YulFunctionCall","src":"10279:32:22"},"nodeType":"YulExpressionStatement","src":"10279:32:22"},{"nodeType":"YulAssignment","src":"10320:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10332:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"10343:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10328:3:22"},"nodeType":"YulFunctionCall","src":"10328:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10320:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10106:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10120:4:22","type":""}],"src":"9955:398:22"},{"body":{"nodeType":"YulBlock","src":"10747:423:22","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10764:3:22"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"10769:25:22","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10757:6:22"},"nodeType":"YulFunctionCall","src":"10757:38:22"},"nodeType":"YulExpressionStatement","src":"10757:38:22"},{"nodeType":"YulVariableDeclaration","src":"10804:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10824:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10818:5:22"},"nodeType":"YulFunctionCall","src":"10818:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10808:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10879:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"10887:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10875:3:22"},"nodeType":"YulFunctionCall","src":"10875:17:22"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10898:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"10903:2:22","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10894:3:22"},"nodeType":"YulFunctionCall","src":"10894:12:22"},{"name":"length","nodeType":"YulIdentifier","src":"10908:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10840:34:22"},"nodeType":"YulFunctionCall","src":"10840:75:22"},"nodeType":"YulExpressionStatement","src":"10840:75:22"},{"nodeType":"YulVariableDeclaration","src":"10924:26:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10938:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"10943:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10934:3:22"},"nodeType":"YulFunctionCall","src":"10934:16:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10928:2:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10970:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"10974:2:22","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10966:3:22"},"nodeType":"YulFunctionCall","src":"10966:11:22"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"10979:19:22","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10959:6:22"},"nodeType":"YulFunctionCall","src":"10959:40:22"},"nodeType":"YulExpressionStatement","src":"10959:40:22"},{"nodeType":"YulVariableDeclaration","src":"11008:29:22","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11030:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11024:5:22"},"nodeType":"YulFunctionCall","src":"11024:13:22"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11012:8:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11085:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"11093:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11081:3:22"},"nodeType":"YulFunctionCall","src":"11081:17:22"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11104:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"11108:2:22","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11100:3:22"},"nodeType":"YulFunctionCall","src":"11100:11:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"11113:8:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11046:34:22"},"nodeType":"YulFunctionCall","src":"11046:76:22"},"nodeType":"YulExpressionStatement","src":"11046:76:22"},{"nodeType":"YulAssignment","src":"11131:33:22","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11146:2:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"11150:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11142:3:22"},"nodeType":"YulFunctionCall","src":"11142:17:22"},{"kind":"number","nodeType":"YulLiteral","src":"11161:2:22","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11138:3:22"},"nodeType":"YulFunctionCall","src":"11138:26:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11131:3:22"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10715:3:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10720:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10728:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10739:3:22","type":""}],"src":"10358:812:22"},{"body":{"nodeType":"YulBlock","src":"11349:170:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11366:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11377:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11359:6:22"},"nodeType":"YulFunctionCall","src":"11359:21:22"},"nodeType":"YulExpressionStatement","src":"11359:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11400:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11411:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11396:3:22"},"nodeType":"YulFunctionCall","src":"11396:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"11416:2:22","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11389:6:22"},"nodeType":"YulFunctionCall","src":"11389:30:22"},"nodeType":"YulExpressionStatement","src":"11389:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11439:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11450:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11435:3:22"},"nodeType":"YulFunctionCall","src":"11435:18:22"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"11455:22:22","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11428:6:22"},"nodeType":"YulFunctionCall","src":"11428:50:22"},"nodeType":"YulExpressionStatement","src":"11428:50:22"},{"nodeType":"YulAssignment","src":"11487:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11499:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11510:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11495:3:22"},"nodeType":"YulFunctionCall","src":"11495:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11487:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11326:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11340:4:22","type":""}],"src":"11175:344:22"},{"body":{"nodeType":"YulBlock","src":"11698:166:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11715:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11726:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11708:6:22"},"nodeType":"YulFunctionCall","src":"11708:21:22"},"nodeType":"YulExpressionStatement","src":"11708:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11749:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11760:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11745:3:22"},"nodeType":"YulFunctionCall","src":"11745:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"11765:2:22","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11738:6:22"},"nodeType":"YulFunctionCall","src":"11738:30:22"},"nodeType":"YulExpressionStatement","src":"11738:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11788:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11799:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11784:3:22"},"nodeType":"YulFunctionCall","src":"11784:18:22"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"11804:18:22","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11777:6:22"},"nodeType":"YulFunctionCall","src":"11777:46:22"},"nodeType":"YulExpressionStatement","src":"11777:46:22"},{"nodeType":"YulAssignment","src":"11832:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11844:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11855:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11840:3:22"},"nodeType":"YulFunctionCall","src":"11840:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11832:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11675:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11689:4:22","type":""}],"src":"11524:340:22"},{"body":{"nodeType":"YulBlock","src":"11901:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11918:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11925:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11930:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11921:3:22"},"nodeType":"YulFunctionCall","src":"11921:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11911:6:22"},"nodeType":"YulFunctionCall","src":"11911:31:22"},"nodeType":"YulExpressionStatement","src":"11911:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11958:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11961:4:22","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11951:6:22"},"nodeType":"YulFunctionCall","src":"11951:15:22"},"nodeType":"YulExpressionStatement","src":"11951:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11982:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11985:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11975:6:22"},"nodeType":"YulFunctionCall","src":"11975:15:22"},"nodeType":"YulExpressionStatement","src":"11975:15:22"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11869:127:22"},{"body":{"nodeType":"YulBlock","src":"12175:232:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12192:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12203:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12185:6:22"},"nodeType":"YulFunctionCall","src":"12185:21:22"},"nodeType":"YulExpressionStatement","src":"12185:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12226:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12237:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12222:3:22"},"nodeType":"YulFunctionCall","src":"12222:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"12242:2:22","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12215:6:22"},"nodeType":"YulFunctionCall","src":"12215:30:22"},"nodeType":"YulExpressionStatement","src":"12215:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12265:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12276:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12261:3:22"},"nodeType":"YulFunctionCall","src":"12261:18:22"},{"hexValue":"45524332305061757361626c653a20746f6b656e207472616e73666572207768","kind":"string","nodeType":"YulLiteral","src":"12281:34:22","type":"","value":"ERC20Pausable: token transfer wh"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12254:6:22"},"nodeType":"YulFunctionCall","src":"12254:62:22"},"nodeType":"YulExpressionStatement","src":"12254:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12336:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12347:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12332:3:22"},"nodeType":"YulFunctionCall","src":"12332:18:22"},{"hexValue":"696c6520706175736564","kind":"string","nodeType":"YulLiteral","src":"12352:12:22","type":"","value":"ile paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12325:6:22"},"nodeType":"YulFunctionCall","src":"12325:40:22"},"nodeType":"YulExpressionStatement","src":"12325:40:22"},{"nodeType":"YulAssignment","src":"12374:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12386:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12397:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12382:3:22"},"nodeType":"YulFunctionCall","src":"12382:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12374:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12152:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12166:4:22","type":""}],"src":"12001:406:22"},{"body":{"nodeType":"YulBlock","src":"12464:116:22","statements":[{"nodeType":"YulAssignment","src":"12474:20:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12489:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"12492:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12485:3:22"},"nodeType":"YulFunctionCall","src":"12485:9:22"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"12474:7:22"}]},{"body":{"nodeType":"YulBlock","src":"12552:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12554:16:22"},"nodeType":"YulFunctionCall","src":"12554:18:22"},"nodeType":"YulExpressionStatement","src":"12554:18:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12523:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12516:6:22"},"nodeType":"YulFunctionCall","src":"12516:9:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12530:1:22"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"12537:7:22"},{"name":"x","nodeType":"YulIdentifier","src":"12546:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12533:3:22"},"nodeType":"YulFunctionCall","src":"12533:15:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12527:2:22"},"nodeType":"YulFunctionCall","src":"12527:22:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12513:2:22"},"nodeType":"YulFunctionCall","src":"12513:37:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12506:6:22"},"nodeType":"YulFunctionCall","src":"12506:45:22"},"nodeType":"YulIf","src":"12503:71:22"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12443:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"12446:1:22","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"12452:7:22","type":""}],"src":"12412:168:22"},{"body":{"nodeType":"YulBlock","src":"12617:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12634:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12641:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12646:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12637:3:22"},"nodeType":"YulFunctionCall","src":"12637:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12627:6:22"},"nodeType":"YulFunctionCall","src":"12627:31:22"},"nodeType":"YulExpressionStatement","src":"12627:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12674:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12677:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12667:6:22"},"nodeType":"YulFunctionCall","src":"12667:15:22"},"nodeType":"YulExpressionStatement","src":"12667:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12698:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12701:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12691:6:22"},"nodeType":"YulFunctionCall","src":"12691:15:22"},"nodeType":"YulExpressionStatement","src":"12691:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"12585:127:22"},{"body":{"nodeType":"YulBlock","src":"12764:89:22","statements":[{"body":{"nodeType":"YulBlock","src":"12791:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12793:16:22"},"nodeType":"YulFunctionCall","src":"12793:18:22"},"nodeType":"YulExpressionStatement","src":"12793:18:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12784:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12777:6:22"},"nodeType":"YulFunctionCall","src":"12777:13:22"},"nodeType":"YulIf","src":"12774:39:22"},{"nodeType":"YulAssignment","src":"12822:25:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12833:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12844:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12840:3:22"},"nodeType":"YulFunctionCall","src":"12840:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12829:3:22"},"nodeType":"YulFunctionCall","src":"12829:18:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12822:3:22"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12746:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12756:3:22","type":""}],"src":"12717:136:22"},{"body":{"nodeType":"YulBlock","src":"13032:182:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13049:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13060:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13042:6:22"},"nodeType":"YulFunctionCall","src":"13042:21:22"},"nodeType":"YulExpressionStatement","src":"13042:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13083:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13094:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13079:3:22"},"nodeType":"YulFunctionCall","src":"13079:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"13099:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13072:6:22"},"nodeType":"YulFunctionCall","src":"13072:30:22"},"nodeType":"YulExpressionStatement","src":"13072:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13122:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13133:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13118:3:22"},"nodeType":"YulFunctionCall","src":"13118:18:22"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"13138:34:22","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13111:6:22"},"nodeType":"YulFunctionCall","src":"13111:62:22"},"nodeType":"YulExpressionStatement","src":"13111:62:22"},{"nodeType":"YulAssignment","src":"13182:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13194:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13205:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13190:3:22"},"nodeType":"YulFunctionCall","src":"13190:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13182:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13009:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13023:4:22","type":""}],"src":"12858:356:22"},{"body":{"nodeType":"YulBlock","src":"13268:79:22","statements":[{"nodeType":"YulAssignment","src":"13278:17:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13290:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"13293:1:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13286:3:22"},"nodeType":"YulFunctionCall","src":"13286:9:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"13278:4:22"}]},{"body":{"nodeType":"YulBlock","src":"13319:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13321:16:22"},"nodeType":"YulFunctionCall","src":"13321:18:22"},"nodeType":"YulExpressionStatement","src":"13321:18:22"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"13310:4:22"},{"name":"x","nodeType":"YulIdentifier","src":"13316:1:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13307:2:22"},"nodeType":"YulFunctionCall","src":"13307:11:22"},"nodeType":"YulIf","src":"13304:37:22"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13250:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"13253:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"13259:4:22","type":""}],"src":"13219:128:22"},{"body":{"nodeType":"YulBlock","src":"13384:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13401:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13408:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13413:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13404:3:22"},"nodeType":"YulFunctionCall","src":"13404:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13394:6:22"},"nodeType":"YulFunctionCall","src":"13394:31:22"},"nodeType":"YulExpressionStatement","src":"13394:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13441:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13444:4:22","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13434:6:22"},"nodeType":"YulFunctionCall","src":"13434:15:22"},"nodeType":"YulExpressionStatement","src":"13434:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13465:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13468:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13458:6:22"},"nodeType":"YulFunctionCall","src":"13458:15:22"},"nodeType":"YulExpressionStatement","src":"13458:15:22"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"13352:127:22"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_176e32c23b35bed3cd8ee309232e2364823f6f66078e0cf4f5b5e41eee016186__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"ERC20PresetMinterPauser: must ha\")\n        mstore(add(headStart, 96), \"ve pauser role to unpause\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9efa111136b49cf2058ce33f60fa04a5749fd87012d74cadc251e21e1db53342__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"ERC20PresetMinterPauser: must ha\")\n        mstore(add(headStart, 96), \"ve minter role to mint\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d581fb23a6d539f3015b3485052424734f4b05014d1d5211f35a049cff57e330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 55)\n        mstore(add(headStart, 64), \"ERC20PresetMinterPauser: must ha\")\n        mstore(add(headStart, 96), \"ve pauser role to pause\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_fcb1fc9f3615fd38ab90d28b50a608758c295eeacbd5840421a4ee3b0df2f1f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC20Pausable: token transfer wh\")\n        mstore(add(headStart, 96), \"ile paused\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635c975abb11610104578063a217fddf116100a2578063d539139311610071578063d5391393146103f1578063d547741f14610418578063dd62ed3e1461042b578063e63ab1e91461046457600080fd5b8063a217fddf146103b0578063a457c2d7146103b8578063a9059cbb146103cb578063ca15c873146103de57600080fd5b80638456cb59116100de5780638456cb591461033e5780639010d07c1461034657806391d148541461037157806395d89b41146103a857600080fd5b80635c975abb146102f757806370a082311461030257806379cc67901461032b57600080fd5b8063313ce567116101715780633f4ba83a1161014b5780633f4ba83a146102b657806340c10f19146102be57806342966c68146102d157806354f1e126146102e457600080fd5b8063313ce5671461028157806336568abe1461029057806339509351146102a357600080fd5b806318160ddd116101ad57806318160ddd1461022457806323b872dd14610236578063248a9ca3146102495780632f2ff15d1461026c57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063095ea7b314610211575b600080fd5b6101e76101e23660046116b6565b61048b565b60405190151581526020015b60405180910390f35b6102046104b6565b6040516101f39190611704565b6101e761021f366004611753565b610548565b6004545b6040519081526020016101f3565b6101e761024436600461177d565b610560565b6102286102573660046117b9565b60009081526020819052604090206001015490565b61027f61027a3660046117d2565b610584565b005b604051601281526020016101f3565b61027f61029e3660046117d2565b6105ae565b6101e76102b1366004611753565b61063f565b61027f61067e565b61027f6102cc366004611753565b610724565b61027f6102df3660046117b9565b6107ca565b61027f6102f23660046117fe565b6107d7565b60075460ff166101e7565b6102286103103660046117fe565b6001600160a01b031660009081526002602052604090205490565b61027f610339366004611753565b610801565b61027f610816565b610359610354366004611819565b6108ba565b6040516001600160a01b0390911681526020016101f3565b6101e761037f3660046117d2565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102046108d9565b610228600081565b6101e76103c6366004611753565b6108e8565b6101e76103d9366004611753565b610992565b6102286103ec3660046117b9565b6109a0565b6102287f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61027f6104263660046117d2565b6109b7565b61022861043936600461183b565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6102287f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216635a05180f60e01b14806104b057506104b082610a8f565b92915050565b6060600580546104c590611865565b80601f01602080910402602001604051908101604052809291908181526020018280546104f190611865565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b5050505050905090565b600033610556818585610ac4565b5060019392505050565b60003361056e858285610be8565b610579858585610c7a565b506001949350505050565b60008281526020819052604090206001015461059f81610e5f565b6105a98383610e69565b505050565b6001600160a01b03811633146106315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61063b8282610e8b565b5050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061055690829086906106799087906118b5565b610ac4565b6106a87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3361037f565b61071a5760405162461bcd60e51b815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e7061757365000000000000006064820152608401610628565b610722610ead565b565b61074e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361037f565b6107c05760405162461bcd60e51b815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f7665206d696e74657220726f6c6520746f206d696e74000000000000000000006064820152608401610628565b61063b8282610eff565b6107d43382610fcc565b50565b6107d47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6826109b7565b61080c823383610be8565b61063b8282610fcc565b6108407f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3361037f565b6108b25760405162461bcd60e51b815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f2070617573650000000000000000006064820152608401610628565b61072261110c565b60008281526001602052604081206108d29083611149565b9392505050565b6060600680546104c590611865565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156109855760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610628565b6105798286868403610ac4565b600033610556818585610c7a565b60008181526001602052604081206104b090611155565b6000828152602081905260409020600101546109d281610e5f565b6105a98383610e8b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661063b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006108d2836001600160a01b03841661115f565b60006001600160e01b03198216637965db0b60e01b14806104b057506301ffc9a760e01b6001600160e01b03198316146104b0565b6001600160a01b038316610b265760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610628565b6001600160a01b038216610b875760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610628565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600360209081526040808320938616835292905220546000198114610c745781811015610c675760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610628565b610c748484848403610ac4565b50505050565b6001600160a01b038316610cf65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610628565b6001600160a01b038216610d585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610628565b610d638383836111ae565b6001600160a01b03831660009081526002602052604090205481811015610df25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610628565b6001600160a01b0380851660008181526002602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e529086815260200190565b60405180910390a3610c74565b6107d481336111b9565b610e7382826109dc565b60008281526001602052604090206105a99082610a7a565b610e95828261122c565b60008281526001602052604090206105a990826112ab565b610eb56112c0565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610f555760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610628565b610f61600083836111ae565b8060046000828254610f7391906118b5565b90915550506001600160a01b0382166000818152600260209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03821661102c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610628565b611038826000836111ae565b6001600160a01b038216600090815260026020526040902054818110156110ac5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610628565b6001600160a01b03831660008181526002602090815260408083208686039055600480548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b611114611312565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ee23390565b60006108d28383611365565b60006104b0825490565b60008181526001830160205260408120546111a6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104b0565b5060006104b0565b6105a983838361138f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661063b576111ea81611408565b6111f583602061141a565b6040516020016112069291906118c8565b60408051601f198184030181529082905262461bcd60e51b825261062891600401611704565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561063b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108d2836001600160a01b0384166115c3565b60075460ff166107225760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610628565b60075460ff16156107225760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610628565b600082600001828154811061137c5761137c611949565b9060005260206000200154905092915050565b60075460ff16156105a95760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c6520706175736564000000000000000000000000000000000000000000006064820152608401610628565b60606104b06001600160a01b03831660145b6060600061142983600261195f565b6114349060026118b5565b67ffffffffffffffff81111561144c5761144c611976565b6040519080825280601f01601f191660200182016040528015611476576020820181803683370190505b509050600360fc1b8160008151811061149157611491611949565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106114c0576114c0611949565b60200101906001600160f81b031916908160001a90535060006114e484600261195f565b6114ef9060016118b5565b90505b6001811115611574577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061153057611530611949565b1a60f81b82828151811061154657611546611949565b60200101906001600160f81b031916908160001a90535060049490941c9361156d8161198c565b90506114f2565b5083156108d25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610628565b600081815260018301602052604081205480156116ac5760006115e76001836119a3565b85549091506000906115fb906001906119a3565b905081811461166057600086600001828154811061161b5761161b611949565b906000526020600020015490508087600001848154811061163e5761163e611949565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611671576116716119b6565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104b0565b60009150506104b0565b6000602082840312156116c857600080fd5b81356001600160e01b0319811681146108d257600080fd5b60005b838110156116fb5781810151838201526020016116e3565b50506000910152565b60208152600082518060208401526117238160408501602087016116e0565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461174e57600080fd5b919050565b6000806040838503121561176657600080fd5b61176f83611737565b946020939093013593505050565b60008060006060848603121561179257600080fd5b61179b84611737565b92506117a960208501611737565b9150604084013590509250925092565b6000602082840312156117cb57600080fd5b5035919050565b600080604083850312156117e557600080fd5b823591506117f560208401611737565b90509250929050565b60006020828403121561181057600080fd5b6108d282611737565b6000806040838503121561182c57600080fd5b50508035926020909101359150565b6000806040838503121561184e57600080fd5b61185783611737565b91506117f560208401611737565b600181811c9082168061187957607f821691505b60208210810361189957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104b0576104b061189f565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119008160178501602088016116e0565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161193d8160288401602088016116e0565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176104b0576104b061189f565b634e487b7160e01b600052604160045260246000fd5b60008161199b5761199b61189f565b506000190190565b818103818111156104b0576104b061189f565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220beea2ab24e7f9ba16138fe8cd5775407039e9b4a580be689e6dc0c29410b47bc64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C975ABB GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD5391393 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x371 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x54F1E126 EQ PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B6 JUMP JUMPDEST PUSH2 0x48B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1704 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x548 JUMP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x177D JUMP JUMPDEST PUSH2 0x560 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x584 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x63F JUMP JUMPDEST PUSH2 0x27F PUSH2 0x67E JUMP JUMPDEST PUSH2 0x27F PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x724 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x2DF CALLDATASIZE PUSH1 0x4 PUSH2 0x17B9 JUMP JUMPDEST PUSH2 0x7CA JUMP JUMPDEST PUSH2 0x27F PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FE JUMP JUMPDEST PUSH2 0x7D7 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x816 JUMP JUMPDEST PUSH2 0x359 PUSH2 0x354 CALLDATASIZE PUSH1 0x4 PUSH2 0x1819 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x37F CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x228 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1753 JUMP JUMPDEST PUSH2 0x992 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x17B9 JUMP JUMPDEST PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x228 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x27F PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x228 PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x183B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x228 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4B0 JUMPI POP PUSH2 0x4B0 DUP3 PUSH2 0xA8F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x4C5 SWAP1 PUSH2 0x1865 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4F1 SWAP1 PUSH2 0x1865 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x53E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x513 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x53E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x521 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x556 DUP2 DUP6 DUP6 PUSH2 0xAC4 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x56E DUP6 DUP3 DUP6 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x579 DUP6 DUP6 DUP6 PUSH2 0xC7A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x59F DUP2 PUSH2 0xE5F JUMP JUMPDEST PUSH2 0x5A9 DUP4 DUP4 PUSH2 0xE69 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x631 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x63B DUP3 DUP3 PUSH2 0xE8B JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x556 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x679 SWAP1 DUP8 SWAP1 PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0xAC4 JUMP JUMPDEST PUSH2 0x6A8 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x37F JUMP JUMPDEST PUSH2 0x71A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F20756E706175736500000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x722 PUSH2 0xEAD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74E PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0x37F JUMP JUMPDEST PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7665206D696E74657220726F6C6520746F206D696E7400000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x63B DUP3 DUP3 PUSH2 0xEFF JUMP JUMPDEST PUSH2 0x7D4 CALLER DUP3 PUSH2 0xFCC JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7D4 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x80C DUP3 CALLER DUP4 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x63B DUP3 DUP3 PUSH2 0xFCC JUMP JUMPDEST PUSH2 0x840 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A CALLER PUSH2 0x37F JUMP JUMPDEST PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305072657365744D696E7465725061757365723A206D757374206861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x76652070617573657220726F6C6520746F207061757365000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x8D2 SWAP1 DUP4 PUSH2 0x1149 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x4C5 SWAP1 PUSH2 0x1865 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x579 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x556 DUP2 DUP6 DUP6 PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x4B0 SWAP1 PUSH2 0x1155 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x9D2 DUP2 PUSH2 0xE5F JUMP JUMPDEST PUSH2 0x5A9 DUP4 DUP4 PUSH2 0xE8B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x63B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xA36 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x115F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4B0 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xB26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC74 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0xC74 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xAC4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD58 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0xD63 DUP4 DUP4 DUP4 PUSH2 0x11AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xE52 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xC74 JUMP JUMPDEST PUSH2 0x7D4 DUP2 CALLER PUSH2 0x11B9 JUMP JUMPDEST PUSH2 0xE73 DUP3 DUP3 PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5A9 SWAP1 DUP3 PUSH2 0xA7A JUMP JUMPDEST PUSH2 0xE95 DUP3 DUP3 PUSH2 0x122C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5A9 SWAP1 DUP3 PUSH2 0x12AB JUMP JUMPDEST PUSH2 0xEB5 PUSH2 0x12C0 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF55 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0xF61 PUSH1 0x0 DUP4 DUP4 PUSH2 0x11AE JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF73 SWAP2 SWAP1 PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x102C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH2 0x1038 DUP3 PUSH1 0x0 DUP4 PUSH2 0x11AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x10AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1114 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xEE2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D2 DUP4 DUP4 PUSH2 0x1365 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B0 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x11A6 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x4B0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x4B0 JUMP JUMPDEST PUSH2 0x5A9 DUP4 DUP4 DUP4 PUSH2 0x138F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x63B JUMPI PUSH2 0x11EA DUP2 PUSH2 0x1408 JUMP JUMPDEST PUSH2 0x11F5 DUP4 PUSH1 0x20 PUSH2 0x141A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1206 SWAP3 SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x628 SWAP2 PUSH1 0x4 ADD PUSH2 0x1704 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x15C3 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x722 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x722 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x137C JUMPI PUSH2 0x137C PUSH2 0x1949 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305061757361626C653A20746F6B656E207472616E73666572207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696C652070617573656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1429 DUP4 PUSH1 0x2 PUSH2 0x195F JUMP JUMPDEST PUSH2 0x1434 SWAP1 PUSH1 0x2 PUSH2 0x18B5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x144C JUMPI PUSH2 0x144C PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1476 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1491 JUMPI PUSH2 0x1491 PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x14C0 JUMPI PUSH2 0x14C0 PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x14E4 DUP5 PUSH1 0x2 PUSH2 0x195F JUMP JUMPDEST PUSH2 0x14EF SWAP1 PUSH1 0x1 PUSH2 0x18B5 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1574 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1530 JUMPI PUSH2 0x1530 PUSH2 0x1949 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1546 JUMPI PUSH2 0x1546 PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x156D DUP2 PUSH2 0x198C JUMP JUMPDEST SWAP1 POP PUSH2 0x14F2 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x628 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x16AC JUMPI PUSH1 0x0 PUSH2 0x15E7 PUSH1 0x1 DUP4 PUSH2 0x19A3 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x15FB SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x19A3 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1660 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x161B JUMPI PUSH2 0x161B PUSH2 0x1949 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x163E JUMPI PUSH2 0x163E PUSH2 0x1949 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1671 JUMPI PUSH2 0x1671 PUSH2 0x19B6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16FB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16E3 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1723 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x16E0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x174E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x176F DUP4 PUSH2 0x1737 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x179B DUP5 PUSH2 0x1737 JUMP JUMPDEST SWAP3 POP PUSH2 0x17A9 PUSH1 0x20 DUP6 ADD PUSH2 0x1737 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x17F5 PUSH1 0x20 DUP5 ADD PUSH2 0x1737 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1810 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D2 DUP3 PUSH2 0x1737 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x182C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x184E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1857 DUP4 PUSH2 0x1737 JUMP JUMPDEST SWAP2 POP PUSH2 0x17F5 PUSH1 0x20 DUP5 ADD PUSH2 0x1737 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1879 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1899 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4B0 JUMPI PUSH2 0x4B0 PUSH2 0x189F JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1900 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x16E0 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x193D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x16E0 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4B0 JUMPI PUSH2 0x4B0 PUSH2 0x189F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x199B JUMPI PUSH2 0x199B PUSH2 0x189F JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4B0 JUMPI PUSH2 0x4B0 PUSH2 0x189F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xEA 0x2A 0xB2 0x4E PUSH32 0x9BA16138FE8CD5775407039E9B4A580BE689E6DC0C29410B47BC64736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"140:240:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;634:212:1;;;;;;:::i;:::-;;:::i;:::-;;;470:14:22;;463:22;445:41;;433:2;418:18;634:212:1;;;;;;;;2154:98:6;;;:::i;:::-;;;;;;;:::i;4431:197::-;;;;;;:::i;:::-;;:::i;3242:106::-;3329:12;;3242:106;;;1759:25:22;;;1747:2;1732:18;3242:106:6;1613:177:22;5190:286:6;;;;;;:::i;:::-;;:::i;4378:129:0:-;;;;;;:::i;:::-;4452:7;4478:12;;;;;;;;;;:22;;;;4378:129;4803:145;;;;;;:::i;:::-;;:::i;:::-;;3091:91:6;;;3173:2;2896:36:22;;2884:2;2869:18;3091:91:6;2754:184:22;5912:214:0;;;;;;:::i;:::-;;:::i;5871:234:6:-;;;;;;:::i;:::-;;:::i;2624:175:11:-;;;:::i;1843:202::-;;;;;;:::i;:::-;;:::i;578:89:8:-;;;;;;:::i;:::-;;:::i;280:98:21:-;;;;;;:::i;:::-;;:::i;1615:84:5:-;1685:7;;;;1615:84;;3406:125:6;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:6;3480:7;3506:18;;;:9;:18;;;;;;;3406:125;973:161:8;;;;;;:::i;:::-;;:::i;2248:169:11:-;;;:::i;1431:151:1:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3736:55:22;;;3718:74;;3706:2;3691:18;1431:151:1;3572:226:22;2895:145:0;;;;;;:::i;:::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145;2365:102:6;;;:::i;2027:49:0:-;;2072:4;2027:49;;6592:427:6;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;1750:140:1:-;;;;;;:::i;:::-;;:::i;1110:62:11:-;;1148:24;1110:62;;5228:147:0;;;;;;:::i;:::-;;:::i;3974:149:6:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4089:18:6;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149;1178:62:11;;1216:24;1178:62;;634:212:1;719:4;-1:-1:-1;;;;;;742:57:1;;-1:-1:-1;;;742:57:1;;:97;;;803:36;827:11;803:23;:36::i;:::-;735:104;634:212;-1:-1:-1;;634:212:1:o;2154:98:6:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:12;4568:32:6;719:10:12;4584:7:6;4593:6;4568:8;:32::i;:::-;-1:-1:-1;4617:4:6;;4431:197;-1:-1:-1;;;4431:197:6:o;5190:286::-;5317:4;719:10:12;5373:38:6;5389:4;719:10:12;5404:6:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:6;;5190:286;-1:-1:-1;;;;5190:286:6:o;4803:145:0:-;4452:7;4478:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4916:25:::1;4927:4;4933:7;4916:10;:25::i;:::-;4803:145:::0;;;:::o;5912:214::-;-1:-1:-1;;;;;6007:23:0;;719:10:12;6007:23:0;5999:83;;;;-1:-1:-1;;;5999:83:0;;4655:2:22;5999:83:0;;;4637:21:22;4694:2;4674:18;;;4667:30;4733:34;4713:18;;;4706:62;4804:17;4784:18;;;4777:45;4839:19;;5999:83:0;;;;;;;;;6093:26;6105:4;6111:7;6093:11;:26::i;:::-;5912:214;;:::o;5871:234:6:-;719:10:12;5959:4:6;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:6;;;;;;;;;;5959:4;;719:10:12;6013:64:6;;719:10:12;;4089:27:6;;6038:38;;6066:10;;6038:38;:::i;:::-;6013:8;:64::i;2624:175:11:-;2676:34;1216:24;719:10:12;2895:145:0;:::i;2676:34:11:-;2668:104;;;;-1:-1:-1;;;2668:104:11;;5333:2:22;2668:104:11;;;5315:21:22;5372:2;5352:18;;;5345:30;5411:34;5391:18;;;5384:62;5482:27;5462:18;;;5455:55;5527:19;;2668:104:11;5131:421:22;2668:104:11;2782:10;:8;:10::i;:::-;2624:175::o;1843:202::-;1918:34;1148:24;719:10:12;2895:145:0;:::i;1918:34:11:-;1910:101;;;;-1:-1:-1;;;1910:101:11;;5759:2:22;1910:101:11;;;5741:21:22;5798:2;5778:18;;;5771:30;5837:34;5817:18;;;5810:62;5908:24;5888:18;;;5881:52;5950:19;;1910:101:11;5557:418:22;1910:101:11;2021:17;2027:2;2031:6;2021:5;:17::i;578:89:8:-;633:27;719:10:12;653:6:8;633:5;:27::i;:::-;578:89;:::o;280:98:21:-;340:30;1148:24:11;364:5:21;340:10;:30::i;973:161:8:-;1049:46;1065:7;719:10:12;1088:6:8;1049:15;:46::i;:::-;1105:22;1111:7;1120:6;1105:5;:22::i;2248:169:11:-;2298:34;1216:24;719:10:12;2895:145:0;:::i;2298:34:11:-;2290:102;;;;-1:-1:-1;;;2290:102:11;;6182:2:22;2290:102:11;;;6164:21:22;6221:2;6201:18;;;6194:30;6260:34;6240:18;;;6233:62;6331:25;6311:18;;;6304:53;6374:19;;2290:102:11;5980:419:22;2290:102:11;2402:8;:6;:8::i;1431:151:1:-;1521:7;1547:18;;;:12;:18;;;;;:28;;1569:5;1547:21;:28::i;:::-;1540:35;1431:151;-1:-1:-1;;;1431:151:1:o;2365:102:6:-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;719:10:12;6685:4:6;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:6;;;;;;;;;;6685:4;;719:10:12;6829:15:6;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:6;;6606:2:22;6801:85:6;;;6588:21:22;6645:2;6625:18;;;6618:30;6684:34;6664:18;;;6657:62;6755:7;6735:18;;;6728:35;6780:19;;6801:85:6;6404:401:22;6801:85:6;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:12;3860:28:6;719:10:12;3877:2:6;3881:6;3860:9;:28::i;1750:140:1:-;1830:7;1856:18;;;:12;:18;;;;;:27;;:25;:27::i;5228:147:0:-;4452:7;4478:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5342:26:::1;5354:4;5360:7;5342:11;:26::i;7461:233::-:0;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7539:149;;7582:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:12;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;8297:150:17:-;8367:4;8390:50;8395:3;-1:-1:-1;;;;;8415:23:17;;8390:4;:50::i;2606:202:0:-;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:14;;;2765:36:0;829:155:14;10504:370:6;-1:-1:-1;;;;;10635:19:6;;10627:68;;;;-1:-1:-1;;;10627:68:6;;7012:2:22;10627:68:6;;;6994:21:22;7051:2;7031:18;;;7024:30;7090:34;7070:18;;;7063:62;-1:-1:-1;;;7141:18:22;;;7134:34;7185:19;;10627:68:6;6810:400:22;10627:68:6;-1:-1:-1;;;;;10713:21:6;;10705:68;;;;-1:-1:-1;;;10705:68:6;;7417:2:22;10705:68:6;;;7399:21:22;7456:2;7436:18;;;7429:30;7495:34;7475:18;;;7468:62;-1:-1:-1;;;7546:18:22;;;7539:32;7588:19;;10705:68:6;7215:398:22;10705:68:6;-1:-1:-1;;;;;10784:18:6;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1759:25:22;;;10835:32:6;;1732:18:22;10835:32:6;;;;;;;10504:370;;;:::o;11155:441::-;-1:-1:-1;;;;;4089:18:6;;;11285:24;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11351:37:6;;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:6;;7820:2:22;11404:68:6;;;7802:21:22;7859:2;7839:18;;;7832:30;7898:31;7878:18;;;7871:59;7947:18;;11404:68:6;7618:353:22;11404:68:6;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:6;;7591:68;;;;-1:-1:-1;;;7591:68:6;;8178:2:22;7591:68:6;;;8160:21:22;8217:2;8197:18;;;8190:30;8256:34;8236:18;;;8229:62;8327:7;8307:18;;;8300:35;8352:19;;7591:68:6;7976:401:22;7591:68:6;-1:-1:-1;;;;;7677:16:6;;7669:64;;;;-1:-1:-1;;;7669:64:6;;8584:2:22;7669:64:6;;;8566:21:22;8623:2;8603:18;;;8596:30;8662:34;8642:18;;;8635:62;-1:-1:-1;;;8713:18:22;;;8706:33;8756:19;;7669:64:6;8382:399:22;7669:64:6;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;-1:-1:-1;;;;;7815:15:6;;7793:19;7815:15;;;:9;:15;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:6;;8988:2:22;7840:72:6;;;8970:21:22;9027:2;9007:18;;;9000:30;9066:34;9046:18;;;9039:62;9137:8;9117:18;;;9110:36;9163:19;;7840:72:6;8786:402:22;7840:72:6;-1:-1:-1;;;;;7946:15:6;;;;;;;:9;:15;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;;;;;7978:6;1759:25:22;;1747:2;1732:18;;1613:177;8210:26:6;;;;;;;;8247:37;4803:145:0;3334:103;3400:30;3411:4;719:10:12;3400::0;:30::i;1978:166:1:-;2065:31;2082:4;2088:7;2065:16;:31::i;:::-;2106:18;;;;:12;:18;;;;;:31;;2129:7;2106:22;:31::i;2233:171::-;2321:32;2339:4;2345:7;2321:17;:32::i;:::-;2363:18;;;;:12;:18;;;;;:34;;2389:7;2363:25;:34::i;2433:117:5:-;1486:16;:14;:16::i;:::-;2491:7:::1;:15:::0;;-1:-1:-1;;2491:15:5::1;::::0;;2521:22:::1;719:10:12::0;2530:12:5::1;2521:22;::::0;-1:-1:-1;;;;;3736:55:22;;;3718:74;;3706:2;3691:18;2521:22:5::1;;;;;;;2433:117::o:0;8567:535:6:-;-1:-1:-1;;;;;8650:21:6;;8642:65;;;;-1:-1:-1;;;8642:65:6;;9395:2:22;8642:65:6;;;9377:21:22;9434:2;9414:18;;;9407:30;9473:33;9453:18;;;9446:61;9524:18;;8642:65:6;9193:355:22;8642:65:6;8718:49;8747:1;8751:7;8760:6;8718:20;:49::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:6;;;;;;:9;:18;;;;;;;;:28;;;;;;8999:37;1759:25:22;;;8999:37:6;;1732:18:22;8999:37:6;;;;;;;5912:214:0;;:::o;9422:659:6:-;-1:-1:-1;;;;;9505:21:6;;9497:67;;;;-1:-1:-1;;;9497:67:6;;9755:2:22;9497:67:6;;;9737:21:22;9794:2;9774:18;;;9767:30;9833:34;9813:18;;;9806:62;-1:-1:-1;;;9884:18:22;;;9877:31;9925:19;;9497:67:6;9553:397:22;9497:67:6;9575:49;9596:7;9613:1;9617:6;9575:20;:49::i;:::-;-1:-1:-1;;;;;9660:18:6;;9635:22;9660:18;;;:9;:18;;;;;;9696:24;;;;9688:71;;;;-1:-1:-1;;;9688:71:6;;10157:2:22;9688:71:6;;;10139:21:22;10196:2;10176:18;;;10169:30;10235:34;10215:18;;;10208:62;-1:-1:-1;;;10286:18:22;;;10279:32;10328:19;;9688:71:6;9955:398:22;9688:71:6;-1:-1:-1;;;;;9793:18:6;;;;;;:9;:18;;;;;;;;9814:23;;;9793:44;;9930:12;:22;;;;;;;9978:37;1759:25:22;;;9793:18:6;;;9978:37;;1732:18:22;9978:37:6;;;;;;;4803:145:0;;;:::o;2186:115:5:-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;2245:14:5::1;2255:4;2245:14;::::0;;2274:20:::1;2281:12;719:10:12::0;;640:96;9555:156:17;9629:7;9679:22;9683:3;9695:5;9679:3;:22::i;9098:115::-;9161:7;9187:19;9195:3;4537:18;;4455:107;2206:404;2269:4;4343:19;;;:12;;;:19;;;;;;2285:319;;-1:-1:-1;2327:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;2507:18;;2485:19;;;:12;;;:19;;;;;;:40;;;;2539:11;;2285:319;-1:-1:-1;2588:5:17;2581:12;;2805:211:11;2965:44;2992:4;2998:2;3002:6;2965:26;:44::i;3718:479:0:-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;3801:390;;3989:28;4009:7;3989:19;:28::i;:::-;4088:38;4116:4;4123:2;4088:19;:38::i;:::-;3896:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:252:0;;;;;;;;;;-1:-1:-1;;;3844:336:0;;;;;;;:::i;7865:234::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7944:149;;;8018:5;7986:12;;;;;;;;;;;-1:-1:-1;;;;;7986:29:0;;;;;;;;;;:37;;-1:-1:-1;;7986:37:0;;;8042:40;719:10:12;;7986:12:0;;8042:40;;8018:5;8042:40;7865:234;;:::o;8615:156:17:-;8688:4;8711:53;8719:3;-1:-1:-1;;;;;8739:23:17;;8711:7;:53::i;1945:106:5:-;1685:7;;;;2003:41;;;;-1:-1:-1;;;2003:41:5;;11377:2:22;2003:41:5;;;11359:21:22;11416:2;11396:18;;;11389:30;11455:22;11435:18;;;11428:50;11495:18;;2003:41:5;11175:344:22;1767:106:5;1685:7;;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:5;;11726:2:22;1828:38:5;;;11708:21:22;11765:2;11745:18;;;11738:30;11804:18;11784;;;11777:46;11840:18;;1828:38:5;11524:340:22;4904:118:17;4971:7;4997:3;:11;;5009:5;4997:18;;;;;;;;:::i;:::-;;;;;;;;;4990:25;;4904:118;;;;:::o;665:264:9:-;1685:7:5;;;;866:9:9;858:64;;;;-1:-1:-1;;;858:64:9;;12203:2:22;858:64:9;;;12185:21:22;12242:2;12222:18;;;12215:30;12281:34;12261:18;;;12254:62;12352:12;12332:18;;;12325:40;12382:19;;858:64:9;12001:406:22;2102:149:13;2160:13;2192:52;-1:-1:-1;;;;;2204:22:13;;311:2;1513:437;1588:13;1613:19;1645:10;1649:6;1645:1;:10;:::i;:::-;:14;;1658:1;1645:14;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:25:13;;1613:47;;-1:-1:-1;;;1670:6:13;1677:1;1670:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1670:15:13;;;;;;;;;-1:-1:-1;;;1695:6:13;1702:1;1695:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1695:15:13;;;;;;;;-1:-1:-1;1725:9:13;1737:10;1741:6;1737:1;:10;:::i;:::-;:14;;1750:1;1737:14;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;1791:8;1800:5;1808:3;1800:11;1791:21;;;;;;;:::i;:::-;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1779:33:13;;;;;;;;-1:-1:-1;1836:1:13;1826:11;;;;;1760:3;;;:::i;:::-;;;1720:128;;;-1:-1:-1;1865:10:13;;1857:55;;;;-1:-1:-1;;;1857:55:13;;13060:2:22;1857:55:13;;;13042:21:22;;;13079:18;;;13072:30;13138:34;13118:18;;;13111:62;13190:18;;1857:55:13;12858:356:22;2778:1388:17;2844:4;2981:19;;;:12;;;:19;;;;;;3015:15;;3011:1149;;3384:21;3408:14;3421:1;3408:10;:14;:::i;:::-;3456:18;;3384:38;;-1:-1:-1;3436:17:17;;3456:22;;3477:1;;3456:22;:::i;:::-;3436:42;;3510:13;3497:9;:26;3493:398;;3543:17;3563:3;:11;;3575:9;3563:22;;;;;;;;:::i;:::-;;;;;;;;;3543:42;;3714:9;3685:3;:11;;3697:13;3685:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3797:23;;;:12;;;:23;;;;;:36;;;3493:398;3969:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4061:3;:12;;:19;4074:5;4061:19;;;;;;;;;;;4054:26;;;4102:4;4095:11;;;;;;;3011:1149;4144:5;4137:12;;;;;14:286:22;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:22;;209:43;;199:71;;266:1;263;256:12;497:250;582:1;592:113;606:6;603:1;600:13;592:113;;;682:11;;;676:18;663:11;;;656:39;628:2;621:10;592:113;;;-1:-1:-1;;739:1:22;721:16;;714:27;497:250::o;752:396::-;901:2;890:9;883:21;864:4;933:6;927:13;976:6;971:2;960:9;956:18;949:34;992:79;1064:6;1059:2;1048:9;1044:18;1039:2;1031:6;1027:15;992:79;:::i;:::-;1132:2;1111:15;-1:-1:-1;;1107:29:22;1092:45;;;;1139:2;1088:54;;752:396;-1:-1:-1;;752:396:22:o;1153:196::-;1221:20;;-1:-1:-1;;;;;1270:54:22;;1260:65;;1250:93;;1339:1;1336;1329:12;1250:93;1153:196;;;:::o;1354:254::-;1422:6;1430;1483:2;1471:9;1462:7;1458:23;1454:32;1451:52;;;1499:1;1496;1489:12;1451:52;1522:29;1541:9;1522:29;:::i;:::-;1512:39;1598:2;1583:18;;;;1570:32;;-1:-1:-1;;;1354:254:22:o;1795:328::-;1872:6;1880;1888;1941:2;1929:9;1920:7;1916:23;1912:32;1909:52;;;1957:1;1954;1947:12;1909:52;1980:29;1999:9;1980:29;:::i;:::-;1970:39;;2028:38;2062:2;2051:9;2047:18;2028:38;:::i;:::-;2018:48;;2113:2;2102:9;2098:18;2085:32;2075:42;;1795:328;;;;;:::o;2128:180::-;2187:6;2240:2;2228:9;2219:7;2215:23;2211:32;2208:52;;;2256:1;2253;2246:12;2208:52;-1:-1:-1;2279:23:22;;2128:180;-1:-1:-1;2128:180:22:o;2495:254::-;2563:6;2571;2624:2;2612:9;2603:7;2599:23;2595:32;2592:52;;;2640:1;2637;2630:12;2592:52;2676:9;2663:23;2653:33;;2705:38;2739:2;2728:9;2724:18;2705:38;:::i;:::-;2695:48;;2495:254;;;;;:::o;3128:186::-;3187:6;3240:2;3228:9;3219:7;3215:23;3211:32;3208:52;;;3256:1;3253;3246:12;3208:52;3279:29;3298:9;3279:29;:::i;3319:248::-;3387:6;3395;3448:2;3436:9;3427:7;3423:23;3419:32;3416:52;;;3464:1;3461;3454:12;3416:52;-1:-1:-1;;3487:23:22;;;3557:2;3542:18;;;3529:32;;-1:-1:-1;3319:248:22:o;3803:260::-;3871:6;3879;3932:2;3920:9;3911:7;3907:23;3903:32;3900:52;;;3948:1;3945;3938:12;3900:52;3971:29;3990:9;3971:29;:::i;:::-;3961:39;;4019:38;4053:2;4042:9;4038:18;4019:38;:::i;4068:380::-;4147:1;4143:12;;;;4190;;;4211:61;;4265:4;4257:6;4253:17;4243:27;;4211:61;4318:2;4310:6;4307:14;4287:18;4284:38;4281:161;;4364:10;4359:3;4355:20;4352:1;4345:31;4399:4;4396:1;4389:15;4427:4;4424:1;4417:15;4281:161;;4068:380;;;:::o;4869:127::-;4930:10;4925:3;4921:20;4918:1;4911:31;4961:4;4958:1;4951:15;4985:4;4982:1;4975:15;5001:125;5066:9;;;5087:10;;;5084:36;;;5100:18;;:::i;10358:812::-;10769:25;10764:3;10757:38;10739:3;10824:6;10818:13;10840:75;10908:6;10903:2;10898:3;10894:12;10887:4;10879:6;10875:17;10840:75;:::i;:::-;10979:19;10974:2;10934:16;;;10966:11;;;10959:40;11024:13;;11046:76;11024:13;11108:2;11100:11;;11093:4;11081:17;;11046:76;:::i;:::-;11142:17;11161:2;11138:26;;10358:812;-1:-1:-1;;;;10358:812:22:o;11869:127::-;11930:10;11925:3;11921:20;11918:1;11911:31;11961:4;11958:1;11951:15;11985:4;11982:1;11975:15;12412:168;12485:9;;;12516;;12533:15;;;12527:22;;12513:37;12503:71;;12554:18;;:::i;12585:127::-;12646:10;12641:3;12637:20;12634:1;12627:31;12677:4;12674:1;12667:15;12701:4;12698:1;12691:15;12717:136;12756:3;12784:5;12774:39;;12793:18;;:::i;:::-;-1:-1:-1;;;12829:18:22;;12717:136::o;13219:128::-;13286:9;;;13307:11;;;13304:37;;;13321:18;;:::i;13352:127::-;13413:10;13408:3;13404:20;13401:1;13394:31;13444:4;13441:1;13434:15;13468:4;13465:1;13458:15"},"gasEstimates":{"creation":{"codeDepositCost":"1331600","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"240","MINTER_ROLE()":"239","PAUSER_ROLE()":"305","allowance(address,address)":"infinite","approve(address,uint256)":"24681","balanceOf(address)":"2605","burn(uint256)":"infinite","burnFrom(address,uint256)":"infinite","decimals()":"223","decreaseAllowance(address,uint256)":"26956","getRoleAdmin(bytes32)":"2537","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2728","increaseAllowance(address,uint256)":"27029","mint(address,uint256)":"infinite","name()":"infinite","pause()":"infinite","paused()":"2339","removeMinterRole(address)":"infinite","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","totalSupply()":"2327","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","unpause()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","PAUSER_ROLE()":"e63ab1e9","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","increaseAllowance(address,uint256)":"39509351","mint(address,uint256)":"40c10f19","name()":"06fdde03","pause()":"8456cb59","paused()":"5c975abb","removeMinterRole(address)":"54f1e126","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/AllianceBlockToken.sol\":\"AllianceBlockToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/token/AllianceBlockToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\\\";\\n\\ncontract AllianceBlockToken is ERC20PresetMinterPauser {\\n     constructor() ERC20PresetMinterPauser(\\\"AllianceBlock Token\\\", \\\"ALBT\\\") {}\\n\\n     function removeMinterRole(address owner) public {\\n          revokeRole(MINTER_ROLE, owner);\\n     }\\n}\\n\",\"keccak256\":\"0xdbccfe39b37e042bef68ea26e87e26c5e8edef83c9b666fb7ecc1a62ecc44464\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":334,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)3090_storage)"},{"astId":775,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_balances","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":781,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_allowances","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":783,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_totalSupply","offset":0,"slot":"4","type":"t_uint256"},{"astId":785,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_name","offset":0,"slot":"5","type":"t_string_storage"},{"astId":787,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_symbol","offset":0,"slot":"6","type":"t_string_storage"},{"astId":669,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_paused","offset":0,"slot":"7","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(AddressSet)3090_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3090_storage"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AddressSet)3090_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3089,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2775_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2775_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2770,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2774,"contract":"contracts/token/AllianceBlockToken.sol:AllianceBlockToken","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}